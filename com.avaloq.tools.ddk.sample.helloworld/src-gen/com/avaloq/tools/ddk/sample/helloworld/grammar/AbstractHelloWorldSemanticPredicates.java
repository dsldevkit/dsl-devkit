/*
 * generated by Xtext 2.14.0
 */
package com.avaloq.tools.ddk.sample.helloworld.grammar;

import com.avaloq.tools.ddk.xtext.parser.ISemanticPredicates.AbstractSemanticPredicates;
import com.avaloq.tools.ddk.xtext.parser.antlr.ParserContext;
import com.google.inject.Singleton;
import org.antlr.runtime.Token;

/**
 *  Provides semantic predicates as specified in the grammar. Language may need to override
 *  this class in order to provide concrete implementations for predicates.
 */
@Singleton
public class AbstractHelloWorldSemanticPredicates extends AbstractSemanticPredicates {

  /**
   * Predicate for grammar rule isKeyOneEnabled.
   *
   * @param input
   *          Input from Lexer
   * @return {@code true} if the grammar rule is enabled, {@code false} otherwise
   */
  public boolean isKeyOneEnabled(ParserContext parserContext) {
    String text = parserContext.getInput().LT(1).getText();
    return "one".equalsIgnoreCase(text);
  }

  /**
   * Predicate for grammar rule isKeyTwoEnabled.
   *
   * @param input
   *          Input from Lexer
   * @return {@code true} if the grammar rule is enabled, {@code false} otherwise
   */
  public boolean isKeyTwoEnabled(ParserContext parserContext) {
    String text = parserContext.getInput().LT(1).getText();
    return "two".equalsIgnoreCase(text);
  }

  /**
   * Predicate for grammar rule isKeyOtherEnabled.
   *
   * @param input
   *          Input from Lexer
   * @return {@code true} if the grammar rule is enabled, {@code false} otherwise
   */
  public boolean isKeyOtherEnabled(ParserContext parserContext) {
    String text = parserContext.getInput().LT(1).getText();
    return "one".equalsIgnoreCase(text) || "two".equalsIgnoreCase(text) || "three".equalsIgnoreCase(text);
  }


  /**
    * Message for isKeyOneEnabled predicate.
    *
    * @param input
    *          Input from Lexer
    * @return {@code true} if the grammar rule is enabled, {@code false} otherwise
    */
   public String getKeyOneEnabledMessage(Token token) {
     return "Unexpected: " + token.getText() + ". Expected: 'one'";
   }

  /**
    * Message for isKeyTwoEnabled predicate.
    *
    * @param input
    *          Input from Lexer
    * @return {@code true} if the grammar rule is enabled, {@code false} otherwise
    */
   public String getKeyTwoEnabledMessage(Token token) {
     return "Unexpected: " + token.getText() + ". Expected: 'two'";
   }

  /**
    * Message for isKeyOtherEnabled predicate.
    *
    * @param input
    *          Input from Lexer
    * @return {@code true} if the grammar rule is enabled, {@code false} otherwise
    */
   public String getKeyOtherEnabledMessage(Token token) {
     return "Unexpected: " + token.getText() + ". Expected: 'one', 'two', 'three'";
   }
}
