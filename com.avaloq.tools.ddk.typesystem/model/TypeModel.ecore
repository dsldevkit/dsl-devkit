<?xml version="1.0" encoding="UTF-8"?>
<ecore:EPackage xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore" name="typemodel" nsURI="http://www.avaloq.com/tools/ddk/typesystem/typemodel"
    nsPrefix="typemodel">
  <eClassifiers xsi:type="ecore:EClass" name="IExpression" abstract="true" interface="true"/>
  <eClassifiers xsi:type="ecore:EClass" name="IType" abstract="true" interface="true"/>
  <eClassifiers xsi:type="ecore:EClass" name="INamedElement" abstract="true" interface="true">
    <eOperations name="getName" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="OverrideDeclaration" abstract="true"
      eSuperTypes="#//INamedElement">
    <eOperations name="getDefinition" eType="#//INamedElement"/>
    <eOperations name="isOverride" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="NamedElement" eSuperTypes="#//INamedElement">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="The reason for this class is technical and,  in general, one should use the interface INamedElement instead&#xD;&#xA;of this class. This class is defined in the model because Xtext needs to find an instantiable class for&#xD;&#xA;INamedElement during the first phase of linking."/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="INamedType" abstract="true" interface="true"
      eSuperTypes="#//INamedElement #//IType"/>
  <eClassifiers xsi:type="ecore:EClass" name="NamedType" eSuperTypes="#//NamedElement #//INamedType">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="The reason for this class is technical and,  in general, one should use the interface INamedType instead&#xD;&#xA;of this class. This class is defined in the model because Xtext needs to find an instantiable class for&#xD;&#xA;INamedType during the first phase of linking."/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="IFormalParameter" abstract="true" interface="true">
    <eOperations name="isMandatory" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="isMandatory() == true means that a caller must provide an actual parmeter for this formal parameter."/>
      </eAnnotations>
    </eOperations>
    <eOperations name="isMulti" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="isMulti() == true means that a caller may provide more than one actual parameter for this formal parameter.&#xD;&#xA;isMulti() == false means that a caller may provide at most 1 actual parameter. Whether a caller must provide&#xD;&#xA;at least one actual parameter in either case depends on isMandatory()."/>
      </eAnnotations>
    </eOperations>
    <eOperations name="getType" eType="#//IType"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="IActualParameter" abstract="true" interface="true">
    <eOperations name="getValue" eType="#//IExpression">
      <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
        <details key="documentation" value="The value of an actual parameter is an expression. Languages that implement this interface&#xD;&#xA;may place additional restrictions on the allowed expression. For example, a language that&#xD;&#xA;supports reference semantics may require that the expression be a variable when the&#xD;&#xA;corresponding formal parameter requires it. This, of course, would also require that the&#xD;&#xA;language extend {@link IFormalParameter} to specify these semantics."/>
      </eAnnotations>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="INamedActualParameter" abstract="true"
      interface="true" eSuperTypes="#//IActualParameter">
    <eOperations name="getName" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ISubprogram" abstract="true" interface="true"
      eSuperTypes="#//ICallable">
    <eOperations name="getParameters" eType="#//IFormalParameterList"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="IProcedure" abstract="true" interface="true"
      eSuperTypes="#//ISubprogram"/>
  <eClassifiers xsi:type="ecore:EClass" name="IFunction" abstract="true" interface="true"
      eSuperTypes="#//ISubprogram">
    <eOperations name="getReturnType" eType="#//IType"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="IFormalParameterList" instanceTypeName="Iterable&lt;? extends com.avaloq.tools.ddk.typesystem.typemodel.IFormalParameter>"
      abstract="true" interface="true"/>
  <eClassifiers xsi:type="ecore:EClass" name="NamedFormalParameter" eSuperTypes="#//NamedElement #//INamedFormalParameter">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="The reason for this class is technical and,  in general, one should use the interface IFormalParameter instead&#xD;&#xA;of this class. This class is defined in the model because Xtext needs to find an instantiable class for&#xD;&#xA;IFormalParameter during the first phase of linking."/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="INamedFormalParameter" abstract="true"
      interface="true" eSuperTypes="#//INamedElement #//IFormalParameter"/>
  <eClassifiers xsi:type="ecore:EClass" name="ICallable" abstract="true" interface="true"
      eSuperTypes="#//INamedElement"/>
  <eClassifiers xsi:type="ecore:EClass" name="Callable" eSuperTypes="#//NamedElement #//ICallable">
    <eAnnotations source="http://www.eclipse.org/emf/2002/GenModel">
      <details key="documentation" value="The reason for this class is technical and,  in general, one should use the interface ICallable instead&#xD;&#xA;of this class. This class is defined in the model because Xtext needs to find an instantiable class for&#xD;&#xA;ICallable during the first phase of linking."/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ICustomExportedName">
    <eOperations name="getCustomExportedName" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
  </eClassifiers>
</ecore:EPackage>
