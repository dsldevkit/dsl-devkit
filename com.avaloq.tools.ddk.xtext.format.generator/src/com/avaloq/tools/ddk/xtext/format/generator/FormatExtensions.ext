/*******************************************************************************
 * Copyright (c) 2016 Avaloq Group AG and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Avaloq Group AG - initial API and implementation
 *******************************************************************************/
import com::avaloq::tools::ddk::xtext::format::format;
import org::eclipse::emf::ecore; // for EObject
import org::eclipse::xtext; // for Grammar

extension org::eclipse::xtext::generator::Naming; // for toSimpleName

extension com::avaloq::tools::ddk::xtext::generator::util::GenModelUtil2; // for instanceClassName
extension com::avaloq::tools::ddk::xtext::generator::util::GeneratorUtil;

String formatterClassName(Grammar this):
	javaFormatterClassName(this, "");
String formatterClassName(Grammar this, String prefix):
	javaFormatterClassName(this, prefix);

private String javaFormatterClassName(Grammar this, String prefix):
	JAVA com.avaloq.tools.ddk.xtext.format.generator.FormatFragment.getFormatterName(org.eclipse.xtext.Grammar, java.lang.String);

String configClassName():
	"com.avaloq.tools.ddk.xtext.formatting.ExtendedFormattingConfig";

List[GrammarRule] getParserRules(FormatConfiguration this) :
	JAVA com.avaloq.tools.ddk.xtext.format.generator.FormatExtensions.getParserRules(com.avaloq.tools.ddk.xtext.format.format.FormatConfiguration);
//	this.rules.typeSelect(GrammarRule).reject(e|e.targetRule == null || e.targetRule.eIsProxy()).select(e|ParserRule.isInstance(e.targetRule));

List[GrammarRule] getTerminalRules(FormatConfiguration this) :
//	this.rules.typeSelect(GrammarRule).reject(e|e.targetRule == null || e.targetRule.eIsProxy()).select(e|TerminalRule.isInstance(e.targetRule));
	JAVA com.avaloq.tools.ddk.xtext.format.generator.FormatExtensions.getTerminalRules(com.avaloq.tools.ddk.xtext.format.format.FormatConfiguration);

List[GrammarRule] getEnumRules(FormatConfiguration this) :
//	this.rules.typeSelect(GrammarRule).reject(e|e.targetRule == null || e.targetRule.eIsProxy()).select(e|EnumRule.isInstance(e.targetRule));
	JAVA com.avaloq.tools.ddk.xtext.format.generator.FormatExtensions.getEnumRules(com.avaloq.tools.ddk.xtext.format.format.FormatConfiguration);

WildcardRule getWildcardRule(FormatConfiguration this) :
	JAVA com.avaloq.tools.ddk.xtext.format.generator.FormatExtensions.getWildcardRule(com.avaloq.tools.ddk.xtext.format.format.FormatConfiguration);

List[Constant] getAllConstants(FormatConfiguration this) :
	JAVA com.avaloq.tools.ddk.xtext.format.generator.FormatExtensions.getAllConstants(com.avaloq.tools.ddk.xtext.format.format.FormatConfiguration);

Boolean containedByParserRule(GrammarElementReference this):
	this.eContainer(GrammarRule) != null && ParserRule.isInstance(((GrammarRule)this.eContainer(GrammarRule)).targetRule);

String locatorString(EObject this) :
    location().split('/').last();

String getValueOrConstant(IntValue this) :
	this.literal == null ? this.reference.name : this.literal.toString();

String getValueOrConstant(StringValue this) :
	this.literal == null ? this.reference.name : '"' + this.literal + '"';

Boolean isTwoArgumentMatcherType(MatcherType this) :
	this == MatcherType::BETWEEN || this == MatcherType::RANGE;
