«REM»
/*******************************************************************************
 * Copyright (c) 2016 Avaloq Group AG and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Avaloq Group AG - initial API and implementation
 *******************************************************************************/
«ENDREM»

«IMPORT org::eclipse::xtext»
«IMPORT org::eclipse::emf::ecore»

«IMPORT com::avaloq::tools::ddk::xtext::valid::valid»

«EXTENSION org::eclipse::xtext::generator::Naming»
«EXTENSION org::eclipse::xtext::GrammarUtil»

«EXTENSION com::avaloq::tools::ddk::xtext::valid::generator::ValidExtensions»
«EXTENSION com::avaloq::tools::ddk::xtext::generator::util::GeneratorUtil»

«DEFINE generate(ValidModel validModel) FOR Grammar»
    «EXPAND generateTestValidator(validModel) FOR this»
    «EXPAND generateUnitAbstractTestStubs(validModel) FOR this»
    «EXPAND generateUnitTestStubs(validModel) FOR this»
«ENDDEFINE»

«DEFINE generateTestValidator(ValidModel validModel) FOR Grammar»
«FILE (getValidationPackage(this)+".Abstract"+this.name.toSimpleName()+"ValidTest").asPath()+".java" SRC_GEN_TEST-»
/*
 * Generated by com.avaloq.tools.ddk.xtext.valid.generator.ValidValidatorFragment
 */
package «getJavaValidatorName("").toJavaPackage()»;

import com.avaloq.tools.ddk.xtext.test.validation.AbstractValidValidationTest;
import com.avaloq.tools.dsl.«this.name.toSimpleName().toLowerCase()».ui.test.internal.«this.name.toSimpleName()»TestUtil;


/**
 * The Class Abstract«this.name.toSimpleName()»ValidTest provides validate methods for «getJavaValidatorName("").toSimpleName()» testers.
 */
public class Abstract«this.name.toSimpleName()»ValidTest extends AbstractValidValidationTest {

  @Override
  protected Class<«getJavaValidatorName("").toSimpleName()»> getValidator() {
    return «getJavaValidatorName("").toSimpleName()».class;
  }

  @Override
  protected «this.name.toSimpleName()»TestUtil getXtextTestUtil() {
    return «this.name.toSimpleName()»TestUtil.getInstance();
  }

}
«ENDFILE -»


«FILE (getValidationPackage(this)+"."+this.name.toSimpleName()+"ValidTest").asPath()+".java" SRC_TEST-»
/*
 * Generated by com.avaloq.tools.ddk.xtext.valid.generator.ValidValidatorFragment
 */
package «getJavaValidatorName("").toJavaPackage()»;

import com.avaloq.tools.ddk.acf.«this.name.toSimpleName().toLowerCase()».«this.name.toSimpleName().toLowerCase()».«this.name.toSimpleName()»Source;


/**
 * The Class «this.name.toSimpleName()»ValidTest can be used to program methods available for «getJavaValidatorName("").toSimpleName()» testers.
 */
public class «this.name.toSimpleName()»ValidTest extends Abstract«this.name.toSimpleName()»ValidTest {

  /**
   * Convenience method which assumes the main model to be of type «this.name.toSimpleName()»Source.
   * {@inheritDoc}
   */
  @Override
  protected «this.name.toSimpleName()»Source getSemanticModel() {
    return («this.name.toSimpleName()»Source) super.getSemanticModel();
  }
}
«ENDFILE -»

«ENDDEFINE»


«DEFINE generateUnitAbstractTestStubs(ValidModel validModel) FOR Grammar»
«FOREACH validModel.categories AS category -»

«FILE (getValidationPackage(this)+".Abstract"+category.name.toFirstUpper()+"ValidationTest").asPath()+".java" SRC_GEN_TEST-»
/*
 * Generated by com.avaloq.tools.ddk.xtext.valid.generator.ValidValidatorFragment
 */
package «getJavaValidatorName("").toJavaPackage()»;

/**
 * The abstract class Abstract«category.name.toFirstUpper()»ValidationTest.
 */
public abstract class Abstract«category.name.toFirstUpper()»ValidationTest extends «this.getName().toSimpleName()»ValidTest {
«EXPAND generateAbstractRuleTest FOREACH category.rules.typeSelect(NativeRule) -»
}
«ENDFILE»

«ENDFOREACH-»
«ENDDEFINE»

«DEFINE generateRuleTest FOR Rule»
    // Unknown rule type for «this.name»
«ENDDEFINE»

«DEFINE generateAbstractRuleTest FOR NativeRule -»
«FOREACH this.contexts AS context»
    /**
     * Test method for native «context.name()».<BR>
     * Label: «context.rule().label»<BR>
     * Description: «context.rule().description»<BR>
     * Non-localized error message: "«context.rule().message»"<BR>
     * Source:<BR>
     *  rule: «context.rule().location()»<BR>
     *  context: «context.location()»<BR>
     *  contextType: «context.contextType.name.toSimpleName()»<BR>
     */
    public abstract void test«context.nativeContextTestName()»();
«ENDFOREACH-»
«ENDDEFINE»

«DEFINE generateUnitTestStubs(ValidModel validModel) FOR Grammar»
«FOREACH validModel.categories AS category -»

«FILE (getValidationPackage(this)+ "." + category.name.toFirstUpper()+"ValidationTest").asPath()+".java" SRC_TEST-»
package «getJavaValidatorName("").toJavaPackage()»;

import static org.junit.Assert.fail;

import org.junit.Test;

/**
 * Tests validation of «this.name.toSimpleName()» sources for category <em>«category.name.toFirstUpper()»</em>.
 */
public class «category.name.toFirstUpper()»ValidationTest extends Abstract«category.name.toFirstUpper()»ValidationTest {

  //TODO add additionally required sources by overriding getRequiredSourceFileNames()

«EXPAND generateRuleTest FOREACH category.rules.typeSelect(NativeRule) -»
}
«ENDFILE»

«ENDFOREACH-»
«ENDDEFINE»

«DEFINE generateRuleTest FOR NativeRule -»
«FOREACH this.contexts AS context»
  /**
   * Test method for native «context.name()».<BR>
   * Label: «context.rule().label»<BR>
   * Description: «context.rule().description»<BR>
   * Non-localized error message: "«context.rule().message»"<BR>
   * Source:<BR>
   *  rule: «context.rule().location()»<BR>
   *  context: «context.location()»<BR>
   *  contextType: «context.contextType.name.toSimpleName()»<BR>
   */
  @Override
  @Test
  public void test«context.nativeContextTestName()»() {
    // TODO: create test for «context.nativeContextTestName()»
    fail("Test «context.nativeContextTestName()» not yet implemented");
  }
«ENDFOREACH-»
«ENDDEFINE»
