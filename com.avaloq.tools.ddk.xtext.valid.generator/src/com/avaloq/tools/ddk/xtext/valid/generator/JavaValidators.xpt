«REM»
/*******************************************************************************
 * Copyright (c) 2016 Avaloq Group AG and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Avaloq Group AG - initial API and implementation
 *******************************************************************************/
«ENDREM»

«IMPORT org::eclipse::xtext»
«IMPORT org::eclipse::emf::ecore»

«IMPORT com::avaloq::tools::ddk::xtext::valid::valid»

«EXTENSION org::eclipse::xtext::generator::Naming»
«EXTENSION org::eclipse::xtext::GrammarUtil»

«EXTENSION com::avaloq::tools::ddk::xtext::valid::generator::ValidExtensions»
«EXTENSION com::avaloq::tools::ddk::xtext::generator::util::GeneratorUtil»


«DEFINE generateJavaValidators(List[String] packageQNames, List[String] composedChecks, ValidModel validModel) FOR Grammar»

«FILE getJavaValidatorName("Abstract").asPath()+".java" SRC_GEN-»
package «getJavaValidatorName("Abstract").toJavaPackage()»;

import java.util.ArrayList;
import java.util.List;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import org.eclipse.emf.ecore.EPackage;
«IF !validModel.getAllNativeRules().contexts.isEmpty-»
import com.avaloq.tools.ddk.xtext.tracing.ITraceSet;
import com.avaloq.tools.ddk.xtext.tracing.ResourceValidationRuleSummaryEvent;
import com.avaloq.tools.ddk.xtext.tracing.ResourceValidationRuleSummaryEvent.Collector;
import org.eclipse.emf.ecore.EStructuralFeature;
«ENDIF-»
import com.avaloq.tools.ddk.xtext.validation.AbstractDeclarativeValidValidator;
«IF !validModel.getAllNativeRules().isEmpty-»
import com.avaloq.tools.ddk.xtext.validation.ICheckSequencer;
import com.avaloq.tools.ddk.xtext.validation.DefaultCheckSequencer;
import com.avaloq.tools.ddk.xtext.validation.ValidGuardException;
«IF !validModel.getAllNativeRules().contexts.select(c|c.markerType == null).isEmpty-»
import com.avaloq.tools.ddk.xtext.validation.SimpleValidMessage;
«ENDIF-»
«IF !validModel.getAllNativeRules().contexts.select(c|c.markerType != null).isEmpty-»
import com.avaloq.tools.ddk.xtext.validation.CompoundValidMessage;
import com.avaloq.tools.ddk.xtext.validation.ValidMessage;
«ENDIF-»
import org.eclipse.xtext.validation.Check;
import org.eclipse.xtext.validation.CheckType;
«IF !composedChecks.isEmpty-»
import org.eclipse.xtext.validation.ComposedChecks;
«ENDIF-»
«FOREACH validModel.getAllNativeRules().contexts.contextType.toSet().union(validModel.getAllNativeRules().contexts.select(c|c.markerType != null).markerType.toSet()) AS type-»
import «type.instanceClassName()»;
«ENDFOREACH-»
import «getJavaValidatorName("").toJavaPackage()».messages.Messages;
import org.eclipse.osgi.util.NLS;
import org.eclipse.emf.ecore.util.EcoreUtil;
«ENDIF -»

import org.eclipse.xtext.Constants;
import com.google.inject.Inject;
import com.google.inject.name.Named;

/**
 *  Abstract implementation of the native Valid checks for grammar «this.getName()».
 */
«IF !composedChecks.isEmpty-»
@ComposedChecks(validators= {«FOREACH composedChecks AS validator SEPARATOR ", "-»«validator».class«ENDFOREACH-»})
«ENDIF-»
@SuppressWarnings("all")
abstract public class «getJavaValidatorName("Abstract").toSimpleName()» extends AbstractDeclarativeValidValidator {

«IF !validModel.getAllNativeRules().isEmpty -»
«FOREACH validModel.getAllNativeRules().contexts AS context ITERATOR i -»
    /** Quick Fix Code for rule «context.name()». */
    public static final String «context.validationCodeLiteral()» = "«getJavaValidatorName("").toSimpleName()».«context.validationCodeLiteral()»"; //$NON-NLS-1$
«ENDFOREACH -»
«ENDIF -»

«IF !validModel.getAllNativeRules().isEmpty-»
    /** Class-Wide Error Logger. */
    private static final Log LOGGER = LogFactory.getLog(«getJavaValidatorName("Abstract").toSimpleName()».class);
    private final boolean isTraceEnabled;

    @Inject
    «getJavaValidatorName("Abstract").toSimpleName()»(final ITraceSet traceSet) {
      isTraceEnabled = traceSet.isEnabled(ResourceValidationRuleSummaryEvent.class);
    }
«ENDIF-»

    /** Language Name, used as preference store key. */
    @Inject
    @Named(Constants.LANGUAGE_NAME)
    private String languageName;

    /** @returns the name of the preference store. */
    protected String getPreferenceStoreName() {
        return languageName;
    }

    /** {@inheritDoc} */
    @Override
    protected List<EPackage> getEPackages() {
        List<EPackage> result = new ArrayList<EPackage>();
        «FOREACH packageQNames AS e-»
        result.add(«e».eINSTANCE);
        «ENDFOREACH-»
        return result;
    }

«FOREACH {CheckKind::FAST, CheckKind::NORMAL, CheckKind::EXPENSIVE} AS checkKind -»
«FOREACH validModel.getAllNativeRules(checkKind).contexts.contextType.toSet().sortBy(c|c.name) AS contextType -»
    /**
     * Performs all «checkKind.toString().toFirstUpper()» checks on objects of type «contextType.name».
     *
     * @param context the context object
     */
    @Check(CheckType.«checkKind.toString().toUpperCase()»)
    final public void check«checkKind.toString().toFirstUpper()»«contextType.name»(«contextType.name» context) {
        ICheckSequencer sequencer = pre«checkKind.toString().toFirstUpper()»Check«contextType.name»(context);
        assert sequencer != null : "Sequencer must be initialized";
        boolean isDebugEnabled = LOGGER.isDebugEnabled();
«FOREACH validModel.getAllNativeRules(checkKind).contexts.select(c| c.contextType == contextType).sortBy(c|c.name()) AS context -»
        if (isDebugEnabled) {
            LOGGER.debug(NLS.bind("Performing check:{0} on {1}", "«context.name()»", context));
        }
        check«context.name()»(context, sequencer);
«ENDFOREACH -»
        post«checkKind.toString().toFirstUpper()»Check«contextType.name»(context, sequencer);
    }

    /**
     * Returns the default check sequencer for the given Check (Kind/Context) family.
     *
     * @param context the context object
     * @return the default check sequencer
     */
    public ICheckSequencer pre«checkKind.toString().toFirstUpper()»Check«contextType.name»(«contextType.name» context) {
        return DefaultCheckSequencer.getInstance();
    }

    /**
     * Performs post-processing operations on the check sequencer for a given context object.
     *
     * @param context the context object
     * @return a check sequencer (possibly enriched with user data)
     */
    public void post«checkKind.toString().toFirstUpper()»Check«contextType.name»(«contextType.name» context, ICheckSequencer sequencer) {
        // do nothing by default
    }


«FOREACH validModel.getAllNativeRules(checkKind).contexts.select(c| c.contextType == contextType).sortBy(c|c.name()) AS context -»
    /**
     * Performs the «context.name()» check. The actual implementation of the check
     * is delegated to {@link «getJavaValidatorName("Abstract").toSimpleName()»#get«context.name()»Message()}.
     *
     * @param context the context object
     * @param sequencer the sequencer
     */
    public final void check«context.name()»(«context.contextType.name» context, ICheckSequencer sequencer) {
        if (sequencer.canContinue()) {
            Collector collector = null;
            if (isTraceEnabled) {
                collector = traceStart(«context.validationCodeLiteral()»);
            }
            try {
                String message = Messages.«context.rule().category().name»«context.rule().name»Message;
«IF context.markerType == null -»
                SimpleValidMessage returnedMessage = get«context.name()»Message(context, sequencer, message, «IF context.contextFeature == null»null«ELSE»«literalIdentifier(context.contextFeature)»«ENDIF»);
                if (returnedMessage != null) {
                    if (returnedMessage.getLength() > 0) {
                        accept«context.rule().severity.name.toLowerCase().toFirstUpper()»(returnedMessage.getMessage(), context, returnedMessage.getOffset(), returnedMessage.getLength(), «context.validationCodeLiteral()», returnedMessage.getData());
                    } else {
                        «context.rule().severity.name.toLowerCase()»(returnedMessage.getMessage(), «IF context.contextFeature == null»null«ELSE»«literalIdentifier(context.contextFeature)»«ENDIF», «context.validationCodeLiteral()», returnedMessage.getData());
                    }
                }
«ELSE»
                CompoundValidMessage<«context.markerType.name»> returnedMessage = get«context.name()»Message(context, sequencer, message, «IF context.markerFeature == null»null«ELSE»«literalIdentifier(context.markerFeature)»«ENDIF»);
                if (returnedMessage != null) {
                    for (ValidMessage<«context.markerType.name»> validMessage: returnedMessage.getMessages()) {
                      «IF context.markerFeature == null»
                            if (returnedMessage.getLength() > 0) {
                                accept«context.rule().severity.name.toLowerCase().toFirstUpper()»(validMessage.getMessage(), validMessage.getContext(), validMessage.getOffset(), validMessage.getLength(), «context.validationCodeLiteral()», validMessage.getData());
                            } else {
                                «context.rule().severity.name.toLowerCase()»(validMessage.getMessage(), validMessage.getContext(), null, «context.validationCodeLiteral()», validMessage.getData());
                            }
                        «ELSE»
                            «context.rule().severity.name.toLowerCase()»(validMessage.getMessage(), validMessage.getContext(), «literalIdentifier(context.markerFeature)», «context.validationCodeLiteral()», validMessage.getData());
                        «ENDIF»
                    }
                }
«ENDIF -»
            } catch (ValidGuardException g) {
              // Nothing to do, this is the way the guard communicates with its customers.
            } catch (Exception e) {
                LOGGER.error(NLS.bind("Error occured when performing check «context.name()» for object of type «context.contextType.name»: {0}", EcoreUtil.getURI(context)), e);
            } finally {
                if (collector != null) {
                    traceEnd(collector, «context.validationCodeLiteral()»);
                }
            }
        }
    }

    /**
     * Performs the «context.name()» check on a context object of type
     * «context.contextType.name» and returns an error message, if any.
     * <BR>
     * <B>Label</B>: «context.rule().label»
     * <BR>
     * <B>Description</B>:«context.rule().description»
     * <BR>
     * <B>Non-localized error message</B>: "«context.rule().message»"
     * <BR>
     * <B>Source</B>:
     * <B>    rule: «context.rule().location()»
     * <B>    context: «context.location()»
     * <BR>
     * @param context the context object
     * @param sequencer the sequencer
     * @param message the original message
     * @param feature the feature (in the context)
     * <BR>
«IF context.markerType == null -»
     * @return a simple (localized) error message if the test failed, <B>NO_ERROR</B> otherwise.
«ELSE -»
     * @return a compound (localized) error message (a list of error messages) if the test failed, <B>NO_ERROR</B> otherwise.
«ENDIF -»
     */
«IF context.markerType == null -»
    abstract public SimpleValidMessage get«context.name()»Message(«context.contextType.name» context, ICheckSequencer sequencer, String message, EStructuralFeature feature);
«ELSE»
    abstract public CompoundValidMessage<«context.markerType.name»> get«context.name()»Message(«context.contextType.name» context, ICheckSequencer sequencer, String message, EStructuralFeature feature);
«ENDIF»

«ENDFOREACH-»
«ENDFOREACH-»
«ENDFOREACH-»
}
«ENDFILE»

«FILE getJavaValidatorName("").asPath()+".java" SRC-»
package «getJavaValidatorName("").toJavaPackage()»;

import com.avaloq.tools.ddk.xtext.tracing.ITraceSet;
«IF !validModel.getAllNativeRules().contexts.isEmpty-»
import org.eclipse.emf.ecore.EStructuralFeature;
«ENDIF-»
«FOREACH validModel.getAllNativeRules().contexts.contextType.toSet().union(validModel.getAllNativeRules().contexts.select(c|c.markerType != null).markerType.toSet()) AS type-»
import «type.instanceClassName()»;
«ENDFOREACH-»
import «getJavaValidatorName("").toJavaPackage()».messages.Messages;
import com.avaloq.tools.ddk.xtext.validation.ICheckSequencer;
«IF !validModel.getAllNativeRules().contexts.select(c|c.markerType == null).isEmpty-»
import com.avaloq.tools.ddk.xtext.validation.SimpleValidMessage;
«ENDIF-»
«IF !validModel.getAllNativeRules().contexts.select(c|c.markerType != null).isEmpty-»
import com.avaloq.tools.ddk.xtext.validation.CompoundValidMessage;
import com.avaloq.tools.ddk.xtext.validation.ValidMessage;
«ENDIF-»

/**
 *  Concrete implementation of the native Valid checks for grammar «this.getName()».
 */
public class «getJavaValidatorName("").toSimpleName()» extends «getJavaValidatorName("Abstract").toSimpleName()» {

  @Inject
  «getJavaValidatorName("").toSimpleName()»(final ITraceSet traceSet) {
    super(traceSet);
  }

  «FOREACH validModel.getAllNativeRules().contexts AS context -»
    /** {@inheritDoc} */
    @Override
«IF context.markerType == null -»
    public SimpleValidMessage get«context.name()»Message(«context.contextType.name» context, ICheckSequencer sequencer, String message, EStructuralFeature feature) {
      if (false) { //TODO implement the check    }
        return new SimpleValidMessage(Messages.bind(message, null)); //TODO bind the arguments
      }
      return NO_ERROR;
   }
«ELSE -»
    public CompoundValidMessage<«context.markerType.name»> get«context.name()»Message(«context.contextType.name» context, ICheckSequencer sequencer, String message, EStructuralFeature feature) {
        CompoundValidMessage<«context.markerType.name»> messages = new CompoundValidMessage<«context.markerType.name»>();
      if (false) { //TODO implement the check
        messages.add(Messages.bind(message, ...), ...); //TODO bind the arguments and the marker context
      }
      return messages;
    }
«ENDIF -»

«ENDFOREACH-»

}
«ENDFILE»

«ENDDEFINE»
