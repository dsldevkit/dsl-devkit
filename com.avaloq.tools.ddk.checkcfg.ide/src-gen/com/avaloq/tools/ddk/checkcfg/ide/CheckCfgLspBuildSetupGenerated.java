/*
 * generated by Xtext
 */
package com.avaloq.tools.ddk.checkcfg.ide;


import org.eclipse.xtext.util.Modules2;

import com.google.common.collect.ImmutableList;
import com.google.inject.Guice;
import com.google.inject.Injector;
import com.google.inject.Module;
import com.google.inject.util.Modules;


/**
 * Generated by com.avaloq.tools.ddk.xtext.generator.builder.LspBuilderIntegrationFragment2.
 */
public class CheckCfgLspBuildSetupGenerated extends CheckCfgIdeSetup {

  private final Module overrideModule;
  private final Module[] additionalModules;
  private final Object lock;

  public CheckCfgLspBuildSetupGenerated(final Object lock, final Module overrideModule, Module... additionalModules) {
    this.lock = lock;
    this.overrideModule = overrideModule;
    this.additionalModules = additionalModules;
  }

  public CheckCfgLspBuildSetupGenerated(final Module overrideModule, Module... additionalModules) {
    this.lock = null;
    this.overrideModule = overrideModule;
    this.additionalModules = additionalModules;
  }

  @Override
  public Injector createInjectorAndDoEMFRegistration() {
    registerEPackages();
    Injector injector = createInjector();
    if (lock != null) {
      synchronized (lock)  {
        register(injector);
      }
    } else {
      register(injector);
    }
    return injector;
  }

  @Override
  public Injector createInjector() {
    return Guice.createInjector(getModules());
  }

  protected void registerEPackages() {
  }

  protected Iterable<Module> getModules() {
    return ImmutableList.<Module> builder().add(Modules.override(Modules2.mixin(new com.avaloq.tools.ddk.checkcfg.CheckCfgRuntimeModule(), new CheckCfgIdeModule())).with(overrideModule)).add(additionalModules).build();
  }

}
