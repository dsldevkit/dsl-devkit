/*
 * generated by Xtext
 */
grammar InternalExport;

options {
	superClass=AbstractInternalContentAssistParser;
	backtrack=true;
	
}

@lexer::header {
package com.avaloq.tools.ddk.xtext.export.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package com.avaloq.tools.ddk.xtext.export.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import com.avaloq.tools.ddk.xtext.export.services.ExportGrammarAccess;

}

@parser::members {
 
 	private ExportGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(ExportGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleExportModel
entryRuleExportModel 
:
{ before(grammarAccess.getExportModelRule()); }
	 ruleExportModel
{ after(grammarAccess.getExportModelRule()); } 
	 EOF 
;

// Rule ExportModel
ruleExportModel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExportModelAccess().getGroup()); }
(rule__ExportModel__Group__0)
{ after(grammarAccess.getExportModelAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleImport
entryRuleImport 
:
{ before(grammarAccess.getImportRule()); }
	 ruleImport
{ after(grammarAccess.getImportRule()); } 
	 EOF 
;

// Rule Import
ruleImport
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getImportAccess().getGroup()); }
(rule__Import__Group__0)
{ after(grammarAccess.getImportAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExtension
entryRuleExtension 
:
{ before(grammarAccess.getExtensionRule()); }
	 ruleExtension
{ after(grammarAccess.getExtensionRule()); } 
	 EOF 
;

// Rule Extension
ruleExtension
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExtensionAccess().getGroup()); }
(rule__Extension__Group__0)
{ after(grammarAccess.getExtensionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}





// Entry rule entryRuleInterface
entryRuleInterface 
:
{ before(grammarAccess.getInterfaceRule()); }
	 ruleInterface
{ after(grammarAccess.getInterfaceRule()); } 
	 EOF 
;

// Rule Interface
ruleInterface
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getInterfaceAccess().getGroup()); }
(rule__Interface__Group__0)
{ after(grammarAccess.getInterfaceAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInterfaceItem
entryRuleInterfaceItem 
:
{ before(grammarAccess.getInterfaceItemRule()); }
	 ruleInterfaceItem
{ after(grammarAccess.getInterfaceItemRule()); } 
	 EOF 
;

// Rule InterfaceItem
ruleInterfaceItem
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getInterfaceItemAccess().getAlternatives()); }
(rule__InterfaceItem__Alternatives)
{ after(grammarAccess.getInterfaceItemAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInterfaceField
entryRuleInterfaceField 
:
{ before(grammarAccess.getInterfaceFieldRule()); }
	 ruleInterfaceField
{ after(grammarAccess.getInterfaceFieldRule()); } 
	 EOF 
;

// Rule InterfaceField
ruleInterfaceField
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getInterfaceFieldAccess().getGroup()); }
(rule__InterfaceField__Group__0)
{ after(grammarAccess.getInterfaceFieldAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInterfaceNavigation
entryRuleInterfaceNavigation 
:
{ before(grammarAccess.getInterfaceNavigationRule()); }
	 ruleInterfaceNavigation
{ after(grammarAccess.getInterfaceNavigationRule()); } 
	 EOF 
;

// Rule InterfaceNavigation
ruleInterfaceNavigation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getInterfaceNavigationAccess().getGroup()); }
(rule__InterfaceNavigation__Group__0)
{ after(grammarAccess.getInterfaceNavigationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInterfaceExpression
entryRuleInterfaceExpression 
:
{ before(grammarAccess.getInterfaceExpressionRule()); }
	 ruleInterfaceExpression
{ after(grammarAccess.getInterfaceExpressionRule()); } 
	 EOF 
;

// Rule InterfaceExpression
ruleInterfaceExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getInterfaceExpressionAccess().getGroup()); }
(rule__InterfaceExpression__Group__0)
{ after(grammarAccess.getInterfaceExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExport
entryRuleExport 
:
{ before(grammarAccess.getExportRule()); }
	 ruleExport
{ after(grammarAccess.getExportRule()); } 
	 EOF 
;

// Rule Export
ruleExport
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExportAccess().getGroup()); }
(rule__Export__Group__0)
{ after(grammarAccess.getExportAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUserData
entryRuleUserData 
:
{ before(grammarAccess.getUserDataRule()); }
	 ruleUserData
{ after(grammarAccess.getUserDataRule()); } 
	 EOF 
;

// Rule UserData
ruleUserData
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getUserDataAccess().getGroup()); }
(rule__UserData__Group__0)
{ after(grammarAccess.getUserDataAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAttribute
entryRuleAttribute 
:
{ before(grammarAccess.getAttributeRule()); }
	 ruleAttribute
{ after(grammarAccess.getAttributeRule()); } 
	 EOF 
;

// Rule Attribute
ruleAttribute
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAttributeAccess().getAttributeAssignment()); }
(rule__Attribute__AttributeAssignment)
{ after(grammarAccess.getAttributeAccess().getAttributeAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleQualifiedID
entryRuleQualifiedID 
:
{ before(grammarAccess.getQualifiedIDRule()); }
	 ruleQualifiedID
{ after(grammarAccess.getQualifiedIDRule()); } 
	 EOF 
;

// Rule QualifiedID
ruleQualifiedID
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getQualifiedIDAccess().getGroup()); }
(rule__QualifiedID__Group__0)
{ after(grammarAccess.getQualifiedIDAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExpression
entryRuleExpression 
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExpressionAccess().getAlternatives()); }
(rule__Expression__Alternatives)
{ after(grammarAccess.getExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}





// Entry rule entryRuleLetExpression
entryRuleLetExpression 
:
{ before(grammarAccess.getLetExpressionRule()); }
	 ruleLetExpression
{ after(grammarAccess.getLetExpressionRule()); } 
	 EOF 
;

// Rule LetExpression
ruleLetExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLetExpressionAccess().getGroup()); }
(rule__LetExpression__Group__0)
{ after(grammarAccess.getLetExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCastedExpression
entryRuleCastedExpression 
:
{ before(grammarAccess.getCastedExpressionRule()); }
	 ruleCastedExpression
{ after(grammarAccess.getCastedExpressionRule()); } 
	 EOF 
;

// Rule CastedExpression
ruleCastedExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCastedExpressionAccess().getGroup()); }
(rule__CastedExpression__Group__0)
{ after(grammarAccess.getCastedExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleChainExpression
entryRuleChainExpression 
:
{ before(grammarAccess.getChainExpressionRule()); }
	 ruleChainExpression
{ after(grammarAccess.getChainExpressionRule()); } 
	 EOF 
;

// Rule ChainExpression
ruleChainExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getChainExpressionAccess().getGroup()); }
(rule__ChainExpression__Group__0)
{ after(grammarAccess.getChainExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleChainedExpression
entryRuleChainedExpression 
:
{ before(grammarAccess.getChainedExpressionRule()); }
	 ruleChainedExpression
{ after(grammarAccess.getChainedExpressionRule()); } 
	 EOF 
;

// Rule ChainedExpression
ruleChainedExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getChainedExpressionAccess().getAlternatives()); }
(rule__ChainedExpression__Alternatives)
{ after(grammarAccess.getChainedExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIfExpressionTri
entryRuleIfExpressionTri 
:
{ before(grammarAccess.getIfExpressionTriRule()); }
	 ruleIfExpressionTri
{ after(grammarAccess.getIfExpressionTriRule()); } 
	 EOF 
;

// Rule IfExpressionTri
ruleIfExpressionTri
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIfExpressionTriAccess().getGroup()); }
(rule__IfExpressionTri__Group__0)
{ after(grammarAccess.getIfExpressionTriAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIfExpressionKw
entryRuleIfExpressionKw 
:
{ before(grammarAccess.getIfExpressionKwRule()); }
	 ruleIfExpressionKw
{ after(grammarAccess.getIfExpressionKwRule()); } 
	 EOF 
;

// Rule IfExpressionKw
ruleIfExpressionKw
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIfExpressionKwAccess().getGroup()); }
(rule__IfExpressionKw__Group__0)
{ after(grammarAccess.getIfExpressionKwAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSwitchExpression
entryRuleSwitchExpression 
:
{ before(grammarAccess.getSwitchExpressionRule()); }
	 ruleSwitchExpression
{ after(grammarAccess.getSwitchExpressionRule()); } 
	 EOF 
;

// Rule SwitchExpression
ruleSwitchExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSwitchExpressionAccess().getGroup()); }
(rule__SwitchExpression__Group__0)
{ after(grammarAccess.getSwitchExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCase
entryRuleCase 
:
{ before(grammarAccess.getCaseRule()); }
	 ruleCase
{ after(grammarAccess.getCaseRule()); } 
	 EOF 
;

// Rule Case
ruleCase
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCaseAccess().getGroup()); }
(rule__Case__Group__0)
{ after(grammarAccess.getCaseAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOrExpression
entryRuleOrExpression 
:
{ before(grammarAccess.getOrExpressionRule()); }
	 ruleOrExpression
{ after(grammarAccess.getOrExpressionRule()); } 
	 EOF 
;

// Rule OrExpression
ruleOrExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOrExpressionAccess().getGroup()); }
(rule__OrExpression__Group__0)
{ after(grammarAccess.getOrExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAndExpression
entryRuleAndExpression 
:
{ before(grammarAccess.getAndExpressionRule()); }
	 ruleAndExpression
{ after(grammarAccess.getAndExpressionRule()); } 
	 EOF 
;

// Rule AndExpression
ruleAndExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAndExpressionAccess().getGroup()); }
(rule__AndExpression__Group__0)
{ after(grammarAccess.getAndExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleImpliesExpression
entryRuleImpliesExpression 
:
{ before(grammarAccess.getImpliesExpressionRule()); }
	 ruleImpliesExpression
{ after(grammarAccess.getImpliesExpressionRule()); } 
	 EOF 
;

// Rule ImpliesExpression
ruleImpliesExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getImpliesExpressionAccess().getGroup()); }
(rule__ImpliesExpression__Group__0)
{ after(grammarAccess.getImpliesExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRelationalExpression
entryRuleRelationalExpression 
:
{ before(grammarAccess.getRelationalExpressionRule()); }
	 ruleRelationalExpression
{ after(grammarAccess.getRelationalExpressionRule()); } 
	 EOF 
;

// Rule RelationalExpression
ruleRelationalExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRelationalExpressionAccess().getGroup()); }
(rule__RelationalExpression__Group__0)
{ after(grammarAccess.getRelationalExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAdditiveExpression
entryRuleAdditiveExpression 
:
{ before(grammarAccess.getAdditiveExpressionRule()); }
	 ruleAdditiveExpression
{ after(grammarAccess.getAdditiveExpressionRule()); } 
	 EOF 
;

// Rule AdditiveExpression
ruleAdditiveExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getGroup()); }
(rule__AdditiveExpression__Group__0)
{ after(grammarAccess.getAdditiveExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMultiplicativeExpression
entryRuleMultiplicativeExpression 
:
{ before(grammarAccess.getMultiplicativeExpressionRule()); }
	 ruleMultiplicativeExpression
{ after(grammarAccess.getMultiplicativeExpressionRule()); } 
	 EOF 
;

// Rule MultiplicativeExpression
ruleMultiplicativeExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getGroup()); }
(rule__MultiplicativeExpression__Group__0)
{ after(grammarAccess.getMultiplicativeExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUnaryOrInfixExpression
entryRuleUnaryOrInfixExpression 
:
{ before(grammarAccess.getUnaryOrInfixExpressionRule()); }
	 ruleUnaryOrInfixExpression
{ after(grammarAccess.getUnaryOrInfixExpressionRule()); } 
	 EOF 
;

// Rule UnaryOrInfixExpression
ruleUnaryOrInfixExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getUnaryOrInfixExpressionAccess().getAlternatives()); }
(rule__UnaryOrInfixExpression__Alternatives)
{ after(grammarAccess.getUnaryOrInfixExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUnaryExpression
entryRuleUnaryExpression 
:
{ before(grammarAccess.getUnaryExpressionRule()); }
	 ruleUnaryExpression
{ after(grammarAccess.getUnaryExpressionRule()); } 
	 EOF 
;

// Rule UnaryExpression
ruleUnaryExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getUnaryExpressionAccess().getGroup()); }
(rule__UnaryExpression__Group__0)
{ after(grammarAccess.getUnaryExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInfixExpression
entryRuleInfixExpression 
:
{ before(grammarAccess.getInfixExpressionRule()); }
	 ruleInfixExpression
{ after(grammarAccess.getInfixExpressionRule()); } 
	 EOF 
;

// Rule InfixExpression
ruleInfixExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getInfixExpressionAccess().getGroup()); }
(rule__InfixExpression__Group__0)
{ after(grammarAccess.getInfixExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePrimaryExpression
entryRulePrimaryExpression 
:
{ before(grammarAccess.getPrimaryExpressionRule()); }
	 rulePrimaryExpression
{ after(grammarAccess.getPrimaryExpressionRule()); } 
	 EOF 
;

// Rule PrimaryExpression
rulePrimaryExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getAlternatives()); }
(rule__PrimaryExpression__Alternatives)
{ after(grammarAccess.getPrimaryExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLiteral
entryRuleLiteral 
:
{ before(grammarAccess.getLiteralRule()); }
	 ruleLiteral
{ after(grammarAccess.getLiteralRule()); } 
	 EOF 
;

// Rule Literal
ruleLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLiteralAccess().getAlternatives()); }
(rule__Literal__Alternatives)
{ after(grammarAccess.getLiteralAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBooleanLiteral
entryRuleBooleanLiteral 
:
{ before(grammarAccess.getBooleanLiteralRule()); }
	 ruleBooleanLiteral
{ after(grammarAccess.getBooleanLiteralRule()); } 
	 EOF 
;

// Rule BooleanLiteral
ruleBooleanLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBooleanLiteralAccess().getValAssignment()); }
(rule__BooleanLiteral__ValAssignment)
{ after(grammarAccess.getBooleanLiteralAccess().getValAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIntegerLiteral
entryRuleIntegerLiteral 
:
{ before(grammarAccess.getIntegerLiteralRule()); }
	 ruleIntegerLiteral
{ after(grammarAccess.getIntegerLiteralRule()); } 
	 EOF 
;

// Rule IntegerLiteral
ruleIntegerLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIntegerLiteralAccess().getValAssignment()); }
(rule__IntegerLiteral__ValAssignment)
{ after(grammarAccess.getIntegerLiteralAccess().getValAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNullLiteral
entryRuleNullLiteral 
:
{ before(grammarAccess.getNullLiteralRule()); }
	 ruleNullLiteral
{ after(grammarAccess.getNullLiteralRule()); } 
	 EOF 
;

// Rule NullLiteral
ruleNullLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNullLiteralAccess().getValAssignment()); }
(rule__NullLiteral__ValAssignment)
{ after(grammarAccess.getNullLiteralAccess().getValAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRealLiteral
entryRuleRealLiteral 
:
{ before(grammarAccess.getRealLiteralRule()); }
	 ruleRealLiteral
{ after(grammarAccess.getRealLiteralRule()); } 
	 EOF 
;

// Rule RealLiteral
ruleRealLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRealLiteralAccess().getValAssignment()); }
(rule__RealLiteral__ValAssignment)
{ after(grammarAccess.getRealLiteralAccess().getValAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStringLiteral
entryRuleStringLiteral 
:
{ before(grammarAccess.getStringLiteralRule()); }
	 ruleStringLiteral
{ after(grammarAccess.getStringLiteralRule()); } 
	 EOF 
;

// Rule StringLiteral
ruleStringLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStringLiteralAccess().getValAssignment()); }
(rule__StringLiteral__ValAssignment)
{ after(grammarAccess.getStringLiteralAccess().getValAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleParanthesizedExpression
entryRuleParanthesizedExpression 
:
{ before(grammarAccess.getParanthesizedExpressionRule()); }
	 ruleParanthesizedExpression
{ after(grammarAccess.getParanthesizedExpressionRule()); } 
	 EOF 
;

// Rule ParanthesizedExpression
ruleParanthesizedExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getParanthesizedExpressionAccess().getGroup()); }
(rule__ParanthesizedExpression__Group__0)
{ after(grammarAccess.getParanthesizedExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleGlobalVarExpression
entryRuleGlobalVarExpression 
:
{ before(grammarAccess.getGlobalVarExpressionRule()); }
	 ruleGlobalVarExpression
{ after(grammarAccess.getGlobalVarExpressionRule()); } 
	 EOF 
;

// Rule GlobalVarExpression
ruleGlobalVarExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getGlobalVarExpressionAccess().getGroup()); }
(rule__GlobalVarExpression__Group__0)
{ after(grammarAccess.getGlobalVarExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFeatureCall
entryRuleFeatureCall 
:
{ before(grammarAccess.getFeatureCallRule()); }
	 ruleFeatureCall
{ after(grammarAccess.getFeatureCallRule()); } 
	 EOF 
;

// Rule FeatureCall
ruleFeatureCall
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFeatureCallAccess().getAlternatives()); }
(rule__FeatureCall__Alternatives)
{ after(grammarAccess.getFeatureCallAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOperationCall
entryRuleOperationCall 
:
{ before(grammarAccess.getOperationCallRule()); }
	 ruleOperationCall
{ after(grammarAccess.getOperationCallRule()); } 
	 EOF 
;

// Rule OperationCall
ruleOperationCall
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOperationCallAccess().getGroup()); }
(rule__OperationCall__Group__0)
{ after(grammarAccess.getOperationCallAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleListLiteral
entryRuleListLiteral 
:
{ before(grammarAccess.getListLiteralRule()); }
	 ruleListLiteral
{ after(grammarAccess.getListLiteralRule()); } 
	 EOF 
;

// Rule ListLiteral
ruleListLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getListLiteralAccess().getGroup()); }
(rule__ListLiteral__Group__0)
{ after(grammarAccess.getListLiteralAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleConstructorCallExpression
entryRuleConstructorCallExpression 
:
{ before(grammarAccess.getConstructorCallExpressionRule()); }
	 ruleConstructorCallExpression
{ after(grammarAccess.getConstructorCallExpressionRule()); } 
	 EOF 
;

// Rule ConstructorCallExpression
ruleConstructorCallExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConstructorCallExpressionAccess().getGroup()); }
(rule__ConstructorCallExpression__Group__0)
{ after(grammarAccess.getConstructorCallExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTypeSelectExpression
entryRuleTypeSelectExpression 
:
{ before(grammarAccess.getTypeSelectExpressionRule()); }
	 ruleTypeSelectExpression
{ after(grammarAccess.getTypeSelectExpressionRule()); } 
	 EOF 
;

// Rule TypeSelectExpression
ruleTypeSelectExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTypeSelectExpressionAccess().getGroup()); }
(rule__TypeSelectExpression__Group__0)
{ after(grammarAccess.getTypeSelectExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCollectionExpression
entryRuleCollectionExpression 
:
{ before(grammarAccess.getCollectionExpressionRule()); }
	 ruleCollectionExpression
{ after(grammarAccess.getCollectionExpressionRule()); } 
	 EOF 
;

// Rule CollectionExpression
ruleCollectionExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCollectionExpressionAccess().getGroup()); }
(rule__CollectionExpression__Group__0)
{ after(grammarAccess.getCollectionExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleType
entryRuleType 
:
{ before(grammarAccess.getTypeRule()); }
	 ruleType
{ after(grammarAccess.getTypeRule()); } 
	 EOF 
;

// Rule Type
ruleType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTypeAccess().getAlternatives()); }
(rule__Type__Alternatives)
{ after(grammarAccess.getTypeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCollectionType
entryRuleCollectionType 
:
{ before(grammarAccess.getCollectionTypeRule()); }
	 ruleCollectionType
{ after(grammarAccess.getCollectionTypeRule()); } 
	 EOF 
;

// Rule CollectionType
ruleCollectionType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCollectionTypeAccess().getGroup()); }
(rule__CollectionType__Group__0)
{ after(grammarAccess.getCollectionTypeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSimpleType
entryRuleSimpleType 
:
{ before(grammarAccess.getSimpleTypeRule()); }
	 ruleSimpleType
{ after(grammarAccess.getSimpleTypeRule()); } 
	 EOF 
;

// Rule SimpleType
ruleSimpleType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSimpleTypeAccess().getGroup()); }
(rule__SimpleType__Group__0)
{ after(grammarAccess.getSimpleTypeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIdentifier
entryRuleIdentifier 
:
{ before(grammarAccess.getIdentifierRule()); }
	 ruleIdentifier
{ after(grammarAccess.getIdentifierRule()); } 
	 EOF 
;

// Rule Identifier
ruleIdentifier
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIdentifierAccess().getIDTerminalRuleCall()); }
	RULE_ID
{ after(grammarAccess.getIdentifierAccess().getIDTerminalRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}





rule__InterfaceItem__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceItemAccess().getInterfaceFieldParserRuleCall_0()); }
	ruleInterfaceField
{ after(grammarAccess.getInterfaceItemAccess().getInterfaceFieldParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getInterfaceItemAccess().getInterfaceNavigationParserRuleCall_1()); }
	ruleInterfaceNavigation
{ after(grammarAccess.getInterfaceItemAccess().getInterfaceNavigationParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getInterfaceItemAccess().getInterfaceExpressionParserRuleCall_2()); }
	ruleInterfaceExpression
{ after(grammarAccess.getInterfaceItemAccess().getInterfaceExpressionParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Export__Alternatives_7_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExportAccess().getFingerprintAssignment_7_0_0()); }
(rule__Export__FingerprintAssignment_7_0_0)
{ after(grammarAccess.getExportAccess().getFingerprintAssignment_7_0_0()); }
)

    |(
{ before(grammarAccess.getExportAccess().getResourceFingerprintAssignment_7_0_1()); }
(rule__Export__ResourceFingerprintAssignment_7_0_1)
{ after(grammarAccess.getExportAccess().getResourceFingerprintAssignment_7_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Export__Alternatives_8
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExportAccess().getGroup_8_0()); }
(rule__Export__Group_8_0__0)
{ after(grammarAccess.getExportAccess().getGroup_8_0()); }
)

    |(
{ before(grammarAccess.getExportAccess().getGroup_8_1()); }
(rule__Export__Group_8_1__0)
{ after(grammarAccess.getExportAccess().getGroup_8_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getLetExpressionParserRuleCall_0()); }
	ruleLetExpression
{ after(grammarAccess.getExpressionAccess().getLetExpressionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getExpressionAccess().getCastedExpressionParserRuleCall_1()); }
(	ruleCastedExpression)
{ after(grammarAccess.getExpressionAccess().getCastedExpressionParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getExpressionAccess().getChainExpressionParserRuleCall_2()); }
	ruleChainExpression
{ after(grammarAccess.getExpressionAccess().getChainExpressionParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ChainedExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getChainedExpressionAccess().getIfExpressionKwParserRuleCall_0()); }
	ruleIfExpressionKw
{ after(grammarAccess.getChainedExpressionAccess().getIfExpressionKwParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getChainedExpressionAccess().getIfExpressionTriParserRuleCall_1()); }
	ruleIfExpressionTri
{ after(grammarAccess.getChainedExpressionAccess().getIfExpressionTriParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getChainedExpressionAccess().getSwitchExpressionParserRuleCall_2()); }
	ruleSwitchExpression
{ after(grammarAccess.getChainedExpressionAccess().getSwitchExpressionParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__OperatorAlternatives_1_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getOperatorEqualsSignEqualsSignKeyword_1_1_0_0()); }

	'==' 

{ after(grammarAccess.getRelationalExpressionAccess().getOperatorEqualsSignEqualsSignKeyword_1_1_0_0()); }
)

    |(
{ before(grammarAccess.getRelationalExpressionAccess().getOperatorExclamationMarkEqualsSignKeyword_1_1_0_1()); }

	'!=' 

{ after(grammarAccess.getRelationalExpressionAccess().getOperatorExclamationMarkEqualsSignKeyword_1_1_0_1()); }
)

    |(
{ before(grammarAccess.getRelationalExpressionAccess().getOperatorGreaterThanSignEqualsSignKeyword_1_1_0_2()); }

	'>=' 

{ after(grammarAccess.getRelationalExpressionAccess().getOperatorGreaterThanSignEqualsSignKeyword_1_1_0_2()); }
)

    |(
{ before(grammarAccess.getRelationalExpressionAccess().getOperatorLessThanSignEqualsSignKeyword_1_1_0_3()); }

	'<=' 

{ after(grammarAccess.getRelationalExpressionAccess().getOperatorLessThanSignEqualsSignKeyword_1_1_0_3()); }
)

    |(
{ before(grammarAccess.getRelationalExpressionAccess().getOperatorGreaterThanSignKeyword_1_1_0_4()); }

	'>' 

{ after(grammarAccess.getRelationalExpressionAccess().getOperatorGreaterThanSignKeyword_1_1_0_4()); }
)

    |(
{ before(grammarAccess.getRelationalExpressionAccess().getOperatorLessThanSignKeyword_1_1_0_5()); }

	'<' 

{ after(grammarAccess.getRelationalExpressionAccess().getOperatorLessThanSignKeyword_1_1_0_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__NameAlternatives_1_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getNamePlusSignKeyword_1_1_0_0()); }

	'+' 

{ after(grammarAccess.getAdditiveExpressionAccess().getNamePlusSignKeyword_1_1_0_0()); }
)

    |(
{ before(grammarAccess.getAdditiveExpressionAccess().getNameHyphenMinusKeyword_1_1_0_1()); }

	'-' 

{ after(grammarAccess.getAdditiveExpressionAccess().getNameHyphenMinusKeyword_1_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__NameAlternatives_1_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getNameAsteriskKeyword_1_1_0_0()); }

	'*' 

{ after(grammarAccess.getMultiplicativeExpressionAccess().getNameAsteriskKeyword_1_1_0_0()); }
)

    |(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getNameSolidusKeyword_1_1_0_1()); }

	'/' 

{ after(grammarAccess.getMultiplicativeExpressionAccess().getNameSolidusKeyword_1_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryOrInfixExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryOrInfixExpressionAccess().getUnaryExpressionParserRuleCall_0()); }
	ruleUnaryExpression
{ after(grammarAccess.getUnaryOrInfixExpressionAccess().getUnaryExpressionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getUnaryOrInfixExpressionAccess().getInfixExpressionParserRuleCall_1()); }
	ruleInfixExpression
{ after(grammarAccess.getUnaryOrInfixExpressionAccess().getInfixExpressionParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__NameAlternatives_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExpressionAccess().getNameExclamationMarkKeyword_0_0_0()); }

	'!' 

{ after(grammarAccess.getUnaryExpressionAccess().getNameExclamationMarkKeyword_0_0_0()); }
)

    |(
{ before(grammarAccess.getUnaryExpressionAccess().getNameHyphenMinusKeyword_0_0_1()); }

	'-' 

{ after(grammarAccess.getUnaryExpressionAccess().getNameHyphenMinusKeyword_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InfixExpression__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInfixExpressionAccess().getGroup_1_0()); }
(rule__InfixExpression__Group_1_0__0)
{ after(grammarAccess.getInfixExpressionAccess().getGroup_1_0()); }
)

    |(
{ before(grammarAccess.getInfixExpressionAccess().getGroup_1_1()); }
(rule__InfixExpression__Group_1_1__0)
{ after(grammarAccess.getInfixExpressionAccess().getGroup_1_1()); }
)

    |(
{ before(grammarAccess.getInfixExpressionAccess().getGroup_1_2()); }
(rule__InfixExpression__Group_1_2__0)
{ after(grammarAccess.getInfixExpressionAccess().getGroup_1_2()); }
)

    |(
{ before(grammarAccess.getInfixExpressionAccess().getGroup_1_3()); }
(rule__InfixExpression__Group_1_3__0)
{ after(grammarAccess.getInfixExpressionAccess().getGroup_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InfixExpression__NameAlternatives_1_3_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInfixExpressionAccess().getNameCollectKeyword_1_3_2_0_0()); }

	'collect' 

{ after(grammarAccess.getInfixExpressionAccess().getNameCollectKeyword_1_3_2_0_0()); }
)

    |(
{ before(grammarAccess.getInfixExpressionAccess().getNameSelectKeyword_1_3_2_0_1()); }

	'select' 

{ after(grammarAccess.getInfixExpressionAccess().getNameSelectKeyword_1_3_2_0_1()); }
)

    |(
{ before(grammarAccess.getInfixExpressionAccess().getNameSelectFirstKeyword_1_3_2_0_2()); }

	'selectFirst' 

{ after(grammarAccess.getInfixExpressionAccess().getNameSelectFirstKeyword_1_3_2_0_2()); }
)

    |(
{ before(grammarAccess.getInfixExpressionAccess().getNameRejectKeyword_1_3_2_0_3()); }

	'reject' 

{ after(grammarAccess.getInfixExpressionAccess().getNameRejectKeyword_1_3_2_0_3()); }
)

    |(
{ before(grammarAccess.getInfixExpressionAccess().getNameExistsKeyword_1_3_2_0_4()); }

	'exists' 

{ after(grammarAccess.getInfixExpressionAccess().getNameExistsKeyword_1_3_2_0_4()); }
)

    |(
{ before(grammarAccess.getInfixExpressionAccess().getNameNotExistsKeyword_1_3_2_0_5()); }

	'notExists' 

{ after(grammarAccess.getInfixExpressionAccess().getNameNotExistsKeyword_1_3_2_0_5()); }
)

    |(
{ before(grammarAccess.getInfixExpressionAccess().getNameSortByKeyword_1_3_2_0_6()); }

	'sortBy' 

{ after(grammarAccess.getInfixExpressionAccess().getNameSortByKeyword_1_3_2_0_6()); }
)

    |(
{ before(grammarAccess.getInfixExpressionAccess().getNameForAllKeyword_1_3_2_0_7()); }

	'forAll' 

{ after(grammarAccess.getInfixExpressionAccess().getNameForAllKeyword_1_3_2_0_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getLiteralParserRuleCall_0()); }
	ruleLiteral
{ after(grammarAccess.getPrimaryExpressionAccess().getLiteralParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getFeatureCallParserRuleCall_1()); }
	ruleFeatureCall
{ after(grammarAccess.getPrimaryExpressionAccess().getFeatureCallParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getListLiteralParserRuleCall_2()); }
	ruleListLiteral
{ after(grammarAccess.getPrimaryExpressionAccess().getListLiteralParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getConstructorCallExpressionParserRuleCall_3()); }
	ruleConstructorCallExpression
{ after(grammarAccess.getPrimaryExpressionAccess().getConstructorCallExpressionParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getGlobalVarExpressionParserRuleCall_4()); }
	ruleGlobalVarExpression
{ after(grammarAccess.getPrimaryExpressionAccess().getGlobalVarExpressionParserRuleCall_4()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getParanthesizedExpressionParserRuleCall_5()); }
	ruleParanthesizedExpression
{ after(grammarAccess.getPrimaryExpressionAccess().getParanthesizedExpressionParserRuleCall_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getBooleanLiteralParserRuleCall_0()); }
	ruleBooleanLiteral
{ after(grammarAccess.getLiteralAccess().getBooleanLiteralParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getIntegerLiteralParserRuleCall_1()); }
	ruleIntegerLiteral
{ after(grammarAccess.getLiteralAccess().getIntegerLiteralParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getNullLiteralParserRuleCall_2()); }
	ruleNullLiteral
{ after(grammarAccess.getLiteralAccess().getNullLiteralParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getRealLiteralParserRuleCall_3()); }
	ruleRealLiteral
{ after(grammarAccess.getLiteralAccess().getRealLiteralParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getStringLiteralParserRuleCall_4()); }
	ruleStringLiteral
{ after(grammarAccess.getLiteralAccess().getStringLiteralParserRuleCall_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanLiteral__ValAlternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanLiteralAccess().getValTrueKeyword_0_0()); }

	'true' 

{ after(grammarAccess.getBooleanLiteralAccess().getValTrueKeyword_0_0()); }
)

    |(
{ before(grammarAccess.getBooleanLiteralAccess().getValFalseKeyword_0_1()); }

	'false' 

{ after(grammarAccess.getBooleanLiteralAccess().getValFalseKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureCall__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFeatureCallAccess().getOperationCallParserRuleCall_0()); }
	ruleOperationCall
{ after(grammarAccess.getFeatureCallAccess().getOperationCallParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getFeatureCallAccess().getTypeAssignment_1()); }
(rule__FeatureCall__TypeAssignment_1)
{ after(grammarAccess.getFeatureCallAccess().getTypeAssignment_1()); }
)

    |(
{ before(grammarAccess.getFeatureCallAccess().getCollectionExpressionParserRuleCall_2()); }
	ruleCollectionExpression
{ after(grammarAccess.getFeatureCallAccess().getCollectionExpressionParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getFeatureCallAccess().getTypeSelectExpressionParserRuleCall_3()); }
	ruleTypeSelectExpression
{ after(grammarAccess.getFeatureCallAccess().getTypeSelectExpressionParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CollectionExpression__NameAlternatives_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCollectionExpressionAccess().getNameCollectKeyword_0_0_0()); }

	'collect' 

{ after(grammarAccess.getCollectionExpressionAccess().getNameCollectKeyword_0_0_0()); }
)

    |(
{ before(grammarAccess.getCollectionExpressionAccess().getNameSelectKeyword_0_0_1()); }

	'select' 

{ after(grammarAccess.getCollectionExpressionAccess().getNameSelectKeyword_0_0_1()); }
)

    |(
{ before(grammarAccess.getCollectionExpressionAccess().getNameSelectFirstKeyword_0_0_2()); }

	'selectFirst' 

{ after(grammarAccess.getCollectionExpressionAccess().getNameSelectFirstKeyword_0_0_2()); }
)

    |(
{ before(grammarAccess.getCollectionExpressionAccess().getNameRejectKeyword_0_0_3()); }

	'reject' 

{ after(grammarAccess.getCollectionExpressionAccess().getNameRejectKeyword_0_0_3()); }
)

    |(
{ before(grammarAccess.getCollectionExpressionAccess().getNameExistsKeyword_0_0_4()); }

	'exists' 

{ after(grammarAccess.getCollectionExpressionAccess().getNameExistsKeyword_0_0_4()); }
)

    |(
{ before(grammarAccess.getCollectionExpressionAccess().getNameNotExistsKeyword_0_0_5()); }

	'notExists' 

{ after(grammarAccess.getCollectionExpressionAccess().getNameNotExistsKeyword_0_0_5()); }
)

    |(
{ before(grammarAccess.getCollectionExpressionAccess().getNameSortByKeyword_0_0_6()); }

	'sortBy' 

{ after(grammarAccess.getCollectionExpressionAccess().getNameSortByKeyword_0_0_6()); }
)

    |(
{ before(grammarAccess.getCollectionExpressionAccess().getNameForAllKeyword_0_0_7()); }

	'forAll' 

{ after(grammarAccess.getCollectionExpressionAccess().getNameForAllKeyword_0_0_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getCollectionTypeParserRuleCall_0()); }
	ruleCollectionType
{ after(grammarAccess.getTypeAccess().getCollectionTypeParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getTypeAccess().getSimpleTypeParserRuleCall_1()); }
	ruleSimpleType
{ after(grammarAccess.getTypeAccess().getSimpleTypeParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CollectionType__ClAlternatives_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCollectionTypeAccess().getClCollectionKeyword_0_0_0()); }

	'Collection' 

{ after(grammarAccess.getCollectionTypeAccess().getClCollectionKeyword_0_0_0()); }
)

    |(
{ before(grammarAccess.getCollectionTypeAccess().getClListKeyword_0_0_1()); }

	'List' 

{ after(grammarAccess.getCollectionTypeAccess().getClListKeyword_0_0_1()); }
)

    |(
{ before(grammarAccess.getCollectionTypeAccess().getClSetKeyword_0_0_2()); }

	'Set' 

{ after(grammarAccess.getCollectionTypeAccess().getClSetKeyword_0_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__ExportModel__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExportModel__Group__0__Impl
	rule__ExportModel__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExportModel__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExportModelAccess().getGroup_0()); }
(rule__ExportModel__Group_0__0)?
{ after(grammarAccess.getExportModelAccess().getGroup_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExportModel__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExportModel__Group__1__Impl
	rule__ExportModel__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ExportModel__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getExportModelAccess().getImportsAssignment_1()); }
(rule__ExportModel__ImportsAssignment_1)
{ after(grammarAccess.getExportModelAccess().getImportsAssignment_1()); }
)
(
{ before(grammarAccess.getExportModelAccess().getImportsAssignment_1()); }
(rule__ExportModel__ImportsAssignment_1)*
{ after(grammarAccess.getExportModelAccess().getImportsAssignment_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExportModel__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExportModel__Group__2__Impl
	rule__ExportModel__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ExportModel__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExportModelAccess().getExtensionsAssignment_2()); }
(rule__ExportModel__ExtensionsAssignment_2)*
{ after(grammarAccess.getExportModelAccess().getExtensionsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExportModel__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExportModel__Group__3__Impl
	rule__ExportModel__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ExportModel__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExportModelAccess().getGroup_3()); }
(rule__ExportModel__Group_3__0)?
{ after(grammarAccess.getExportModelAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExportModel__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExportModel__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExportModel__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getExportModelAccess().getExportsAssignment_4()); }
(rule__ExportModel__ExportsAssignment_4)
{ after(grammarAccess.getExportModelAccess().getExportsAssignment_4()); }
)
(
{ before(grammarAccess.getExportModelAccess().getExportsAssignment_4()); }
(rule__ExportModel__ExportsAssignment_4)*
{ after(grammarAccess.getExportModelAccess().getExportsAssignment_4()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}












rule__ExportModel__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExportModel__Group_0__0__Impl
	rule__ExportModel__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExportModel__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExportModelAccess().getExportKeyword_0_0()); }

	'export' 

{ after(grammarAccess.getExportModelAccess().getExportKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExportModel__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExportModel__Group_0__1__Impl
	rule__ExportModel__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ExportModel__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExportModelAccess().getExtensionAssignment_0_1()); }
(rule__ExportModel__ExtensionAssignment_0_1)?
{ after(grammarAccess.getExportModelAccess().getExtensionAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExportModel__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExportModel__Group_0__2__Impl
	rule__ExportModel__Group_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ExportModel__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExportModelAccess().getNameAssignment_0_2()); }
(rule__ExportModel__NameAssignment_0_2)
{ after(grammarAccess.getExportModelAccess().getNameAssignment_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExportModel__Group_0__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExportModel__Group_0__3__Impl
	rule__ExportModel__Group_0__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ExportModel__Group_0__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExportModelAccess().getForKeyword_0_3()); }

	'for' 

{ after(grammarAccess.getExportModelAccess().getForKeyword_0_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExportModel__Group_0__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExportModel__Group_0__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExportModel__Group_0__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExportModelAccess().getTargetGrammarAssignment_0_4()); }
(rule__ExportModel__TargetGrammarAssignment_0_4)
{ after(grammarAccess.getExportModelAccess().getTargetGrammarAssignment_0_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__ExportModel__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExportModel__Group_3__0__Impl
	rule__ExportModel__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExportModel__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExportModelAccess().getInterfaceKeyword_3_0()); }

	'interface' 

{ after(grammarAccess.getExportModelAccess().getInterfaceKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExportModel__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExportModel__Group_3__1__Impl
	rule__ExportModel__Group_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ExportModel__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExportModelAccess().getLeftCurlyBracketKeyword_3_1()); }

	'{' 

{ after(grammarAccess.getExportModelAccess().getLeftCurlyBracketKeyword_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExportModel__Group_3__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExportModel__Group_3__2__Impl
	rule__ExportModel__Group_3__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ExportModel__Group_3__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getExportModelAccess().getInterfacesAssignment_3_2()); }
(rule__ExportModel__InterfacesAssignment_3_2)
{ after(grammarAccess.getExportModelAccess().getInterfacesAssignment_3_2()); }
)
(
{ before(grammarAccess.getExportModelAccess().getInterfacesAssignment_3_2()); }
(rule__ExportModel__InterfacesAssignment_3_2)*
{ after(grammarAccess.getExportModelAccess().getInterfacesAssignment_3_2()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExportModel__Group_3__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExportModel__Group_3__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExportModel__Group_3__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExportModelAccess().getRightCurlyBracketKeyword_3_3()); }

	'}' 

{ after(grammarAccess.getExportModelAccess().getRightCurlyBracketKeyword_3_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Import__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Import__Group__0__Impl
	rule__Import__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getImportKeyword_0()); }

	'import' 

{ after(grammarAccess.getImportAccess().getImportKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Import__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Import__Group__1__Impl
	rule__Import__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getPackageAssignment_1()); }
(rule__Import__PackageAssignment_1)
{ after(grammarAccess.getImportAccess().getPackageAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Import__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Import__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getGroup_2()); }
(rule__Import__Group_2__0)?
{ after(grammarAccess.getImportAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Import__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Import__Group_2__0__Impl
	rule__Import__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getAsKeyword_2_0()); }

	'as' 

{ after(grammarAccess.getImportAccess().getAsKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Import__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Import__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getNameAssignment_2_1()); }
(rule__Import__NameAssignment_2_1)
{ after(grammarAccess.getImportAccess().getNameAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Extension__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Extension__Group__0__Impl
	rule__Extension__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Extension__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExtensionAccess().getExtensionKeyword_0()); }

	'extension' 

{ after(grammarAccess.getExtensionAccess().getExtensionKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Extension__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Extension__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Extension__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExtensionAccess().getExtensionAssignment_1()); }
(rule__Extension__ExtensionAssignment_1)
{ after(grammarAccess.getExtensionAccess().getExtensionAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Interface__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Interface__Group__0__Impl
	rule__Interface__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Interface__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceAccess().getTypeAssignment_0()); }
(rule__Interface__TypeAssignment_0)
{ after(grammarAccess.getInterfaceAccess().getTypeAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Interface__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Interface__Group__1__Impl
	rule__Interface__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Interface__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceAccess().getGroup_1()); }
(rule__Interface__Group_1__0)?
{ after(grammarAccess.getInterfaceAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Interface__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Interface__Group__2__Impl
	rule__Interface__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Interface__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceAccess().getGroup_2()); }
(rule__Interface__Group_2__0)*
{ after(grammarAccess.getInterfaceAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Interface__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Interface__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Interface__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceAccess().getSemicolonKeyword_3()); }

	';' 

{ after(grammarAccess.getInterfaceAccess().getSemicolonKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Interface__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Interface__Group_1__0__Impl
	rule__Interface__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Interface__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceAccess().getLeftSquareBracketKeyword_1_0()); }

	'[' 

{ after(grammarAccess.getInterfaceAccess().getLeftSquareBracketKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Interface__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Interface__Group_1__1__Impl
	rule__Interface__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Interface__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceAccess().getGuardAssignment_1_1()); }
(rule__Interface__GuardAssignment_1_1)
{ after(grammarAccess.getInterfaceAccess().getGuardAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Interface__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Interface__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Interface__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceAccess().getRightSquareBracketKeyword_1_2()); }

	']' 

{ after(grammarAccess.getInterfaceAccess().getRightSquareBracketKeyword_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Interface__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Interface__Group_2__0__Impl
	rule__Interface__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Interface__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceAccess().getEqualsSignKeyword_2_0()); }

	'=' 

{ after(grammarAccess.getInterfaceAccess().getEqualsSignKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Interface__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Interface__Group_2__1__Impl
	rule__Interface__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Interface__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceAccess().getItemsAssignment_2_1()); }
(rule__Interface__ItemsAssignment_2_1)
{ after(grammarAccess.getInterfaceAccess().getItemsAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Interface__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Interface__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Interface__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceAccess().getGroup_2_2()); }
(rule__Interface__Group_2_2__0)*
{ after(grammarAccess.getInterfaceAccess().getGroup_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Interface__Group_2_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Interface__Group_2_2__0__Impl
	rule__Interface__Group_2_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Interface__Group_2_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceAccess().getCommaKeyword_2_2_0()); }

	',' 

{ after(grammarAccess.getInterfaceAccess().getCommaKeyword_2_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Interface__Group_2_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Interface__Group_2_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Interface__Group_2_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceAccess().getItemsAssignment_2_2_1()); }
(rule__Interface__ItemsAssignment_2_2_1)
{ after(grammarAccess.getInterfaceAccess().getItemsAssignment_2_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__InterfaceField__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InterfaceField__Group__0__Impl
	rule__InterfaceField__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceField__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceFieldAccess().getUnorderedAssignment_0()); }
(rule__InterfaceField__UnorderedAssignment_0)?
{ after(grammarAccess.getInterfaceFieldAccess().getUnorderedAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InterfaceField__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InterfaceField__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceField__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceFieldAccess().getFieldAssignment_1()); }
(rule__InterfaceField__FieldAssignment_1)
{ after(grammarAccess.getInterfaceFieldAccess().getFieldAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__InterfaceNavigation__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InterfaceNavigation__Group__0__Impl
	rule__InterfaceNavigation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceNavigation__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceNavigationAccess().getCommercialAtKeyword_0()); }

	'@' 

{ after(grammarAccess.getInterfaceNavigationAccess().getCommercialAtKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InterfaceNavigation__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InterfaceNavigation__Group__1__Impl
	rule__InterfaceNavigation__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceNavigation__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceNavigationAccess().getUnorderedAssignment_1()); }
(rule__InterfaceNavigation__UnorderedAssignment_1)?
{ after(grammarAccess.getInterfaceNavigationAccess().getUnorderedAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InterfaceNavigation__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InterfaceNavigation__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceNavigation__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceNavigationAccess().getRefAssignment_2()); }
(rule__InterfaceNavigation__RefAssignment_2)
{ after(grammarAccess.getInterfaceNavigationAccess().getRefAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__InterfaceExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InterfaceExpression__Group__0__Impl
	rule__InterfaceExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceExpressionAccess().getEvalKeyword_0()); }

	'eval' 

{ after(grammarAccess.getInterfaceExpressionAccess().getEvalKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InterfaceExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InterfaceExpression__Group__1__Impl
	rule__InterfaceExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceExpressionAccess().getRefAssignment_1()); }
(rule__InterfaceExpression__RefAssignment_1)?
{ after(grammarAccess.getInterfaceExpressionAccess().getRefAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InterfaceExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InterfaceExpression__Group__2__Impl
	rule__InterfaceExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceExpressionAccess().getUnorderedAssignment_2()); }
(rule__InterfaceExpression__UnorderedAssignment_2)?
{ after(grammarAccess.getInterfaceExpressionAccess().getUnorderedAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InterfaceExpression__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InterfaceExpression__Group__3__Impl
	rule__InterfaceExpression__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceExpression__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceExpressionAccess().getLeftParenthesisKeyword_3()); }

	'(' 

{ after(grammarAccess.getInterfaceExpressionAccess().getLeftParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InterfaceExpression__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InterfaceExpression__Group__4__Impl
	rule__InterfaceExpression__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceExpression__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceExpressionAccess().getExprAssignment_4()); }
(rule__InterfaceExpression__ExprAssignment_4)
{ after(grammarAccess.getInterfaceExpressionAccess().getExprAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InterfaceExpression__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InterfaceExpression__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceExpression__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceExpressionAccess().getRightParenthesisKeyword_5()); }

	')' 

{ after(grammarAccess.getInterfaceExpressionAccess().getRightParenthesisKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__Export__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Export__Group__0__Impl
	rule__Export__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Export__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExportAccess().getExportKeyword_0()); }

	'export' 

{ after(grammarAccess.getExportAccess().getExportKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Export__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Export__Group__1__Impl
	rule__Export__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Export__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExportAccess().getGroup_1()); }
(rule__Export__Group_1__0)?
{ after(grammarAccess.getExportAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Export__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Export__Group__2__Impl
	rule__Export__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Export__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExportAccess().getTypeAssignment_2()); }
(rule__Export__TypeAssignment_2)
{ after(grammarAccess.getExportAccess().getTypeAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Export__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Export__Group__3__Impl
	rule__Export__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Export__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExportAccess().getGroup_3()); }
(rule__Export__Group_3__0)?
{ after(grammarAccess.getExportAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Export__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Export__Group__4__Impl
	rule__Export__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Export__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExportAccess().getGroup_4()); }
(rule__Export__Group_4__0)?
{ after(grammarAccess.getExportAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Export__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Export__Group__5__Impl
	rule__Export__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Export__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExportAccess().getLeftCurlyBracketKeyword_5()); }

	'{' 

{ after(grammarAccess.getExportAccess().getLeftCurlyBracketKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Export__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Export__Group__6__Impl
	rule__Export__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Export__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExportAccess().getGroup_6()); }
(rule__Export__Group_6__0)?
{ after(grammarAccess.getExportAccess().getGroup_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Export__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Export__Group__7__Impl
	rule__Export__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__Export__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExportAccess().getGroup_7()); }
(rule__Export__Group_7__0)?
{ after(grammarAccess.getExportAccess().getGroup_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Export__Group__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Export__Group__8__Impl
	rule__Export__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__Export__Group__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExportAccess().getAlternatives_8()); }
(rule__Export__Alternatives_8)*
{ after(grammarAccess.getExportAccess().getAlternatives_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Export__Group__9
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Export__Group__9__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Export__Group__9__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExportAccess().getRightCurlyBracketKeyword_9()); }

	'}' 

{ after(grammarAccess.getExportAccess().getRightCurlyBracketKeyword_9()); }
)

;
finally {
	restoreStackSize(stackSize);
}






















rule__Export__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Export__Group_1__0__Impl
	rule__Export__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Export__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExportAccess().getLookupAssignment_1_0()); }
(rule__Export__LookupAssignment_1_0)
{ after(grammarAccess.getExportAccess().getLookupAssignment_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Export__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Export__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Export__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExportAccess().getGroup_1_1()); }
(rule__Export__Group_1_1__0)?
{ after(grammarAccess.getExportAccess().getGroup_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Export__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Export__Group_1_1__0__Impl
	rule__Export__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Export__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExportAccess().getLeftSquareBracketKeyword_1_1_0()); }

	'[' 

{ after(grammarAccess.getExportAccess().getLeftSquareBracketKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Export__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Export__Group_1_1__1__Impl
	rule__Export__Group_1_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Export__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExportAccess().getLookupPredicateAssignment_1_1_1()); }
(rule__Export__LookupPredicateAssignment_1_1_1)
{ after(grammarAccess.getExportAccess().getLookupPredicateAssignment_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Export__Group_1_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Export__Group_1_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Export__Group_1_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExportAccess().getRightSquareBracketKeyword_1_1_2()); }

	']' 

{ after(grammarAccess.getExportAccess().getRightSquareBracketKeyword_1_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Export__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Export__Group_3__0__Impl
	rule__Export__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Export__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExportAccess().getAsKeyword_3_0()); }

	'as' 

{ after(grammarAccess.getExportAccess().getAsKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Export__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Export__Group_3__1__Impl
	rule__Export__Group_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Export__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExportAccess().getQualifiedNameAssignment_3_1()); }
(rule__Export__QualifiedNameAssignment_3_1)?
{ after(grammarAccess.getExportAccess().getQualifiedNameAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Export__Group_3__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Export__Group_3__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Export__Group_3__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExportAccess().getNamingAssignment_3_2()); }
(rule__Export__NamingAssignment_3_2)
{ after(grammarAccess.getExportAccess().getNamingAssignment_3_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Export__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Export__Group_4__0__Impl
	rule__Export__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Export__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExportAccess().getLeftSquareBracketKeyword_4_0()); }

	'[' 

{ after(grammarAccess.getExportAccess().getLeftSquareBracketKeyword_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Export__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Export__Group_4__1__Impl
	rule__Export__Group_4__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Export__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExportAccess().getGuardAssignment_4_1()); }
(rule__Export__GuardAssignment_4_1)
{ after(grammarAccess.getExportAccess().getGuardAssignment_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Export__Group_4__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Export__Group_4__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Export__Group_4__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExportAccess().getRightSquareBracketKeyword_4_2()); }

	']' 

{ after(grammarAccess.getExportAccess().getRightSquareBracketKeyword_4_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Export__Group_6__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Export__Group_6__0__Impl
	rule__Export__Group_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Export__Group_6__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExportAccess().getUriFragmentKeyword_6_0()); }

	'uri-fragment' 

{ after(grammarAccess.getExportAccess().getUriFragmentKeyword_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Export__Group_6__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Export__Group_6__1__Impl
	rule__Export__Group_6__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Export__Group_6__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExportAccess().getEqualsSignKeyword_6_1()); }

	'=' 

{ after(grammarAccess.getExportAccess().getEqualsSignKeyword_6_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Export__Group_6__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Export__Group_6__2__Impl
	rule__Export__Group_6__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Export__Group_6__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExportAccess().getFragmentUniqueAssignment_6_2()); }
(rule__Export__FragmentUniqueAssignment_6_2)?
{ after(grammarAccess.getExportAccess().getFragmentUniqueAssignment_6_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Export__Group_6__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Export__Group_6__3__Impl
	rule__Export__Group_6__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Export__Group_6__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExportAccess().getAttributeKeyword_6_3()); }

	'attribute' 

{ after(grammarAccess.getExportAccess().getAttributeKeyword_6_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Export__Group_6__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Export__Group_6__4__Impl
	rule__Export__Group_6__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Export__Group_6__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExportAccess().getLeftParenthesisKeyword_6_4()); }

	'(' 

{ after(grammarAccess.getExportAccess().getLeftParenthesisKeyword_6_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Export__Group_6__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Export__Group_6__5__Impl
	rule__Export__Group_6__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Export__Group_6__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExportAccess().getFragmentAttributeAssignment_6_5()); }
(rule__Export__FragmentAttributeAssignment_6_5)
{ after(grammarAccess.getExportAccess().getFragmentAttributeAssignment_6_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Export__Group_6__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Export__Group_6__6__Impl
	rule__Export__Group_6__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Export__Group_6__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExportAccess().getRightParenthesisKeyword_6_6()); }

	')' 

{ after(grammarAccess.getExportAccess().getRightParenthesisKeyword_6_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Export__Group_6__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Export__Group_6__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Export__Group_6__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExportAccess().getSemicolonKeyword_6_7()); }

	';' 

{ after(grammarAccess.getExportAccess().getSemicolonKeyword_6_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


















rule__Export__Group_7__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Export__Group_7__0__Impl
	rule__Export__Group_7__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Export__Group_7__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExportAccess().getAlternatives_7_0()); }
(rule__Export__Alternatives_7_0)
{ after(grammarAccess.getExportAccess().getAlternatives_7_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Export__Group_7__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Export__Group_7__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Export__Group_7__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExportAccess().getSemicolonKeyword_7_1()); }

	';' 

{ after(grammarAccess.getExportAccess().getSemicolonKeyword_7_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Export__Group_8_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Export__Group_8_0__0__Impl
	rule__Export__Group_8_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Export__Group_8_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExportAccess().getFieldKeyword_8_0_0()); }

	'field' 

{ after(grammarAccess.getExportAccess().getFieldKeyword_8_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Export__Group_8_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Export__Group_8_0__1__Impl
	rule__Export__Group_8_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Export__Group_8_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExportAccess().getAttributesAssignment_8_0_1()); }
(rule__Export__AttributesAssignment_8_0_1)
{ after(grammarAccess.getExportAccess().getAttributesAssignment_8_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Export__Group_8_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Export__Group_8_0__2__Impl
	rule__Export__Group_8_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Export__Group_8_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExportAccess().getGroup_8_0_2()); }
(rule__Export__Group_8_0_2__0)*
{ after(grammarAccess.getExportAccess().getGroup_8_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Export__Group_8_0__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Export__Group_8_0__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Export__Group_8_0__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExportAccess().getSemicolonKeyword_8_0_3()); }

	';' 

{ after(grammarAccess.getExportAccess().getSemicolonKeyword_8_0_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Export__Group_8_0_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Export__Group_8_0_2__0__Impl
	rule__Export__Group_8_0_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Export__Group_8_0_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExportAccess().getCommaKeyword_8_0_2_0()); }

	',' 

{ after(grammarAccess.getExportAccess().getCommaKeyword_8_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Export__Group_8_0_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Export__Group_8_0_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Export__Group_8_0_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExportAccess().getAttributesAssignment_8_0_2_1()); }
(rule__Export__AttributesAssignment_8_0_2_1)
{ after(grammarAccess.getExportAccess().getAttributesAssignment_8_0_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Export__Group_8_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Export__Group_8_1__0__Impl
	rule__Export__Group_8_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Export__Group_8_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExportAccess().getDataKeyword_8_1_0()); }

	'data' 

{ after(grammarAccess.getExportAccess().getDataKeyword_8_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Export__Group_8_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Export__Group_8_1__1__Impl
	rule__Export__Group_8_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Export__Group_8_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExportAccess().getUserDataAssignment_8_1_1()); }
(rule__Export__UserDataAssignment_8_1_1)
{ after(grammarAccess.getExportAccess().getUserDataAssignment_8_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Export__Group_8_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Export__Group_8_1__2__Impl
	rule__Export__Group_8_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Export__Group_8_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExportAccess().getGroup_8_1_2()); }
(rule__Export__Group_8_1_2__0)*
{ after(grammarAccess.getExportAccess().getGroup_8_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Export__Group_8_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Export__Group_8_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Export__Group_8_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExportAccess().getSemicolonKeyword_8_1_3()); }

	';' 

{ after(grammarAccess.getExportAccess().getSemicolonKeyword_8_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Export__Group_8_1_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Export__Group_8_1_2__0__Impl
	rule__Export__Group_8_1_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Export__Group_8_1_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExportAccess().getCommaKeyword_8_1_2_0()); }

	',' 

{ after(grammarAccess.getExportAccess().getCommaKeyword_8_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Export__Group_8_1_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Export__Group_8_1_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Export__Group_8_1_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExportAccess().getUserDataAssignment_8_1_2_1()); }
(rule__Export__UserDataAssignment_8_1_2_1)
{ after(grammarAccess.getExportAccess().getUserDataAssignment_8_1_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__UserData__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UserData__Group__0__Impl
	rule__UserData__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UserData__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUserDataAccess().getNameAssignment_0()); }
(rule__UserData__NameAssignment_0)
{ after(grammarAccess.getUserDataAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UserData__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UserData__Group__1__Impl
	rule__UserData__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__UserData__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUserDataAccess().getEqualsSignKeyword_1()); }

	'=' 

{ after(grammarAccess.getUserDataAccess().getEqualsSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UserData__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UserData__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UserData__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUserDataAccess().getExprAssignment_2()); }
(rule__UserData__ExprAssignment_2)
{ after(grammarAccess.getUserDataAccess().getExprAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__QualifiedID__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedID__Group__0__Impl
	rule__QualifiedID__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedID__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedIDAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
{ after(grammarAccess.getQualifiedIDAccess().getIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedID__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedID__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedID__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedIDAccess().getGroup_1()); }
(rule__QualifiedID__Group_1__0)*
{ after(grammarAccess.getQualifiedIDAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__QualifiedID__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedID__Group_1__0__Impl
	rule__QualifiedID__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedID__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedIDAccess().getColonColonKeyword_1_0()); }

	'::' 

{ after(grammarAccess.getQualifiedIDAccess().getColonColonKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedID__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedID__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedID__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedIDAccess().getIDTerminalRuleCall_1_1()); }
	RULE_ID
{ after(grammarAccess.getQualifiedIDAccess().getIDTerminalRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__LetExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LetExpression__Group__0__Impl
	rule__LetExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LetExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLetExpressionAccess().getLetKeyword_0()); }

	'let' 

{ after(grammarAccess.getLetExpressionAccess().getLetKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LetExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LetExpression__Group__1__Impl
	rule__LetExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LetExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLetExpressionAccess().getIdentifierAssignment_1()); }
(rule__LetExpression__IdentifierAssignment_1)
{ after(grammarAccess.getLetExpressionAccess().getIdentifierAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LetExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LetExpression__Group__2__Impl
	rule__LetExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__LetExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLetExpressionAccess().getEqualsSignKeyword_2()); }

	'=' 

{ after(grammarAccess.getLetExpressionAccess().getEqualsSignKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LetExpression__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LetExpression__Group__3__Impl
	rule__LetExpression__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__LetExpression__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLetExpressionAccess().getVarExprAssignment_3()); }
(rule__LetExpression__VarExprAssignment_3)
{ after(grammarAccess.getLetExpressionAccess().getVarExprAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LetExpression__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LetExpression__Group__4__Impl
	rule__LetExpression__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__LetExpression__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLetExpressionAccess().getColonKeyword_4()); }

	':' 

{ after(grammarAccess.getLetExpressionAccess().getColonKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LetExpression__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LetExpression__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LetExpression__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLetExpressionAccess().getTargetAssignment_5()); }
(rule__LetExpression__TargetAssignment_5)
{ after(grammarAccess.getLetExpressionAccess().getTargetAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__CastedExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CastedExpression__Group__0__Impl
	rule__CastedExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CastedExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCastedExpressionAccess().getLeftParenthesisKeyword_0()); }

	'(' 

{ after(grammarAccess.getCastedExpressionAccess().getLeftParenthesisKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CastedExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CastedExpression__Group__1__Impl
	rule__CastedExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CastedExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCastedExpressionAccess().getTypeAssignment_1()); }
(rule__CastedExpression__TypeAssignment_1)
{ after(grammarAccess.getCastedExpressionAccess().getTypeAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CastedExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CastedExpression__Group__2__Impl
	rule__CastedExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__CastedExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCastedExpressionAccess().getRightParenthesisKeyword_2()); }

	')' 

{ after(grammarAccess.getCastedExpressionAccess().getRightParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CastedExpression__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CastedExpression__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CastedExpression__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCastedExpressionAccess().getTargetAssignment_3()); }
(rule__CastedExpression__TargetAssignment_3)
{ after(grammarAccess.getCastedExpressionAccess().getTargetAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__ChainExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ChainExpression__Group__0__Impl
	rule__ChainExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ChainExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getChainExpressionAccess().getChainedExpressionParserRuleCall_0()); }
	ruleChainedExpression
{ after(grammarAccess.getChainExpressionAccess().getChainedExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ChainExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ChainExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ChainExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getChainExpressionAccess().getGroup_1()); }
(rule__ChainExpression__Group_1__0)*
{ after(grammarAccess.getChainExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ChainExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ChainExpression__Group_1__0__Impl
	rule__ChainExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ChainExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getChainExpressionAccess().getChainExpressionFirstAction_1_0()); }
(

)
{ after(grammarAccess.getChainExpressionAccess().getChainExpressionFirstAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ChainExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ChainExpression__Group_1__1__Impl
	rule__ChainExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ChainExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getChainExpressionAccess().getHyphenMinusGreaterThanSignKeyword_1_1()); }

	'->' 

{ after(grammarAccess.getChainExpressionAccess().getHyphenMinusGreaterThanSignKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ChainExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ChainExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ChainExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getChainExpressionAccess().getNextAssignment_1_2()); }
(rule__ChainExpression__NextAssignment_1_2)
{ after(grammarAccess.getChainExpressionAccess().getNextAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__IfExpressionTri__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfExpressionTri__Group__0__Impl
	rule__IfExpressionTri__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpressionTri__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfExpressionTriAccess().getOrExpressionParserRuleCall_0()); }
	ruleOrExpression
{ after(grammarAccess.getIfExpressionTriAccess().getOrExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfExpressionTri__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfExpressionTri__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpressionTri__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfExpressionTriAccess().getGroup_1()); }
(rule__IfExpressionTri__Group_1__0)?
{ after(grammarAccess.getIfExpressionTriAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__IfExpressionTri__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfExpressionTri__Group_1__0__Impl
	rule__IfExpressionTri__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpressionTri__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfExpressionTriAccess().getIfExpressionConditionAction_1_0()); }
(

)
{ after(grammarAccess.getIfExpressionTriAccess().getIfExpressionConditionAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfExpressionTri__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfExpressionTri__Group_1__1__Impl
	rule__IfExpressionTri__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpressionTri__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfExpressionTriAccess().getQuestionMarkKeyword_1_1()); }

	'?' 

{ after(grammarAccess.getIfExpressionTriAccess().getQuestionMarkKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfExpressionTri__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfExpressionTri__Group_1__2__Impl
	rule__IfExpressionTri__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpressionTri__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfExpressionTriAccess().getThenPartAssignment_1_2()); }
(rule__IfExpressionTri__ThenPartAssignment_1_2)
{ after(grammarAccess.getIfExpressionTriAccess().getThenPartAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfExpressionTri__Group_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfExpressionTri__Group_1__3__Impl
	rule__IfExpressionTri__Group_1__4
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpressionTri__Group_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfExpressionTriAccess().getColonKeyword_1_3()); }

	':' 

{ after(grammarAccess.getIfExpressionTriAccess().getColonKeyword_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfExpressionTri__Group_1__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfExpressionTri__Group_1__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpressionTri__Group_1__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfExpressionTriAccess().getElsePartAssignment_1_4()); }
(rule__IfExpressionTri__ElsePartAssignment_1_4)
{ after(grammarAccess.getIfExpressionTriAccess().getElsePartAssignment_1_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__IfExpressionKw__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfExpressionKw__Group__0__Impl
	rule__IfExpressionKw__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpressionKw__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfExpressionKwAccess().getIfKeyword_0()); }

	'if' 

{ after(grammarAccess.getIfExpressionKwAccess().getIfKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfExpressionKw__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfExpressionKw__Group__1__Impl
	rule__IfExpressionKw__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpressionKw__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfExpressionKwAccess().getConditionAssignment_1()); }
(rule__IfExpressionKw__ConditionAssignment_1)
{ after(grammarAccess.getIfExpressionKwAccess().getConditionAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfExpressionKw__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfExpressionKw__Group__2__Impl
	rule__IfExpressionKw__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpressionKw__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfExpressionKwAccess().getThenKeyword_2()); }

	'then' 

{ after(grammarAccess.getIfExpressionKwAccess().getThenKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfExpressionKw__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfExpressionKw__Group__3__Impl
	rule__IfExpressionKw__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpressionKw__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfExpressionKwAccess().getThenPartAssignment_3()); }
(rule__IfExpressionKw__ThenPartAssignment_3)
{ after(grammarAccess.getIfExpressionKwAccess().getThenPartAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfExpressionKw__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfExpressionKw__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpressionKw__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfExpressionKwAccess().getGroup_4()); }
(rule__IfExpressionKw__Group_4__0)?
{ after(grammarAccess.getIfExpressionKwAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__IfExpressionKw__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfExpressionKw__Group_4__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpressionKw__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfExpressionKwAccess().getGroup_4_0()); }
(rule__IfExpressionKw__Group_4_0__0)
{ after(grammarAccess.getIfExpressionKwAccess().getGroup_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__IfExpressionKw__Group_4_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfExpressionKw__Group_4_0__0__Impl
	rule__IfExpressionKw__Group_4_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpressionKw__Group_4_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfExpressionKwAccess().getElseKeyword_4_0_0()); }

	'else' 

{ after(grammarAccess.getIfExpressionKwAccess().getElseKeyword_4_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfExpressionKw__Group_4_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfExpressionKw__Group_4_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpressionKw__Group_4_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfExpressionKwAccess().getElsePartAssignment_4_0_1()); }
(rule__IfExpressionKw__ElsePartAssignment_4_0_1)
{ after(grammarAccess.getIfExpressionKwAccess().getElsePartAssignment_4_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SwitchExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SwitchExpression__Group__0__Impl
	rule__SwitchExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchExpressionAccess().getSwitchKeyword_0()); }

	'switch' 

{ after(grammarAccess.getSwitchExpressionAccess().getSwitchKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SwitchExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SwitchExpression__Group__1__Impl
	rule__SwitchExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchExpressionAccess().getGroup_1()); }
(rule__SwitchExpression__Group_1__0)?
{ after(grammarAccess.getSwitchExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SwitchExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SwitchExpression__Group__2__Impl
	rule__SwitchExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchExpressionAccess().getLeftCurlyBracketKeyword_2()); }

	'{' 

{ after(grammarAccess.getSwitchExpressionAccess().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SwitchExpression__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SwitchExpression__Group__3__Impl
	rule__SwitchExpression__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchExpression__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchExpressionAccess().getCaseAssignment_3()); }
(rule__SwitchExpression__CaseAssignment_3)*
{ after(grammarAccess.getSwitchExpressionAccess().getCaseAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SwitchExpression__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SwitchExpression__Group__4__Impl
	rule__SwitchExpression__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchExpression__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchExpressionAccess().getDefaultKeyword_4()); }

	'default' 

{ after(grammarAccess.getSwitchExpressionAccess().getDefaultKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SwitchExpression__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SwitchExpression__Group__5__Impl
	rule__SwitchExpression__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchExpression__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchExpressionAccess().getColonKeyword_5()); }

	':' 

{ after(grammarAccess.getSwitchExpressionAccess().getColonKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SwitchExpression__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SwitchExpression__Group__6__Impl
	rule__SwitchExpression__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchExpression__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchExpressionAccess().getDefaultExprAssignment_6()); }
(rule__SwitchExpression__DefaultExprAssignment_6)
{ after(grammarAccess.getSwitchExpressionAccess().getDefaultExprAssignment_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SwitchExpression__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SwitchExpression__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchExpression__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchExpressionAccess().getRightCurlyBracketKeyword_7()); }

	'}' 

{ after(grammarAccess.getSwitchExpressionAccess().getRightCurlyBracketKeyword_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


















rule__SwitchExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SwitchExpression__Group_1__0__Impl
	rule__SwitchExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchExpressionAccess().getLeftParenthesisKeyword_1_0()); }

	'(' 

{ after(grammarAccess.getSwitchExpressionAccess().getLeftParenthesisKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SwitchExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SwitchExpression__Group_1__1__Impl
	rule__SwitchExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchExpressionAccess().getSwitchExprAssignment_1_1()); }
(rule__SwitchExpression__SwitchExprAssignment_1_1)
{ after(grammarAccess.getSwitchExpressionAccess().getSwitchExprAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SwitchExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SwitchExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchExpressionAccess().getRightParenthesisKeyword_1_2()); }

	')' 

{ after(grammarAccess.getSwitchExpressionAccess().getRightParenthesisKeyword_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Case__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Case__Group__0__Impl
	rule__Case__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Case__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCaseAccess().getCaseKeyword_0()); }

	'case' 

{ after(grammarAccess.getCaseAccess().getCaseKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Case__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Case__Group__1__Impl
	rule__Case__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Case__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCaseAccess().getConditionAssignment_1()); }
(rule__Case__ConditionAssignment_1)
{ after(grammarAccess.getCaseAccess().getConditionAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Case__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Case__Group__2__Impl
	rule__Case__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Case__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCaseAccess().getColonKeyword_2()); }

	':' 

{ after(grammarAccess.getCaseAccess().getColonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Case__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Case__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Case__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCaseAccess().getThenParAssignment_3()); }
(rule__Case__ThenParAssignment_3)
{ after(grammarAccess.getCaseAccess().getThenParAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__OrExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrExpression__Group__0__Impl
	rule__OrExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getAndExpressionParserRuleCall_0()); }
	ruleAndExpression
{ after(grammarAccess.getOrExpressionAccess().getAndExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OrExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getGroup_1()); }
(rule__OrExpression__Group_1__0)*
{ after(grammarAccess.getOrExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__OrExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrExpression__Group_1__0__Impl
	rule__OrExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getBooleanOperationLeftAction_1_0()); }
(

)
{ after(grammarAccess.getOrExpressionAccess().getBooleanOperationLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OrExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrExpression__Group_1__1__Impl
	rule__OrExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getOperatorAssignment_1_1()); }
(rule__OrExpression__OperatorAssignment_1_1)
{ after(grammarAccess.getOrExpressionAccess().getOperatorAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OrExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OrExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getRightAssignment_1_2()); }
(rule__OrExpression__RightAssignment_1_2)
{ after(grammarAccess.getOrExpressionAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__AndExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group__0__Impl
	rule__AndExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getImpliesExpressionParserRuleCall_0()); }
	ruleImpliesExpression
{ after(grammarAccess.getAndExpressionAccess().getImpliesExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getGroup_1()); }
(rule__AndExpression__Group_1__0)*
{ after(grammarAccess.getAndExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AndExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group_1__0__Impl
	rule__AndExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getBooleanOperationLeftAction_1_0()); }
(

)
{ after(grammarAccess.getAndExpressionAccess().getBooleanOperationLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group_1__1__Impl
	rule__AndExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getOperatorAssignment_1_1()); }
(rule__AndExpression__OperatorAssignment_1_1)
{ after(grammarAccess.getAndExpressionAccess().getOperatorAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getRightAssignment_1_2()); }
(rule__AndExpression__RightAssignment_1_2)
{ after(grammarAccess.getAndExpressionAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ImpliesExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ImpliesExpression__Group__0__Impl
	rule__ImpliesExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ImpliesExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImpliesExpressionAccess().getRelationalExpressionParserRuleCall_0()); }
	ruleRelationalExpression
{ after(grammarAccess.getImpliesExpressionAccess().getRelationalExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ImpliesExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ImpliesExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ImpliesExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImpliesExpressionAccess().getGroup_1()); }
(rule__ImpliesExpression__Group_1__0)*
{ after(grammarAccess.getImpliesExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ImpliesExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ImpliesExpression__Group_1__0__Impl
	rule__ImpliesExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ImpliesExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImpliesExpressionAccess().getBooleanOperationLeftAction_1_0()); }
(

)
{ after(grammarAccess.getImpliesExpressionAccess().getBooleanOperationLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ImpliesExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ImpliesExpression__Group_1__1__Impl
	rule__ImpliesExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ImpliesExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImpliesExpressionAccess().getOperatorAssignment_1_1()); }
(rule__ImpliesExpression__OperatorAssignment_1_1)
{ after(grammarAccess.getImpliesExpressionAccess().getOperatorAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ImpliesExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ImpliesExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ImpliesExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImpliesExpressionAccess().getRightAssignment_1_2()); }
(rule__ImpliesExpression__RightAssignment_1_2)
{ after(grammarAccess.getImpliesExpressionAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__RelationalExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelationalExpression__Group__0__Impl
	rule__RelationalExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getAdditiveExpressionParserRuleCall_0()); }
	ruleAdditiveExpression
{ after(grammarAccess.getRelationalExpressionAccess().getAdditiveExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RelationalExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelationalExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getGroup_1()); }
(rule__RelationalExpression__Group_1__0)*
{ after(grammarAccess.getRelationalExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__RelationalExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelationalExpression__Group_1__0__Impl
	rule__RelationalExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getBooleanOperationLeftAction_1_0()); }
(

)
{ after(grammarAccess.getRelationalExpressionAccess().getBooleanOperationLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RelationalExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelationalExpression__Group_1__1__Impl
	rule__RelationalExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getOperatorAssignment_1_1()); }
(rule__RelationalExpression__OperatorAssignment_1_1)
{ after(grammarAccess.getRelationalExpressionAccess().getOperatorAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RelationalExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RelationalExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getRightAssignment_1_2()); }
(rule__RelationalExpression__RightAssignment_1_2)
{ after(grammarAccess.getRelationalExpressionAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__AdditiveExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditiveExpression__Group__0__Impl
	rule__AdditiveExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getMultiplicativeExpressionParserRuleCall_0()); }
	ruleMultiplicativeExpression
{ after(grammarAccess.getAdditiveExpressionAccess().getMultiplicativeExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AdditiveExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditiveExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getGroup_1()); }
(rule__AdditiveExpression__Group_1__0)*
{ after(grammarAccess.getAdditiveExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AdditiveExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditiveExpression__Group_1__0__Impl
	rule__AdditiveExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getOperationCallParamsAction_1_0()); }
(

)
{ after(grammarAccess.getAdditiveExpressionAccess().getOperationCallParamsAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AdditiveExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditiveExpression__Group_1__1__Impl
	rule__AdditiveExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getNameAssignment_1_1()); }
(rule__AdditiveExpression__NameAssignment_1_1)
{ after(grammarAccess.getAdditiveExpressionAccess().getNameAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AdditiveExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditiveExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getParamsAssignment_1_2()); }
(rule__AdditiveExpression__ParamsAssignment_1_2)
{ after(grammarAccess.getAdditiveExpressionAccess().getParamsAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__MultiplicativeExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicativeExpression__Group__0__Impl
	rule__MultiplicativeExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getUnaryOrInfixExpressionParserRuleCall_0()); }
	ruleUnaryOrInfixExpression
{ after(grammarAccess.getMultiplicativeExpressionAccess().getUnaryOrInfixExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplicativeExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicativeExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getGroup_1()); }
(rule__MultiplicativeExpression__Group_1__0)*
{ after(grammarAccess.getMultiplicativeExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MultiplicativeExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicativeExpression__Group_1__0__Impl
	rule__MultiplicativeExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getOperationCallParamsAction_1_0()); }
(

)
{ after(grammarAccess.getMultiplicativeExpressionAccess().getOperationCallParamsAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplicativeExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicativeExpression__Group_1__1__Impl
	rule__MultiplicativeExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getNameAssignment_1_1()); }
(rule__MultiplicativeExpression__NameAssignment_1_1)
{ after(grammarAccess.getMultiplicativeExpressionAccess().getNameAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplicativeExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicativeExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getParamsAssignment_1_2()); }
(rule__MultiplicativeExpression__ParamsAssignment_1_2)
{ after(grammarAccess.getMultiplicativeExpressionAccess().getParamsAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__UnaryExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnaryExpression__Group__0__Impl
	rule__UnaryExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExpressionAccess().getNameAssignment_0()); }
(rule__UnaryExpression__NameAssignment_0)
{ after(grammarAccess.getUnaryExpressionAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnaryExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnaryExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExpressionAccess().getParamsAssignment_1()); }
(rule__UnaryExpression__ParamsAssignment_1)
{ after(grammarAccess.getUnaryExpressionAccess().getParamsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__InfixExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InfixExpression__Group__0__Impl
	rule__InfixExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InfixExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInfixExpressionAccess().getPrimaryExpressionParserRuleCall_0()); }
	rulePrimaryExpression
{ after(grammarAccess.getInfixExpressionAccess().getPrimaryExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InfixExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InfixExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InfixExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInfixExpressionAccess().getAlternatives_1()); }
(rule__InfixExpression__Alternatives_1)*
{ after(grammarAccess.getInfixExpressionAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__InfixExpression__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InfixExpression__Group_1_0__0__Impl
	rule__InfixExpression__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InfixExpression__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInfixExpressionAccess().getOperationCallTargetAction_1_0_0()); }
(

)
{ after(grammarAccess.getInfixExpressionAccess().getOperationCallTargetAction_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InfixExpression__Group_1_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InfixExpression__Group_1_0__1__Impl
	rule__InfixExpression__Group_1_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__InfixExpression__Group_1_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInfixExpressionAccess().getFullStopKeyword_1_0_1()); }

	'.' 

{ after(grammarAccess.getInfixExpressionAccess().getFullStopKeyword_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InfixExpression__Group_1_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InfixExpression__Group_1_0__2__Impl
	rule__InfixExpression__Group_1_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__InfixExpression__Group_1_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInfixExpressionAccess().getNameAssignment_1_0_2()); }
(rule__InfixExpression__NameAssignment_1_0_2)
{ after(grammarAccess.getInfixExpressionAccess().getNameAssignment_1_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InfixExpression__Group_1_0__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InfixExpression__Group_1_0__3__Impl
	rule__InfixExpression__Group_1_0__4
;
finally {
	restoreStackSize(stackSize);
}

rule__InfixExpression__Group_1_0__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInfixExpressionAccess().getLeftParenthesisKeyword_1_0_3()); }

	'(' 

{ after(grammarAccess.getInfixExpressionAccess().getLeftParenthesisKeyword_1_0_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InfixExpression__Group_1_0__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InfixExpression__Group_1_0__4__Impl
	rule__InfixExpression__Group_1_0__5
;
finally {
	restoreStackSize(stackSize);
}

rule__InfixExpression__Group_1_0__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInfixExpressionAccess().getGroup_1_0_4()); }
(rule__InfixExpression__Group_1_0_4__0)?
{ after(grammarAccess.getInfixExpressionAccess().getGroup_1_0_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InfixExpression__Group_1_0__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InfixExpression__Group_1_0__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InfixExpression__Group_1_0__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInfixExpressionAccess().getRightParenthesisKeyword_1_0_5()); }

	')' 

{ after(grammarAccess.getInfixExpressionAccess().getRightParenthesisKeyword_1_0_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__InfixExpression__Group_1_0_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InfixExpression__Group_1_0_4__0__Impl
	rule__InfixExpression__Group_1_0_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InfixExpression__Group_1_0_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInfixExpressionAccess().getParamsAssignment_1_0_4_0()); }
(rule__InfixExpression__ParamsAssignment_1_0_4_0)
{ after(grammarAccess.getInfixExpressionAccess().getParamsAssignment_1_0_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InfixExpression__Group_1_0_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InfixExpression__Group_1_0_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InfixExpression__Group_1_0_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInfixExpressionAccess().getGroup_1_0_4_1()); }
(rule__InfixExpression__Group_1_0_4_1__0)*
{ after(grammarAccess.getInfixExpressionAccess().getGroup_1_0_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__InfixExpression__Group_1_0_4_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InfixExpression__Group_1_0_4_1__0__Impl
	rule__InfixExpression__Group_1_0_4_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InfixExpression__Group_1_0_4_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInfixExpressionAccess().getCommaKeyword_1_0_4_1_0()); }

	',' 

{ after(grammarAccess.getInfixExpressionAccess().getCommaKeyword_1_0_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InfixExpression__Group_1_0_4_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InfixExpression__Group_1_0_4_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InfixExpression__Group_1_0_4_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInfixExpressionAccess().getParamsAssignment_1_0_4_1_1()); }
(rule__InfixExpression__ParamsAssignment_1_0_4_1_1)
{ after(grammarAccess.getInfixExpressionAccess().getParamsAssignment_1_0_4_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__InfixExpression__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InfixExpression__Group_1_1__0__Impl
	rule__InfixExpression__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InfixExpression__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInfixExpressionAccess().getFeatureCallTargetAction_1_1_0()); }
(

)
{ after(grammarAccess.getInfixExpressionAccess().getFeatureCallTargetAction_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InfixExpression__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InfixExpression__Group_1_1__1__Impl
	rule__InfixExpression__Group_1_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__InfixExpression__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInfixExpressionAccess().getFullStopKeyword_1_1_1()); }

	'.' 

{ after(grammarAccess.getInfixExpressionAccess().getFullStopKeyword_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InfixExpression__Group_1_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InfixExpression__Group_1_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InfixExpression__Group_1_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInfixExpressionAccess().getTypeAssignment_1_1_2()); }
(rule__InfixExpression__TypeAssignment_1_1_2)
{ after(grammarAccess.getInfixExpressionAccess().getTypeAssignment_1_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__InfixExpression__Group_1_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InfixExpression__Group_1_2__0__Impl
	rule__InfixExpression__Group_1_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InfixExpression__Group_1_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInfixExpressionAccess().getTypeSelectExpressionTargetAction_1_2_0()); }
(

)
{ after(grammarAccess.getInfixExpressionAccess().getTypeSelectExpressionTargetAction_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InfixExpression__Group_1_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InfixExpression__Group_1_2__1__Impl
	rule__InfixExpression__Group_1_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__InfixExpression__Group_1_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInfixExpressionAccess().getFullStopKeyword_1_2_1()); }

	'.' 

{ after(grammarAccess.getInfixExpressionAccess().getFullStopKeyword_1_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InfixExpression__Group_1_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InfixExpression__Group_1_2__2__Impl
	rule__InfixExpression__Group_1_2__3
;
finally {
	restoreStackSize(stackSize);
}

rule__InfixExpression__Group_1_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInfixExpressionAccess().getNameAssignment_1_2_2()); }
(rule__InfixExpression__NameAssignment_1_2_2)
{ after(grammarAccess.getInfixExpressionAccess().getNameAssignment_1_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InfixExpression__Group_1_2__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InfixExpression__Group_1_2__3__Impl
	rule__InfixExpression__Group_1_2__4
;
finally {
	restoreStackSize(stackSize);
}

rule__InfixExpression__Group_1_2__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInfixExpressionAccess().getLeftParenthesisKeyword_1_2_3()); }

	'(' 

{ after(grammarAccess.getInfixExpressionAccess().getLeftParenthesisKeyword_1_2_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InfixExpression__Group_1_2__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InfixExpression__Group_1_2__4__Impl
	rule__InfixExpression__Group_1_2__5
;
finally {
	restoreStackSize(stackSize);
}

rule__InfixExpression__Group_1_2__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInfixExpressionAccess().getTypeAssignment_1_2_4()); }
(rule__InfixExpression__TypeAssignment_1_2_4)
{ after(grammarAccess.getInfixExpressionAccess().getTypeAssignment_1_2_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InfixExpression__Group_1_2__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InfixExpression__Group_1_2__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InfixExpression__Group_1_2__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInfixExpressionAccess().getRightParenthesisKeyword_1_2_5()); }

	')' 

{ after(grammarAccess.getInfixExpressionAccess().getRightParenthesisKeyword_1_2_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__InfixExpression__Group_1_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InfixExpression__Group_1_3__0__Impl
	rule__InfixExpression__Group_1_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InfixExpression__Group_1_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInfixExpressionAccess().getCollectionExpressionTargetAction_1_3_0()); }
(

)
{ after(grammarAccess.getInfixExpressionAccess().getCollectionExpressionTargetAction_1_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InfixExpression__Group_1_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InfixExpression__Group_1_3__1__Impl
	rule__InfixExpression__Group_1_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__InfixExpression__Group_1_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInfixExpressionAccess().getFullStopKeyword_1_3_1()); }

	'.' 

{ after(grammarAccess.getInfixExpressionAccess().getFullStopKeyword_1_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InfixExpression__Group_1_3__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InfixExpression__Group_1_3__2__Impl
	rule__InfixExpression__Group_1_3__3
;
finally {
	restoreStackSize(stackSize);
}

rule__InfixExpression__Group_1_3__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInfixExpressionAccess().getNameAssignment_1_3_2()); }
(rule__InfixExpression__NameAssignment_1_3_2)
{ after(grammarAccess.getInfixExpressionAccess().getNameAssignment_1_3_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InfixExpression__Group_1_3__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InfixExpression__Group_1_3__3__Impl
	rule__InfixExpression__Group_1_3__4
;
finally {
	restoreStackSize(stackSize);
}

rule__InfixExpression__Group_1_3__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInfixExpressionAccess().getLeftParenthesisKeyword_1_3_3()); }

	'(' 

{ after(grammarAccess.getInfixExpressionAccess().getLeftParenthesisKeyword_1_3_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InfixExpression__Group_1_3__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InfixExpression__Group_1_3__4__Impl
	rule__InfixExpression__Group_1_3__5
;
finally {
	restoreStackSize(stackSize);
}

rule__InfixExpression__Group_1_3__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInfixExpressionAccess().getGroup_1_3_4()); }
(rule__InfixExpression__Group_1_3_4__0)?
{ after(grammarAccess.getInfixExpressionAccess().getGroup_1_3_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InfixExpression__Group_1_3__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InfixExpression__Group_1_3__5__Impl
	rule__InfixExpression__Group_1_3__6
;
finally {
	restoreStackSize(stackSize);
}

rule__InfixExpression__Group_1_3__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInfixExpressionAccess().getExpAssignment_1_3_5()); }
(rule__InfixExpression__ExpAssignment_1_3_5)
{ after(grammarAccess.getInfixExpressionAccess().getExpAssignment_1_3_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InfixExpression__Group_1_3__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InfixExpression__Group_1_3__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InfixExpression__Group_1_3__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInfixExpressionAccess().getRightParenthesisKeyword_1_3_6()); }

	')' 

{ after(grammarAccess.getInfixExpressionAccess().getRightParenthesisKeyword_1_3_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__InfixExpression__Group_1_3_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InfixExpression__Group_1_3_4__0__Impl
	rule__InfixExpression__Group_1_3_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InfixExpression__Group_1_3_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInfixExpressionAccess().getVarAssignment_1_3_4_0()); }
(rule__InfixExpression__VarAssignment_1_3_4_0)
{ after(grammarAccess.getInfixExpressionAccess().getVarAssignment_1_3_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InfixExpression__Group_1_3_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InfixExpression__Group_1_3_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InfixExpression__Group_1_3_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInfixExpressionAccess().getVerticalLineKeyword_1_3_4_1()); }

	'|' 

{ after(grammarAccess.getInfixExpressionAccess().getVerticalLineKeyword_1_3_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ParanthesizedExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParanthesizedExpression__Group__0__Impl
	rule__ParanthesizedExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParanthesizedExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParanthesizedExpressionAccess().getLeftParenthesisKeyword_0()); }

	'(' 

{ after(grammarAccess.getParanthesizedExpressionAccess().getLeftParenthesisKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParanthesizedExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParanthesizedExpression__Group__1__Impl
	rule__ParanthesizedExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ParanthesizedExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParanthesizedExpressionAccess().getExpressionParserRuleCall_1()); }
	ruleExpression
{ after(grammarAccess.getParanthesizedExpressionAccess().getExpressionParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParanthesizedExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParanthesizedExpression__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParanthesizedExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParanthesizedExpressionAccess().getRightParenthesisKeyword_2()); }

	')' 

{ after(grammarAccess.getParanthesizedExpressionAccess().getRightParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__GlobalVarExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GlobalVarExpression__Group__0__Impl
	rule__GlobalVarExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GlobalVarExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGlobalVarExpressionAccess().getGLOBALVARKeyword_0()); }

	'GLOBALVAR' 

{ after(grammarAccess.getGlobalVarExpressionAccess().getGLOBALVARKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GlobalVarExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GlobalVarExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GlobalVarExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGlobalVarExpressionAccess().getNameAssignment_1()); }
(rule__GlobalVarExpression__NameAssignment_1)
{ after(grammarAccess.getGlobalVarExpressionAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__OperationCall__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OperationCall__Group__0__Impl
	rule__OperationCall__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationCall__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperationCallAccess().getNameAssignment_0()); }
(rule__OperationCall__NameAssignment_0)
{ after(grammarAccess.getOperationCallAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OperationCall__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OperationCall__Group__1__Impl
	rule__OperationCall__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationCall__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperationCallAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getOperationCallAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OperationCall__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OperationCall__Group__2__Impl
	rule__OperationCall__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationCall__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperationCallAccess().getGroup_2()); }
(rule__OperationCall__Group_2__0)?
{ after(grammarAccess.getOperationCallAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OperationCall__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OperationCall__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationCall__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperationCallAccess().getRightParenthesisKeyword_3()); }

	')' 

{ after(grammarAccess.getOperationCallAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__OperationCall__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OperationCall__Group_2__0__Impl
	rule__OperationCall__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationCall__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperationCallAccess().getParamsAssignment_2_0()); }
(rule__OperationCall__ParamsAssignment_2_0)
{ after(grammarAccess.getOperationCallAccess().getParamsAssignment_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OperationCall__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OperationCall__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationCall__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperationCallAccess().getGroup_2_1()); }
(rule__OperationCall__Group_2_1__0)*
{ after(grammarAccess.getOperationCallAccess().getGroup_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__OperationCall__Group_2_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OperationCall__Group_2_1__0__Impl
	rule__OperationCall__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationCall__Group_2_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperationCallAccess().getCommaKeyword_2_1_0()); }

	',' 

{ after(grammarAccess.getOperationCallAccess().getCommaKeyword_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OperationCall__Group_2_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OperationCall__Group_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OperationCall__Group_2_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperationCallAccess().getParamsAssignment_2_1_1()); }
(rule__OperationCall__ParamsAssignment_2_1_1)
{ after(grammarAccess.getOperationCallAccess().getParamsAssignment_2_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ListLiteral__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ListLiteral__Group__0__Impl
	rule__ListLiteral__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ListLiteral__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getListLiteralAccess().getListLiteralAction_0()); }
(

)
{ after(grammarAccess.getListLiteralAccess().getListLiteralAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ListLiteral__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ListLiteral__Group__1__Impl
	rule__ListLiteral__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ListLiteral__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getListLiteralAccess().getLeftCurlyBracketKeyword_1()); }

	'{' 

{ after(grammarAccess.getListLiteralAccess().getLeftCurlyBracketKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ListLiteral__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ListLiteral__Group__2__Impl
	rule__ListLiteral__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ListLiteral__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getListLiteralAccess().getGroup_2()); }
(rule__ListLiteral__Group_2__0)?
{ after(grammarAccess.getListLiteralAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ListLiteral__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ListLiteral__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ListLiteral__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getListLiteralAccess().getRightCurlyBracketKeyword_3()); }

	'}' 

{ after(grammarAccess.getListLiteralAccess().getRightCurlyBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__ListLiteral__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ListLiteral__Group_2__0__Impl
	rule__ListLiteral__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ListLiteral__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getListLiteralAccess().getElementsAssignment_2_0()); }
(rule__ListLiteral__ElementsAssignment_2_0)
{ after(grammarAccess.getListLiteralAccess().getElementsAssignment_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ListLiteral__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ListLiteral__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ListLiteral__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getListLiteralAccess().getGroup_2_1()); }
(rule__ListLiteral__Group_2_1__0)*
{ after(grammarAccess.getListLiteralAccess().getGroup_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ListLiteral__Group_2_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ListLiteral__Group_2_1__0__Impl
	rule__ListLiteral__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ListLiteral__Group_2_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getListLiteralAccess().getCommaKeyword_2_1_0()); }

	',' 

{ after(grammarAccess.getListLiteralAccess().getCommaKeyword_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ListLiteral__Group_2_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ListLiteral__Group_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ListLiteral__Group_2_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getListLiteralAccess().getElementsAssignment_2_1_1()); }
(rule__ListLiteral__ElementsAssignment_2_1_1)
{ after(grammarAccess.getListLiteralAccess().getElementsAssignment_2_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ConstructorCallExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConstructorCallExpression__Group__0__Impl
	rule__ConstructorCallExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstructorCallExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstructorCallExpressionAccess().getNewKeyword_0()); }

	'new' 

{ after(grammarAccess.getConstructorCallExpressionAccess().getNewKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConstructorCallExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConstructorCallExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConstructorCallExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstructorCallExpressionAccess().getTypeAssignment_1()); }
(rule__ConstructorCallExpression__TypeAssignment_1)
{ after(grammarAccess.getConstructorCallExpressionAccess().getTypeAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__TypeSelectExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeSelectExpression__Group__0__Impl
	rule__TypeSelectExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeSelectExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeSelectExpressionAccess().getNameAssignment_0()); }
(rule__TypeSelectExpression__NameAssignment_0)
{ after(grammarAccess.getTypeSelectExpressionAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypeSelectExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeSelectExpression__Group__1__Impl
	rule__TypeSelectExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeSelectExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeSelectExpressionAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getTypeSelectExpressionAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypeSelectExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeSelectExpression__Group__2__Impl
	rule__TypeSelectExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeSelectExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeSelectExpressionAccess().getTypeAssignment_2()); }
(rule__TypeSelectExpression__TypeAssignment_2)
{ after(grammarAccess.getTypeSelectExpressionAccess().getTypeAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypeSelectExpression__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeSelectExpression__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeSelectExpression__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeSelectExpressionAccess().getRightParenthesisKeyword_3()); }

	')' 

{ after(grammarAccess.getTypeSelectExpressionAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__CollectionExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CollectionExpression__Group__0__Impl
	rule__CollectionExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CollectionExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCollectionExpressionAccess().getNameAssignment_0()); }
(rule__CollectionExpression__NameAssignment_0)
{ after(grammarAccess.getCollectionExpressionAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CollectionExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CollectionExpression__Group__1__Impl
	rule__CollectionExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CollectionExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCollectionExpressionAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getCollectionExpressionAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CollectionExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CollectionExpression__Group__2__Impl
	rule__CollectionExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__CollectionExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCollectionExpressionAccess().getGroup_2()); }
(rule__CollectionExpression__Group_2__0)?
{ after(grammarAccess.getCollectionExpressionAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CollectionExpression__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CollectionExpression__Group__3__Impl
	rule__CollectionExpression__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__CollectionExpression__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCollectionExpressionAccess().getExpAssignment_3()); }
(rule__CollectionExpression__ExpAssignment_3)
{ after(grammarAccess.getCollectionExpressionAccess().getExpAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CollectionExpression__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CollectionExpression__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CollectionExpression__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCollectionExpressionAccess().getRightParenthesisKeyword_4()); }

	')' 

{ after(grammarAccess.getCollectionExpressionAccess().getRightParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__CollectionExpression__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CollectionExpression__Group_2__0__Impl
	rule__CollectionExpression__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CollectionExpression__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCollectionExpressionAccess().getVarAssignment_2_0()); }
(rule__CollectionExpression__VarAssignment_2_0)
{ after(grammarAccess.getCollectionExpressionAccess().getVarAssignment_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CollectionExpression__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CollectionExpression__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CollectionExpression__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCollectionExpressionAccess().getVerticalLineKeyword_2_1()); }

	'|' 

{ after(grammarAccess.getCollectionExpressionAccess().getVerticalLineKeyword_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__CollectionType__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CollectionType__Group__0__Impl
	rule__CollectionType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CollectionType__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCollectionTypeAccess().getClAssignment_0()); }
(rule__CollectionType__ClAssignment_0)
{ after(grammarAccess.getCollectionTypeAccess().getClAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CollectionType__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CollectionType__Group__1__Impl
	rule__CollectionType__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CollectionType__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCollectionTypeAccess().getLeftSquareBracketKeyword_1()); }

	'[' 

{ after(grammarAccess.getCollectionTypeAccess().getLeftSquareBracketKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CollectionType__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CollectionType__Group__2__Impl
	rule__CollectionType__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__CollectionType__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCollectionTypeAccess().getId1Assignment_2()); }
(rule__CollectionType__Id1Assignment_2)
{ after(grammarAccess.getCollectionTypeAccess().getId1Assignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CollectionType__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CollectionType__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CollectionType__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCollectionTypeAccess().getRightSquareBracketKeyword_3()); }

	']' 

{ after(grammarAccess.getCollectionTypeAccess().getRightSquareBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__SimpleType__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimpleType__Group__0__Impl
	rule__SimpleType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleType__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleTypeAccess().getIdAssignment_0()); }
(rule__SimpleType__IdAssignment_0)
{ after(grammarAccess.getSimpleTypeAccess().getIdAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SimpleType__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimpleType__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleType__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleTypeAccess().getGroup_1()); }
(rule__SimpleType__Group_1__0)*
{ after(grammarAccess.getSimpleTypeAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SimpleType__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimpleType__Group_1__0__Impl
	rule__SimpleType__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleType__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleTypeAccess().getColonColonKeyword_1_0()); }

	'::' 

{ after(grammarAccess.getSimpleTypeAccess().getColonColonKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SimpleType__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimpleType__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleType__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleTypeAccess().getIdAssignment_1_1()); }
(rule__SimpleType__IdAssignment_1_1)
{ after(grammarAccess.getSimpleTypeAccess().getIdAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__ExportModel__ExtensionAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExportModelAccess().getExtensionExtensionKeyword_0_1_0()); }
(
{ before(grammarAccess.getExportModelAccess().getExtensionExtensionKeyword_0_1_0()); }

	'extension' 

{ after(grammarAccess.getExportModelAccess().getExtensionExtensionKeyword_0_1_0()); }
)

{ after(grammarAccess.getExportModelAccess().getExtensionExtensionKeyword_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExportModel__NameAssignment_0_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExportModelAccess().getNameIDTerminalRuleCall_0_2_0()); }
	RULE_ID{ after(grammarAccess.getExportModelAccess().getNameIDTerminalRuleCall_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExportModel__TargetGrammarAssignment_0_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExportModelAccess().getTargetGrammarGrammarCrossReference_0_4_0()); }
(
{ before(grammarAccess.getExportModelAccess().getTargetGrammarGrammarQualifiedIDParserRuleCall_0_4_0_1()); }
	ruleQualifiedID{ after(grammarAccess.getExportModelAccess().getTargetGrammarGrammarQualifiedIDParserRuleCall_0_4_0_1()); }
)
{ after(grammarAccess.getExportModelAccess().getTargetGrammarGrammarCrossReference_0_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExportModel__ImportsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExportModelAccess().getImportsImportParserRuleCall_1_0()); }
	ruleImport{ after(grammarAccess.getExportModelAccess().getImportsImportParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExportModel__ExtensionsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExportModelAccess().getExtensionsExtensionParserRuleCall_2_0()); }
	ruleExtension{ after(grammarAccess.getExportModelAccess().getExtensionsExtensionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExportModel__InterfacesAssignment_3_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExportModelAccess().getInterfacesInterfaceParserRuleCall_3_2_0()); }
	ruleInterface{ after(grammarAccess.getExportModelAccess().getInterfacesInterfaceParserRuleCall_3_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExportModel__ExportsAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExportModelAccess().getExportsExportParserRuleCall_4_0()); }
	ruleExport{ after(grammarAccess.getExportModelAccess().getExportsExportParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Import__PackageAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getPackageEPackageCrossReference_1_0()); }
(
{ before(grammarAccess.getImportAccess().getPackageEPackageSTRINGTerminalRuleCall_1_0_1()); }
	RULE_STRING{ after(grammarAccess.getImportAccess().getPackageEPackageSTRINGTerminalRuleCall_1_0_1()); }
)
{ after(grammarAccess.getImportAccess().getPackageEPackageCrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Import__NameAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getNameIDTerminalRuleCall_2_1_0()); }
	RULE_ID{ after(grammarAccess.getImportAccess().getNameIDTerminalRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Extension__ExtensionAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExtensionAccess().getExtensionQualifiedIDParserRuleCall_1_0()); }
	ruleQualifiedID{ after(grammarAccess.getExtensionAccess().getExtensionQualifiedIDParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Interface__TypeAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceAccess().getTypeEClassCrossReference_0_0()); }
(
{ before(grammarAccess.getInterfaceAccess().getTypeEClassQualifiedIDParserRuleCall_0_0_1()); }
	ruleQualifiedID{ after(grammarAccess.getInterfaceAccess().getTypeEClassQualifiedIDParserRuleCall_0_0_1()); }
)
{ after(grammarAccess.getInterfaceAccess().getTypeEClassCrossReference_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Interface__GuardAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceAccess().getGuardExpressionParserRuleCall_1_1_0()); }
	ruleExpression{ after(grammarAccess.getInterfaceAccess().getGuardExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Interface__ItemsAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceAccess().getItemsInterfaceItemParserRuleCall_2_1_0()); }
	ruleInterfaceItem{ after(grammarAccess.getInterfaceAccess().getItemsInterfaceItemParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Interface__ItemsAssignment_2_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceAccess().getItemsInterfaceItemParserRuleCall_2_2_1_0()); }
	ruleInterfaceItem{ after(grammarAccess.getInterfaceAccess().getItemsInterfaceItemParserRuleCall_2_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceField__UnorderedAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceFieldAccess().getUnorderedPlusSignKeyword_0_0()); }
(
{ before(grammarAccess.getInterfaceFieldAccess().getUnorderedPlusSignKeyword_0_0()); }

	'+' 

{ after(grammarAccess.getInterfaceFieldAccess().getUnorderedPlusSignKeyword_0_0()); }
)

{ after(grammarAccess.getInterfaceFieldAccess().getUnorderedPlusSignKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceField__FieldAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceFieldAccess().getFieldEStructuralFeatureCrossReference_1_0()); }
(
{ before(grammarAccess.getInterfaceFieldAccess().getFieldEStructuralFeatureIDTerminalRuleCall_1_0_1()); }
	RULE_ID{ after(grammarAccess.getInterfaceFieldAccess().getFieldEStructuralFeatureIDTerminalRuleCall_1_0_1()); }
)
{ after(grammarAccess.getInterfaceFieldAccess().getFieldEStructuralFeatureCrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceNavigation__UnorderedAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceNavigationAccess().getUnorderedPlusSignKeyword_1_0()); }
(
{ before(grammarAccess.getInterfaceNavigationAccess().getUnorderedPlusSignKeyword_1_0()); }

	'+' 

{ after(grammarAccess.getInterfaceNavigationAccess().getUnorderedPlusSignKeyword_1_0()); }
)

{ after(grammarAccess.getInterfaceNavigationAccess().getUnorderedPlusSignKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceNavigation__RefAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceNavigationAccess().getRefEReferenceCrossReference_2_0()); }
(
{ before(grammarAccess.getInterfaceNavigationAccess().getRefEReferenceIDTerminalRuleCall_2_0_1()); }
	RULE_ID{ after(grammarAccess.getInterfaceNavigationAccess().getRefEReferenceIDTerminalRuleCall_2_0_1()); }
)
{ after(grammarAccess.getInterfaceNavigationAccess().getRefEReferenceCrossReference_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceExpression__RefAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceExpressionAccess().getRefCommercialAtKeyword_1_0()); }
(
{ before(grammarAccess.getInterfaceExpressionAccess().getRefCommercialAtKeyword_1_0()); }

	'@' 

{ after(grammarAccess.getInterfaceExpressionAccess().getRefCommercialAtKeyword_1_0()); }
)

{ after(grammarAccess.getInterfaceExpressionAccess().getRefCommercialAtKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceExpression__UnorderedAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceExpressionAccess().getUnorderedPlusSignKeyword_2_0()); }
(
{ before(grammarAccess.getInterfaceExpressionAccess().getUnorderedPlusSignKeyword_2_0()); }

	'+' 

{ after(grammarAccess.getInterfaceExpressionAccess().getUnorderedPlusSignKeyword_2_0()); }
)

{ after(grammarAccess.getInterfaceExpressionAccess().getUnorderedPlusSignKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InterfaceExpression__ExprAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInterfaceExpressionAccess().getExprExpressionParserRuleCall_4_0()); }
	ruleExpression{ after(grammarAccess.getInterfaceExpressionAccess().getExprExpressionParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Export__LookupAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExportAccess().getLookupLookupKeyword_1_0_0()); }
(
{ before(grammarAccess.getExportAccess().getLookupLookupKeyword_1_0_0()); }

	'lookup' 

{ after(grammarAccess.getExportAccess().getLookupLookupKeyword_1_0_0()); }
)

{ after(grammarAccess.getExportAccess().getLookupLookupKeyword_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Export__LookupPredicateAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExportAccess().getLookupPredicateExpressionParserRuleCall_1_1_1_0()); }
	ruleExpression{ after(grammarAccess.getExportAccess().getLookupPredicateExpressionParserRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Export__TypeAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExportAccess().getTypeEClassCrossReference_2_0()); }
(
{ before(grammarAccess.getExportAccess().getTypeEClassQualifiedIDParserRuleCall_2_0_1()); }
	ruleQualifiedID{ after(grammarAccess.getExportAccess().getTypeEClassQualifiedIDParserRuleCall_2_0_1()); }
)
{ after(grammarAccess.getExportAccess().getTypeEClassCrossReference_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Export__QualifiedNameAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExportAccess().getQualifiedNameQualifiedKeyword_3_1_0()); }
(
{ before(grammarAccess.getExportAccess().getQualifiedNameQualifiedKeyword_3_1_0()); }

	'qualified' 

{ after(grammarAccess.getExportAccess().getQualifiedNameQualifiedKeyword_3_1_0()); }
)

{ after(grammarAccess.getExportAccess().getQualifiedNameQualifiedKeyword_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Export__NamingAssignment_3_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExportAccess().getNamingExpressionParserRuleCall_3_2_0()); }
	ruleExpression{ after(grammarAccess.getExportAccess().getNamingExpressionParserRuleCall_3_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Export__GuardAssignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExportAccess().getGuardExpressionParserRuleCall_4_1_0()); }
	ruleExpression{ after(grammarAccess.getExportAccess().getGuardExpressionParserRuleCall_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Export__FragmentUniqueAssignment_6_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExportAccess().getFragmentUniqueUniqueKeyword_6_2_0()); }
(
{ before(grammarAccess.getExportAccess().getFragmentUniqueUniqueKeyword_6_2_0()); }

	'unique' 

{ after(grammarAccess.getExportAccess().getFragmentUniqueUniqueKeyword_6_2_0()); }
)

{ after(grammarAccess.getExportAccess().getFragmentUniqueUniqueKeyword_6_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Export__FragmentAttributeAssignment_6_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExportAccess().getFragmentAttributeEAttributeCrossReference_6_5_0()); }
(
{ before(grammarAccess.getExportAccess().getFragmentAttributeEAttributeIDTerminalRuleCall_6_5_0_1()); }
	RULE_ID{ after(grammarAccess.getExportAccess().getFragmentAttributeEAttributeIDTerminalRuleCall_6_5_0_1()); }
)
{ after(grammarAccess.getExportAccess().getFragmentAttributeEAttributeCrossReference_6_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Export__FingerprintAssignment_7_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExportAccess().getFingerprintObjectFingerprintKeyword_7_0_0_0()); }
(
{ before(grammarAccess.getExportAccess().getFingerprintObjectFingerprintKeyword_7_0_0_0()); }

	'object-fingerprint' 

{ after(grammarAccess.getExportAccess().getFingerprintObjectFingerprintKeyword_7_0_0_0()); }
)

{ after(grammarAccess.getExportAccess().getFingerprintObjectFingerprintKeyword_7_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Export__ResourceFingerprintAssignment_7_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExportAccess().getResourceFingerprintResourceFingerprintKeyword_7_0_1_0()); }
(
{ before(grammarAccess.getExportAccess().getResourceFingerprintResourceFingerprintKeyword_7_0_1_0()); }

	'resource-fingerprint' 

{ after(grammarAccess.getExportAccess().getResourceFingerprintResourceFingerprintKeyword_7_0_1_0()); }
)

{ after(grammarAccess.getExportAccess().getResourceFingerprintResourceFingerprintKeyword_7_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Export__AttributesAssignment_8_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExportAccess().getAttributesAttributeParserRuleCall_8_0_1_0()); }
	ruleAttribute{ after(grammarAccess.getExportAccess().getAttributesAttributeParserRuleCall_8_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Export__AttributesAssignment_8_0_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExportAccess().getAttributesAttributeParserRuleCall_8_0_2_1_0()); }
	ruleAttribute{ after(grammarAccess.getExportAccess().getAttributesAttributeParserRuleCall_8_0_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Export__UserDataAssignment_8_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExportAccess().getUserDataUserDataParserRuleCall_8_1_1_0()); }
	ruleUserData{ after(grammarAccess.getExportAccess().getUserDataUserDataParserRuleCall_8_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Export__UserDataAssignment_8_1_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExportAccess().getUserDataUserDataParserRuleCall_8_1_2_1_0()); }
	ruleUserData{ after(grammarAccess.getExportAccess().getUserDataUserDataParserRuleCall_8_1_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UserData__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUserDataAccess().getNameIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getUserDataAccess().getNameIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UserData__ExprAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUserDataAccess().getExprExpressionParserRuleCall_2_0()); }
	ruleExpression{ after(grammarAccess.getUserDataAccess().getExprExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__AttributeAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAttributeAccess().getAttributeEAttributeCrossReference_0()); }
(
{ before(grammarAccess.getAttributeAccess().getAttributeEAttributeIDTerminalRuleCall_0_1()); }
	RULE_ID{ after(grammarAccess.getAttributeAccess().getAttributeEAttributeIDTerminalRuleCall_0_1()); }
)
{ after(grammarAccess.getAttributeAccess().getAttributeEAttributeCrossReference_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LetExpression__IdentifierAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLetExpressionAccess().getIdentifierIdentifierParserRuleCall_1_0()); }
	ruleIdentifier{ after(grammarAccess.getLetExpressionAccess().getIdentifierIdentifierParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LetExpression__VarExprAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLetExpressionAccess().getVarExprExpressionParserRuleCall_3_0()); }
	ruleExpression{ after(grammarAccess.getLetExpressionAccess().getVarExprExpressionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LetExpression__TargetAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLetExpressionAccess().getTargetExpressionParserRuleCall_5_0()); }
	ruleExpression{ after(grammarAccess.getLetExpressionAccess().getTargetExpressionParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CastedExpression__TypeAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCastedExpressionAccess().getTypeTypeParserRuleCall_1_0()); }
	ruleType{ after(grammarAccess.getCastedExpressionAccess().getTypeTypeParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CastedExpression__TargetAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCastedExpressionAccess().getTargetExpressionParserRuleCall_3_0()); }
	ruleExpression{ after(grammarAccess.getCastedExpressionAccess().getTargetExpressionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ChainExpression__NextAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getChainExpressionAccess().getNextChainedExpressionParserRuleCall_1_2_0()); }
	ruleChainedExpression{ after(grammarAccess.getChainExpressionAccess().getNextChainedExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpressionTri__ThenPartAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfExpressionTriAccess().getThenPartChainedExpressionParserRuleCall_1_2_0()); }
	ruleChainedExpression{ after(grammarAccess.getIfExpressionTriAccess().getThenPartChainedExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpressionTri__ElsePartAssignment_1_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfExpressionTriAccess().getElsePartChainedExpressionParserRuleCall_1_4_0()); }
	ruleChainedExpression{ after(grammarAccess.getIfExpressionTriAccess().getElsePartChainedExpressionParserRuleCall_1_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpressionKw__ConditionAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfExpressionKwAccess().getConditionChainedExpressionParserRuleCall_1_0()); }
	ruleChainedExpression{ after(grammarAccess.getIfExpressionKwAccess().getConditionChainedExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpressionKw__ThenPartAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfExpressionKwAccess().getThenPartChainedExpressionParserRuleCall_3_0()); }
	ruleChainedExpression{ after(grammarAccess.getIfExpressionKwAccess().getThenPartChainedExpressionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpressionKw__ElsePartAssignment_4_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfExpressionKwAccess().getElsePartChainedExpressionParserRuleCall_4_0_1_0()); }
	ruleChainedExpression{ after(grammarAccess.getIfExpressionKwAccess().getElsePartChainedExpressionParserRuleCall_4_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchExpression__SwitchExprAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchExpressionAccess().getSwitchExprOrExpressionParserRuleCall_1_1_0()); }
	ruleOrExpression{ after(grammarAccess.getSwitchExpressionAccess().getSwitchExprOrExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchExpression__CaseAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchExpressionAccess().getCaseCaseParserRuleCall_3_0()); }
	ruleCase{ after(grammarAccess.getSwitchExpressionAccess().getCaseCaseParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchExpression__DefaultExprAssignment_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchExpressionAccess().getDefaultExprOrExpressionParserRuleCall_6_0()); }
	ruleOrExpression{ after(grammarAccess.getSwitchExpressionAccess().getDefaultExprOrExpressionParserRuleCall_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Case__ConditionAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCaseAccess().getConditionOrExpressionParserRuleCall_1_0()); }
	ruleOrExpression{ after(grammarAccess.getCaseAccess().getConditionOrExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Case__ThenParAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCaseAccess().getThenParOrExpressionParserRuleCall_3_0()); }
	ruleOrExpression{ after(grammarAccess.getCaseAccess().getThenParOrExpressionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__OperatorAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getOperatorVerticalLineVerticalLineKeyword_1_1_0()); }
(
{ before(grammarAccess.getOrExpressionAccess().getOperatorVerticalLineVerticalLineKeyword_1_1_0()); }

	'||' 

{ after(grammarAccess.getOrExpressionAccess().getOperatorVerticalLineVerticalLineKeyword_1_1_0()); }
)

{ after(grammarAccess.getOrExpressionAccess().getOperatorVerticalLineVerticalLineKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrExpressionAccess().getRightAndExpressionParserRuleCall_1_2_0()); }
	ruleAndExpression{ after(grammarAccess.getOrExpressionAccess().getRightAndExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__OperatorAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getOperatorAmpersandAmpersandKeyword_1_1_0()); }
(
{ before(grammarAccess.getAndExpressionAccess().getOperatorAmpersandAmpersandKeyword_1_1_0()); }

	'&&' 

{ after(grammarAccess.getAndExpressionAccess().getOperatorAmpersandAmpersandKeyword_1_1_0()); }
)

{ after(grammarAccess.getAndExpressionAccess().getOperatorAmpersandAmpersandKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getRightImpliesExpressionParserRuleCall_1_2_0()); }
	ruleImpliesExpression{ after(grammarAccess.getAndExpressionAccess().getRightImpliesExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ImpliesExpression__OperatorAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImpliesExpressionAccess().getOperatorImpliesKeyword_1_1_0()); }
(
{ before(grammarAccess.getImpliesExpressionAccess().getOperatorImpliesKeyword_1_1_0()); }

	'implies' 

{ after(grammarAccess.getImpliesExpressionAccess().getOperatorImpliesKeyword_1_1_0()); }
)

{ after(grammarAccess.getImpliesExpressionAccess().getOperatorImpliesKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ImpliesExpression__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImpliesExpressionAccess().getRightRelationalExpressionParserRuleCall_1_2_0()); }
	ruleRelationalExpression{ after(grammarAccess.getImpliesExpressionAccess().getRightRelationalExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__OperatorAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getOperatorAlternatives_1_1_0()); }
(rule__RelationalExpression__OperatorAlternatives_1_1_0)
{ after(grammarAccess.getRelationalExpressionAccess().getOperatorAlternatives_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpression__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelationalExpressionAccess().getRightAdditiveExpressionParserRuleCall_1_2_0()); }
	ruleAdditiveExpression{ after(grammarAccess.getRelationalExpressionAccess().getRightAdditiveExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__NameAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getNameAlternatives_1_1_0()); }
(rule__AdditiveExpression__NameAlternatives_1_1_0)
{ after(grammarAccess.getAdditiveExpressionAccess().getNameAlternatives_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__ParamsAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getParamsMultiplicativeExpressionParserRuleCall_1_2_0()); }
	ruleMultiplicativeExpression{ after(grammarAccess.getAdditiveExpressionAccess().getParamsMultiplicativeExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__NameAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getNameAlternatives_1_1_0()); }
(rule__MultiplicativeExpression__NameAlternatives_1_1_0)
{ after(grammarAccess.getMultiplicativeExpressionAccess().getNameAlternatives_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__ParamsAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getParamsUnaryOrInfixExpressionParserRuleCall_1_2_0()); }
	ruleUnaryOrInfixExpression{ after(grammarAccess.getMultiplicativeExpressionAccess().getParamsUnaryOrInfixExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExpressionAccess().getNameAlternatives_0_0()); }
(rule__UnaryExpression__NameAlternatives_0_0)
{ after(grammarAccess.getUnaryExpressionAccess().getNameAlternatives_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__ParamsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryExpressionAccess().getParamsInfixExpressionParserRuleCall_1_0()); }
	ruleInfixExpression{ after(grammarAccess.getUnaryExpressionAccess().getParamsInfixExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InfixExpression__NameAssignment_1_0_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInfixExpressionAccess().getNameIdentifierParserRuleCall_1_0_2_0()); }
	ruleIdentifier{ after(grammarAccess.getInfixExpressionAccess().getNameIdentifierParserRuleCall_1_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InfixExpression__ParamsAssignment_1_0_4_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInfixExpressionAccess().getParamsExpressionParserRuleCall_1_0_4_0_0()); }
	ruleExpression{ after(grammarAccess.getInfixExpressionAccess().getParamsExpressionParserRuleCall_1_0_4_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InfixExpression__ParamsAssignment_1_0_4_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInfixExpressionAccess().getParamsExpressionParserRuleCall_1_0_4_1_1_0()); }
	ruleExpression{ after(grammarAccess.getInfixExpressionAccess().getParamsExpressionParserRuleCall_1_0_4_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InfixExpression__TypeAssignment_1_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInfixExpressionAccess().getTypeTypeParserRuleCall_1_1_2_0()); }
	ruleType{ after(grammarAccess.getInfixExpressionAccess().getTypeTypeParserRuleCall_1_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InfixExpression__NameAssignment_1_2_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInfixExpressionAccess().getNameTypeSelectKeyword_1_2_2_0()); }
(
{ before(grammarAccess.getInfixExpressionAccess().getNameTypeSelectKeyword_1_2_2_0()); }

	'typeSelect' 

{ after(grammarAccess.getInfixExpressionAccess().getNameTypeSelectKeyword_1_2_2_0()); }
)

{ after(grammarAccess.getInfixExpressionAccess().getNameTypeSelectKeyword_1_2_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InfixExpression__TypeAssignment_1_2_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInfixExpressionAccess().getTypeTypeParserRuleCall_1_2_4_0()); }
	ruleType{ after(grammarAccess.getInfixExpressionAccess().getTypeTypeParserRuleCall_1_2_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InfixExpression__NameAssignment_1_3_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInfixExpressionAccess().getNameAlternatives_1_3_2_0()); }
(rule__InfixExpression__NameAlternatives_1_3_2_0)
{ after(grammarAccess.getInfixExpressionAccess().getNameAlternatives_1_3_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InfixExpression__VarAssignment_1_3_4_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInfixExpressionAccess().getVarIdentifierParserRuleCall_1_3_4_0_0()); }
	ruleIdentifier{ after(grammarAccess.getInfixExpressionAccess().getVarIdentifierParserRuleCall_1_3_4_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InfixExpression__ExpAssignment_1_3_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInfixExpressionAccess().getExpExpressionParserRuleCall_1_3_5_0()); }
	ruleExpression{ after(grammarAccess.getInfixExpressionAccess().getExpExpressionParserRuleCall_1_3_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanLiteral__ValAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanLiteralAccess().getValAlternatives_0()); }
(rule__BooleanLiteral__ValAlternatives_0)
{ after(grammarAccess.getBooleanLiteralAccess().getValAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerLiteral__ValAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerLiteralAccess().getValINTTerminalRuleCall_0()); }
	RULE_INT{ after(grammarAccess.getIntegerLiteralAccess().getValINTTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NullLiteral__ValAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNullLiteralAccess().getValNullKeyword_0()); }
(
{ before(grammarAccess.getNullLiteralAccess().getValNullKeyword_0()); }

	'null' 

{ after(grammarAccess.getNullLiteralAccess().getValNullKeyword_0()); }
)

{ after(grammarAccess.getNullLiteralAccess().getValNullKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RealLiteral__ValAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRealLiteralAccess().getValREALTerminalRuleCall_0()); }
	RULE_REAL{ after(grammarAccess.getRealLiteralAccess().getValREALTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StringLiteral__ValAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringLiteralAccess().getValSTRINGTerminalRuleCall_0()); }
	RULE_STRING{ after(grammarAccess.getStringLiteralAccess().getValSTRINGTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GlobalVarExpression__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGlobalVarExpressionAccess().getNameIdentifierParserRuleCall_1_0()); }
	ruleIdentifier{ after(grammarAccess.getGlobalVarExpressionAccess().getNameIdentifierParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FeatureCall__TypeAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFeatureCallAccess().getTypeTypeParserRuleCall_1_0()); }
	ruleType{ after(grammarAccess.getFeatureCallAccess().getTypeTypeParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OperationCall__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperationCallAccess().getNameIdentifierParserRuleCall_0_0()); }
	ruleIdentifier{ after(grammarAccess.getOperationCallAccess().getNameIdentifierParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OperationCall__ParamsAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperationCallAccess().getParamsExpressionParserRuleCall_2_0_0()); }
	ruleExpression{ after(grammarAccess.getOperationCallAccess().getParamsExpressionParserRuleCall_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OperationCall__ParamsAssignment_2_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperationCallAccess().getParamsExpressionParserRuleCall_2_1_1_0()); }
	ruleExpression{ after(grammarAccess.getOperationCallAccess().getParamsExpressionParserRuleCall_2_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ListLiteral__ElementsAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getListLiteralAccess().getElementsExpressionParserRuleCall_2_0_0()); }
	ruleExpression{ after(grammarAccess.getListLiteralAccess().getElementsExpressionParserRuleCall_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ListLiteral__ElementsAssignment_2_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getListLiteralAccess().getElementsExpressionParserRuleCall_2_1_1_0()); }
	ruleExpression{ after(grammarAccess.getListLiteralAccess().getElementsExpressionParserRuleCall_2_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConstructorCallExpression__TypeAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstructorCallExpressionAccess().getTypeSimpleTypeParserRuleCall_1_0()); }
	ruleSimpleType{ after(grammarAccess.getConstructorCallExpressionAccess().getTypeSimpleTypeParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeSelectExpression__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeSelectExpressionAccess().getNameTypeSelectKeyword_0_0()); }
(
{ before(grammarAccess.getTypeSelectExpressionAccess().getNameTypeSelectKeyword_0_0()); }

	'typeSelect' 

{ after(grammarAccess.getTypeSelectExpressionAccess().getNameTypeSelectKeyword_0_0()); }
)

{ after(grammarAccess.getTypeSelectExpressionAccess().getNameTypeSelectKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeSelectExpression__TypeAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeSelectExpressionAccess().getTypeTypeParserRuleCall_2_0()); }
	ruleType{ after(grammarAccess.getTypeSelectExpressionAccess().getTypeTypeParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CollectionExpression__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCollectionExpressionAccess().getNameAlternatives_0_0()); }
(rule__CollectionExpression__NameAlternatives_0_0)
{ after(grammarAccess.getCollectionExpressionAccess().getNameAlternatives_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CollectionExpression__VarAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCollectionExpressionAccess().getVarIdentifierParserRuleCall_2_0_0()); }
	ruleIdentifier{ after(grammarAccess.getCollectionExpressionAccess().getVarIdentifierParserRuleCall_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CollectionExpression__ExpAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCollectionExpressionAccess().getExpExpressionParserRuleCall_3_0()); }
	ruleExpression{ after(grammarAccess.getCollectionExpressionAccess().getExpExpressionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CollectionType__ClAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCollectionTypeAccess().getClAlternatives_0_0()); }
(rule__CollectionType__ClAlternatives_0_0)
{ after(grammarAccess.getCollectionTypeAccess().getClAlternatives_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CollectionType__Id1Assignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCollectionTypeAccess().getId1SimpleTypeParserRuleCall_2_0()); }
	ruleSimpleType{ after(grammarAccess.getCollectionTypeAccess().getId1SimpleTypeParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleType__IdAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleTypeAccess().getIdIdentifierParserRuleCall_0_0()); }
	ruleIdentifier{ after(grammarAccess.getSimpleTypeAccess().getIdIdentifierParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleType__IdAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleTypeAccess().getIdIdentifierParserRuleCall_1_1_0()); }
	ruleIdentifier{ after(grammarAccess.getSimpleTypeAccess().getIdIdentifierParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_REAL : ('0'..'9')* '.' ('0'..'9')*;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


