/*
 * generated by Xtext
 */
package com.avaloq.tools.ddk.check.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.xbase.annotations.services.XbaseWithAnnotationsGrammarAccess;
import org.eclipse.xtext.xbase.services.XbaseGrammarAccess;
import org.eclipse.xtext.xbase.services.XtypeGrammarAccess;

@Singleton
public class CheckGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class CheckCatalogElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CheckCatalog");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCheckCatalogAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPackageKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPackageNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPackageNameQualifiedNameParserRuleCall_2_0 = (RuleCall)cPackageNameAssignment_2.eContents().get(0);
		private final Assignment cImportsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cImportsXImportSectionParserRuleCall_3_0 = (RuleCall)cImportsAssignment_3.eContents().get(0);
		private final Assignment cFinalAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Keyword cFinalFinalKeyword_4_0 = (Keyword)cFinalAssignment_4.eContents().get(0);
		private final Keyword cCatalogKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cNameAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cNameValidIDParserRuleCall_6_0 = (RuleCall)cNameAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cForKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Keyword cGrammarKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cGrammarAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final CrossReference cGrammarGrammarCrossReference_7_2_0 = (CrossReference)cGrammarAssignment_7_2.eContents().get(0);
		private final RuleCall cGrammarGrammarQualifiedNameParserRuleCall_7_2_0_1 = (RuleCall)cGrammarGrammarCrossReference_7_2_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Alternatives cAlternatives_9 = (Alternatives)cGroup.eContents().get(9);
		private final Assignment cCategoriesAssignment_9_0 = (Assignment)cAlternatives_9.eContents().get(0);
		private final RuleCall cCategoriesCategoryParserRuleCall_9_0_0 = (RuleCall)cCategoriesAssignment_9_0.eContents().get(0);
		private final Assignment cImplementationsAssignment_9_1 = (Assignment)cAlternatives_9.eContents().get(1);
		private final RuleCall cImplementationsImplementationParserRuleCall_9_1_0 = (RuleCall)cImplementationsAssignment_9_1.eContents().get(0);
		private final Assignment cChecksAssignment_9_2 = (Assignment)cAlternatives_9.eContents().get(2);
		private final RuleCall cChecksCheckParserRuleCall_9_2_0 = (RuleCall)cChecksAssignment_9_2.eContents().get(0);
		private final Assignment cMembersAssignment_9_3 = (Assignment)cAlternatives_9.eContents().get(3);
		private final RuleCall cMembersMemberParserRuleCall_9_3_0 = (RuleCall)cMembersAssignment_9_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//CheckCatalog:
		//	{CheckCatalog} "package" packageName=QualifiedName imports=XImportSection final?="final"? "catalog" name=ValidID
		//	("for" "grammar" ^grammar=[xtext::Grammar|QualifiedName])? "{" (categories+=Category |
		//	implementations+=Implementation | checks+=Check | members+=Member)* "}";
		@Override public ParserRule getRule() { return rule; }

		//{CheckCatalog} "package" packageName=QualifiedName imports=XImportSection final?="final"? "catalog" name=ValidID ("for"
		//"grammar" ^grammar=[xtext::Grammar|QualifiedName])? "{" (categories+=Category | implementations+=Implementation |
		//checks+=Check | members+=Member)* "}"
		public Group getGroup() { return cGroup; }

		//{CheckCatalog}
		public Action getCheckCatalogAction_0() { return cCheckCatalogAction_0; }

		//"package"
		public Keyword getPackageKeyword_1() { return cPackageKeyword_1; }

		//packageName=QualifiedName
		public Assignment getPackageNameAssignment_2() { return cPackageNameAssignment_2; }

		//QualifiedName
		public RuleCall getPackageNameQualifiedNameParserRuleCall_2_0() { return cPackageNameQualifiedNameParserRuleCall_2_0; }

		//imports=XImportSection
		public Assignment getImportsAssignment_3() { return cImportsAssignment_3; }

		//XImportSection
		public RuleCall getImportsXImportSectionParserRuleCall_3_0() { return cImportsXImportSectionParserRuleCall_3_0; }

		//final?="final"?
		public Assignment getFinalAssignment_4() { return cFinalAssignment_4; }

		//"final"
		public Keyword getFinalFinalKeyword_4_0() { return cFinalFinalKeyword_4_0; }

		//"catalog"
		public Keyword getCatalogKeyword_5() { return cCatalogKeyword_5; }

		//name=ValidID
		public Assignment getNameAssignment_6() { return cNameAssignment_6; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_6_0() { return cNameValidIDParserRuleCall_6_0; }

		//("for" "grammar" ^grammar=[xtext::Grammar|QualifiedName])?
		public Group getGroup_7() { return cGroup_7; }

		//"for"
		public Keyword getForKeyword_7_0() { return cForKeyword_7_0; }

		//"grammar"
		public Keyword getGrammarKeyword_7_1() { return cGrammarKeyword_7_1; }

		//^grammar=[xtext::Grammar|QualifiedName]
		public Assignment getGrammarAssignment_7_2() { return cGrammarAssignment_7_2; }

		//[xtext::Grammar|QualifiedName]
		public CrossReference getGrammarGrammarCrossReference_7_2_0() { return cGrammarGrammarCrossReference_7_2_0; }

		//QualifiedName
		public RuleCall getGrammarGrammarQualifiedNameParserRuleCall_7_2_0_1() { return cGrammarGrammarQualifiedNameParserRuleCall_7_2_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_8() { return cLeftCurlyBracketKeyword_8; }

		//(categories+=Category | implementations+=Implementation | checks+=Check | members+=Member)*
		public Alternatives getAlternatives_9() { return cAlternatives_9; }

		//categories+=Category
		public Assignment getCategoriesAssignment_9_0() { return cCategoriesAssignment_9_0; }

		//Category
		public RuleCall getCategoriesCategoryParserRuleCall_9_0_0() { return cCategoriesCategoryParserRuleCall_9_0_0; }

		//implementations+=Implementation
		public Assignment getImplementationsAssignment_9_1() { return cImplementationsAssignment_9_1; }

		//Implementation
		public RuleCall getImplementationsImplementationParserRuleCall_9_1_0() { return cImplementationsImplementationParserRuleCall_9_1_0; }

		//checks+=Check
		public Assignment getChecksAssignment_9_2() { return cChecksAssignment_9_2; }

		//Check
		public RuleCall getChecksCheckParserRuleCall_9_2_0() { return cChecksCheckParserRuleCall_9_2_0; }

		//members+=Member
		public Assignment getMembersAssignment_9_3() { return cMembersAssignment_9_3; }

		//Member
		public RuleCall getMembersMemberParserRuleCall_9_3_0() { return cMembersMemberParserRuleCall_9_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }
	}

	public class XImportSectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XImportSection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXImportSectionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cImportDeclarationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportDeclarationsXImportDeclarationParserRuleCall_1_0 = (RuleCall)cImportDeclarationsAssignment_1.eContents().get(0);
		
		//// Override (inherited via xbase->xtype) to force creation of a (possibly empty) XImportSection
		//XImportSection returns xtype::XImportSection:
		//	{xtype::XImportSection} importDeclarations+=XImportDeclaration*;
		@Override public ParserRule getRule() { return rule; }

		//{xtype::XImportSection} importDeclarations+=XImportDeclaration*
		public Group getGroup() { return cGroup; }

		//{xtype::XImportSection}
		public Action getXImportSectionAction_0() { return cXImportSectionAction_0; }

		//importDeclarations+=XImportDeclaration*
		public Assignment getImportDeclarationsAssignment_1() { return cImportDeclarationsAssignment_1; }

		//XImportDeclaration
		public RuleCall getImportDeclarationsXImportDeclarationParserRuleCall_1_0() { return cImportDeclarationsXImportDeclarationParserRuleCall_1_0; }
	}

	public class XImportDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XImportDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cImportedTypeAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final CrossReference cImportedTypeJvmDeclaredTypeCrossReference_1_0_0 = (CrossReference)cImportedTypeAssignment_1_0.eContents().get(0);
		private final RuleCall cImportedTypeJvmDeclaredTypeQualifiedNameParserRuleCall_1_0_0_1 = (RuleCall)cImportedTypeJvmDeclaredTypeCrossReference_1_0_0.eContents().get(1);
		private final Assignment cImportedNamespaceAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_1_0 = (RuleCall)cImportedNamespaceAssignment_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//// Override (inherited via xbase->xtype) to restrict to our syntax. No static imports. (Backwards compatibility; would introduce a new keyword)
		//XImportDeclaration returns xtype::XImportDeclaration:
		//	"import" (importedType=[types::JvmDeclaredType|QualifiedName] | importedNamespace=QualifiedNameWithWildcard) ";"?;
		@Override public ParserRule getRule() { return rule; }

		//"import" (importedType=[types::JvmDeclaredType|QualifiedName] | importedNamespace=QualifiedNameWithWildcard) ";"?
		public Group getGroup() { return cGroup; }

		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//importedType=[types::JvmDeclaredType|QualifiedName] | importedNamespace=QualifiedNameWithWildcard
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//importedType=[types::JvmDeclaredType|QualifiedName]
		public Assignment getImportedTypeAssignment_1_0() { return cImportedTypeAssignment_1_0; }

		//[types::JvmDeclaredType|QualifiedName]
		public CrossReference getImportedTypeJvmDeclaredTypeCrossReference_1_0_0() { return cImportedTypeJvmDeclaredTypeCrossReference_1_0_0; }

		//QualifiedName
		public RuleCall getImportedTypeJvmDeclaredTypeQualifiedNameParserRuleCall_1_0_0_1() { return cImportedTypeJvmDeclaredTypeQualifiedNameParserRuleCall_1_0_0_1; }

		//importedNamespace=QualifiedNameWithWildcard
		public Assignment getImportedNamespaceAssignment_1_1() { return cImportedNamespaceAssignment_1_1; }

		//QualifiedNameWithWildcard
		public RuleCall getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_1_0() { return cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_1_0; }

		//";"?
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class DocumentedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Documented");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCheckCatalogParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCheckParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCategoryParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cContextParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cImplementationParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cMemberParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//Documented:
		//	CheckCatalog | Check | Category | Context | Implementation | Member;
		@Override public ParserRule getRule() { return rule; }

		//CheckCatalog | Check | Category | Context | Implementation | Member
		public Alternatives getAlternatives() { return cAlternatives; }

		//CheckCatalog
		public RuleCall getCheckCatalogParserRuleCall_0() { return cCheckCatalogParserRuleCall_0; }

		//Check
		public RuleCall getCheckParserRuleCall_1() { return cCheckParserRuleCall_1; }

		//Category
		public RuleCall getCategoryParserRuleCall_2() { return cCategoryParserRuleCall_2; }

		//Context
		public RuleCall getContextParserRuleCall_3() { return cContextParserRuleCall_3; }

		//Implementation
		public RuleCall getImplementationParserRuleCall_4() { return cImplementationParserRuleCall_4; }

		//Member
		public RuleCall getMemberParserRuleCall_5() { return cMemberParserRuleCall_5; }
	}

	public class ImplicitlyNamedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ImplicitlyNamed");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCheckParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCategoryParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ImplicitlyNamed:
		//	Check | Category;
		@Override public ParserRule getRule() { return rule; }

		//Check | Category
		public Alternatives getAlternatives() { return cAlternatives; }

		//Check
		public RuleCall getCheckParserRuleCall_0() { return cCheckParserRuleCall_0; }

		//Category
		public RuleCall getCategoryParserRuleCall_1() { return cCategoryParserRuleCall_1; }
	}

	public class CategoryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Category");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCategoryKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdValidIDParserRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		private final Assignment cLabelAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLabelSTRINGTerminalRuleCall_2_0 = (RuleCall)cLabelAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cChecksAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cChecksCheckParserRuleCall_4_0 = (RuleCall)cChecksAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Category:
		//	"category" id=ValidID? label=STRING "{" checks+=Check* "}";
		@Override public ParserRule getRule() { return rule; }

		//"category" id=ValidID? label=STRING "{" checks+=Check* "}"
		public Group getGroup() { return cGroup; }

		//"category"
		public Keyword getCategoryKeyword_0() { return cCategoryKeyword_0; }

		//id=ValidID?
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }

		//ValidID
		public RuleCall getIdValidIDParserRuleCall_1_0() { return cIdValidIDParserRuleCall_1_0; }

		//label=STRING
		public Assignment getLabelAssignment_2() { return cLabelAssignment_2; }

		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_2_0() { return cLabelSTRINGTerminalRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//checks+=Check*
		public Assignment getChecksAssignment_4() { return cChecksAssignment_4; }

		//Check
		public RuleCall getChecksCheckParserRuleCall_4_0() { return cChecksCheckParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class CheckElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Check");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSeverityRangeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSeverityRangeSeverityRangeParserRuleCall_0_0 = (RuleCall)cSeverityRangeAssignment_0.eContents().get(0);
		private final Assignment cFinalAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cFinalFinalKeyword_1_0 = (Keyword)cFinalAssignment_1.eContents().get(0);
		private final Assignment cKindAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cKindTriggerKindEnumRuleCall_2_0 = (RuleCall)cKindAssignment_2.eContents().get(0);
		private final Assignment cDefaultSeverityAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDefaultSeveritySeverityKindEnumRuleCall_3_0 = (RuleCall)cDefaultSeverityAssignment_3.eContents().get(0);
		private final Assignment cIdAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cIdValidIDParserRuleCall_4_0 = (RuleCall)cIdAssignment_4.eContents().get(0);
		private final Assignment cLabelAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cLabelSTRINGTerminalRuleCall_5_0 = (RuleCall)cLabelAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cLeftParenthesisKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Group cGroup_6_1 = (Group)cGroup_6.eContents().get(1);
		private final Assignment cFormalParametersAssignment_6_1_0 = (Assignment)cGroup_6_1.eContents().get(0);
		private final RuleCall cFormalParametersFormalParameterParserRuleCall_6_1_0_0 = (RuleCall)cFormalParametersAssignment_6_1_0.eContents().get(0);
		private final Group cGroup_6_1_1 = (Group)cGroup_6_1.eContents().get(1);
		private final Keyword cCommaKeyword_6_1_1_0 = (Keyword)cGroup_6_1_1.eContents().get(0);
		private final Assignment cFormalParametersAssignment_6_1_1_1 = (Assignment)cGroup_6_1_1.eContents().get(1);
		private final RuleCall cFormalParametersFormalParameterParserRuleCall_6_1_1_1_0 = (RuleCall)cFormalParametersAssignment_6_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6_2 = (Keyword)cGroup_6.eContents().get(2);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cMessageKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cGivenMessageAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cGivenMessageSTRINGTerminalRuleCall_7_1_0 = (RuleCall)cGivenMessageAssignment_7_1.eContents().get(0);
		private final Alternatives cAlternatives_8 = (Alternatives)cGroup.eContents().get(8);
		private final Group cGroup_8_0 = (Group)cAlternatives_8.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_8_0_0 = (Keyword)cGroup_8_0.eContents().get(0);
		private final Assignment cContextsAssignment_8_0_1 = (Assignment)cGroup_8_0.eContents().get(1);
		private final RuleCall cContextsContextParserRuleCall_8_0_1_0 = (RuleCall)cContextsAssignment_8_0_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8_0_2 = (Keyword)cGroup_8_0.eContents().get(2);
		private final Assignment cContextsAssignment_8_1 = (Assignment)cAlternatives_8.eContents().get(1);
		private final RuleCall cContextsContextParserRuleCall_8_1_0 = (RuleCall)cContextsAssignment_8_1.eContents().get(0);
		
		//Check:
		//	severityRange=SeverityRange? final?="final"? kind=TriggerKind? defaultSeverity=SeverityKind id=ValidID? label=STRING
		//	("(" (formalParameters+=FormalParameter ("," formalParameters+=FormalParameter)*)? ")")? ("message"
		//	givenMessage=STRING)? ("{" contexts+=Context* "}" | contexts+=Context?);
		@Override public ParserRule getRule() { return rule; }

		//severityRange=SeverityRange? final?="final"? kind=TriggerKind? defaultSeverity=SeverityKind id=ValidID? label=STRING
		//("(" (formalParameters+=FormalParameter ("," formalParameters+=FormalParameter)*)? ")")? ("message"
		//givenMessage=STRING)? ("{" contexts+=Context* "}" | contexts+=Context?)
		public Group getGroup() { return cGroup; }

		//severityRange=SeverityRange?
		public Assignment getSeverityRangeAssignment_0() { return cSeverityRangeAssignment_0; }

		//SeverityRange
		public RuleCall getSeverityRangeSeverityRangeParserRuleCall_0_0() { return cSeverityRangeSeverityRangeParserRuleCall_0_0; }

		//final?="final"?
		public Assignment getFinalAssignment_1() { return cFinalAssignment_1; }

		//"final"
		public Keyword getFinalFinalKeyword_1_0() { return cFinalFinalKeyword_1_0; }

		//kind=TriggerKind?
		public Assignment getKindAssignment_2() { return cKindAssignment_2; }

		//TriggerKind
		public RuleCall getKindTriggerKindEnumRuleCall_2_0() { return cKindTriggerKindEnumRuleCall_2_0; }

		//defaultSeverity=SeverityKind
		public Assignment getDefaultSeverityAssignment_3() { return cDefaultSeverityAssignment_3; }

		//SeverityKind
		public RuleCall getDefaultSeveritySeverityKindEnumRuleCall_3_0() { return cDefaultSeveritySeverityKindEnumRuleCall_3_0; }

		//id=ValidID?
		public Assignment getIdAssignment_4() { return cIdAssignment_4; }

		//ValidID
		public RuleCall getIdValidIDParserRuleCall_4_0() { return cIdValidIDParserRuleCall_4_0; }

		//label=STRING
		public Assignment getLabelAssignment_5() { return cLabelAssignment_5; }

		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_5_0() { return cLabelSTRINGTerminalRuleCall_5_0; }

		//(=> "(" (formalParameters+=FormalParameter ("," formalParameters+=FormalParameter)*)? ")")?
		public Group getGroup_6() { return cGroup_6; }

		//=> "("
		public Keyword getLeftParenthesisKeyword_6_0() { return cLeftParenthesisKeyword_6_0; }

		//(formalParameters+=FormalParameter ("," formalParameters+=FormalParameter)*)?
		public Group getGroup_6_1() { return cGroup_6_1; }

		//formalParameters+=FormalParameter
		public Assignment getFormalParametersAssignment_6_1_0() { return cFormalParametersAssignment_6_1_0; }

		//FormalParameter
		public RuleCall getFormalParametersFormalParameterParserRuleCall_6_1_0_0() { return cFormalParametersFormalParameterParserRuleCall_6_1_0_0; }

		//("," formalParameters+=FormalParameter)*
		public Group getGroup_6_1_1() { return cGroup_6_1_1; }

		//","
		public Keyword getCommaKeyword_6_1_1_0() { return cCommaKeyword_6_1_1_0; }

		//formalParameters+=FormalParameter
		public Assignment getFormalParametersAssignment_6_1_1_1() { return cFormalParametersAssignment_6_1_1_1; }

		//FormalParameter
		public RuleCall getFormalParametersFormalParameterParserRuleCall_6_1_1_1_0() { return cFormalParametersFormalParameterParserRuleCall_6_1_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6_2() { return cRightParenthesisKeyword_6_2; }

		//("message" givenMessage=STRING)?
		public Group getGroup_7() { return cGroup_7; }

		//"message"
		public Keyword getMessageKeyword_7_0() { return cMessageKeyword_7_0; }

		//givenMessage=STRING
		public Assignment getGivenMessageAssignment_7_1() { return cGivenMessageAssignment_7_1; }

		//STRING
		public RuleCall getGivenMessageSTRINGTerminalRuleCall_7_1_0() { return cGivenMessageSTRINGTerminalRuleCall_7_1_0; }

		//=> "{" contexts+=Context* "}" | contexts+=Context?
		public Alternatives getAlternatives_8() { return cAlternatives_8; }

		//=> "{" contexts+=Context* "}"
		public Group getGroup_8_0() { return cGroup_8_0; }

		//=> "{"
		public Keyword getLeftCurlyBracketKeyword_8_0_0() { return cLeftCurlyBracketKeyword_8_0_0; }

		//contexts+=Context*
		public Assignment getContextsAssignment_8_0_1() { return cContextsAssignment_8_0_1; }

		//Context
		public RuleCall getContextsContextParserRuleCall_8_0_1_0() { return cContextsContextParserRuleCall_8_0_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8_0_2() { return cRightCurlyBracketKeyword_8_0_2; }

		//contexts+=Context?
		public Assignment getContextsAssignment_8_1() { return cContextsAssignment_8_1; }

		//Context
		public RuleCall getContextsContextParserRuleCall_8_1_0() { return cContextsContextParserRuleCall_8_1_0; }
	}

	public class SeverityRangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SeverityRange");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommercialAtKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cSeverityRangeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMinSeverityAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMinSeveritySeverityKindEnumRuleCall_3_0 = (RuleCall)cMinSeverityAssignment_3.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cMaxSeverityAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cMaxSeveritySeverityKindEnumRuleCall_5_0 = (RuleCall)cMaxSeverityAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		////TODO check duplicate names, qualified names don't include category
		//SeverityRange:
		//	"@" "SeverityRange" "(" minSeverity=SeverityKind ".." maxSeverity=SeverityKind //TODO  verification not allowed for final
		//	")";
		@Override public ParserRule getRule() { return rule; }

		//"@" "SeverityRange" "(" minSeverity=SeverityKind ".." maxSeverity=SeverityKind //TODO  verification not allowed for final
		//")"
		public Group getGroup() { return cGroup; }

		//"@"
		public Keyword getCommercialAtKeyword_0() { return cCommercialAtKeyword_0; }

		//"SeverityRange"
		public Keyword getSeverityRangeKeyword_1() { return cSeverityRangeKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//minSeverity=SeverityKind
		public Assignment getMinSeverityAssignment_3() { return cMinSeverityAssignment_3; }

		//SeverityKind
		public RuleCall getMinSeveritySeverityKindEnumRuleCall_3_0() { return cMinSeveritySeverityKindEnumRuleCall_3_0; }

		//".."
		public Keyword getFullStopFullStopKeyword_4() { return cFullStopFullStopKeyword_4; }

		//maxSeverity=SeverityKind
		public Assignment getMaxSeverityAssignment_5() { return cMaxSeverityAssignment_5; }

		//SeverityKind
		public RuleCall getMaxSeveritySeverityKindEnumRuleCall_5_0() { return cMaxSeveritySeverityKindEnumRuleCall_5_0; }

		////TODO  verification not allowed for final
		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}

	public class MemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Member");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsXAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeJvmTypeReferenceParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameValidIDParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final RuleCall cOpSingleAssignParserRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final Assignment cValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValueXOrExpressionParserRuleCall_3_1_0 = (RuleCall)cValueAssignment_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Member:
		//	annotations+=XAnnotation* type=JvmTypeReference name=ValidID (OpSingleAssign value=XOrExpression)? // TODO: check if semicolon necessary?
		//	";";
		@Override public ParserRule getRule() { return rule; }

		//annotations+=XAnnotation* type=JvmTypeReference name=ValidID (OpSingleAssign value=XOrExpression)? // TODO: check if semicolon necessary?
		//";"
		public Group getGroup() { return cGroup; }

		//annotations+=XAnnotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//XAnnotation
		public RuleCall getAnnotationsXAnnotationParserRuleCall_0_0() { return cAnnotationsXAnnotationParserRuleCall_0_0; }

		//type=JvmTypeReference
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//JvmTypeReference
		public RuleCall getTypeJvmTypeReferenceParserRuleCall_1_0() { return cTypeJvmTypeReferenceParserRuleCall_1_0; }

		//name=ValidID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_0() { return cNameValidIDParserRuleCall_2_0; }

		//(OpSingleAssign value=XOrExpression)?
		public Group getGroup_3() { return cGroup_3; }

		//OpSingleAssign
		public RuleCall getOpSingleAssignParserRuleCall_3_0() { return cOpSingleAssignParserRuleCall_3_0; }

		//value=XOrExpression
		public Assignment getValueAssignment_3_1() { return cValueAssignment_3_1; }

		//XOrExpression
		public RuleCall getValueXOrExpressionParserRuleCall_3_1_0() { return cValueXOrExpressionParserRuleCall_3_1_0; }

		//// TODO: check if semicolon necessary?
		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class ImplementationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Implementation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDefKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cContextAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cContextContextParserRuleCall_2_0 = (RuleCall)cContextAssignment_2.eContents().get(0);
		
		//Implementation:
		//	"def" name=ValidID context=Context;
		@Override public ParserRule getRule() { return rule; }

		//"def" name=ValidID context=Context
		public Group getGroup() { return cGroup; }

		//"def"
		public Keyword getDefKeyword_0() { return cDefKeyword_0; }

		//name=ValidID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_0() { return cNameValidIDParserRuleCall_1_0; }

		//context=Context
		public Assignment getContextAssignment_2() { return cContextAssignment_2; }

		//Context
		public RuleCall getContextContextParserRuleCall_2_0() { return cContextContextParserRuleCall_2_0; }
	}

	public class FormalParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FormalParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeJvmParameterizedTypeReferenceParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRightAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRightXFormalParameterDefaultValueLiteralParserRuleCall_3_0 = (RuleCall)cRightAssignment_3.eContents().get(0);
		private final Assignment cLabelAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cLabelSTRINGTerminalRuleCall_4_0 = (RuleCall)cLabelAssignment_4.eContents().get(0);
		
		/// *
		// *   Parameter Description (incl type and default values)
		// * / // TODO how can formal parameters be referenced from within a 'def' Implementation clause?
		//FormalParameter:
		//	type=JvmParameterizedTypeReference name=ValidID "=" right=XFormalParameterDefaultValueLiteral label=STRING?;
		@Override public ParserRule getRule() { return rule; }

		//type=JvmParameterizedTypeReference name=ValidID "=" right=XFormalParameterDefaultValueLiteral label=STRING?
		public Group getGroup() { return cGroup; }

		//type=JvmParameterizedTypeReference
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//JvmParameterizedTypeReference
		public RuleCall getTypeJvmParameterizedTypeReferenceParserRuleCall_0_0() { return cTypeJvmParameterizedTypeReferenceParserRuleCall_0_0; }

		//name=ValidID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_0() { return cNameValidIDParserRuleCall_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//right=XFormalParameterDefaultValueLiteral
		public Assignment getRightAssignment_3() { return cRightAssignment_3; }

		//XFormalParameterDefaultValueLiteral
		public RuleCall getRightXFormalParameterDefaultValueLiteralParserRuleCall_3_0() { return cRightXFormalParameterDefaultValueLiteralParserRuleCall_3_0; }

		//label=STRING?
		public Assignment getLabelAssignment_4() { return cLabelAssignment_4; }

		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_4_0() { return cLabelSTRINGTerminalRuleCall_4_0; }
	}

	public class XSimpleFormalParameterDefaultValueLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XSimpleFormalParameterDefaultValueLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cXBooleanLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cXNumberLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cXStringLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		////TODO resolve the allowed types either in scopes or in validations
		////TODO validate the default values according to the type.
		//XSimpleFormalParameterDefaultValueLiteral returns xbase::XExpression:
		//	XBooleanLiteral | XNumberLiteral | XStringLiteral;
		@Override public ParserRule getRule() { return rule; }

		//XBooleanLiteral | XNumberLiteral | XStringLiteral
		public Alternatives getAlternatives() { return cAlternatives; }

		//XBooleanLiteral
		public RuleCall getXBooleanLiteralParserRuleCall_0() { return cXBooleanLiteralParserRuleCall_0; }

		//XNumberLiteral
		public RuleCall getXNumberLiteralParserRuleCall_1() { return cXNumberLiteralParserRuleCall_1; }

		//XStringLiteral
		public RuleCall getXStringLiteralParserRuleCall_2() { return cXStringLiteralParserRuleCall_2; }
	}

	public class XConstantUnaryOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XConstantUnaryOperation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cXUnaryOperationAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cFeatureAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final CrossReference cFeatureJvmIdentifiableElementCrossReference_0_1_0 = (CrossReference)cFeatureAssignment_0_1.eContents().get(0);
		private final RuleCall cFeatureJvmIdentifiableElementOpUnaryParserRuleCall_0_1_0_1 = (RuleCall)cFeatureJvmIdentifiableElementCrossReference_0_1_0.eContents().get(1);
		private final Assignment cOperandAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cOperandXConstantUnaryOperationParserRuleCall_0_2_0 = (RuleCall)cOperandAssignment_0_2.eContents().get(0);
		private final RuleCall cXSimpleFormalParameterDefaultValueLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//XConstantUnaryOperation returns xbase::XExpression:
		//	{xbase::XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XConstantUnaryOperation |
		//	XSimpleFormalParameterDefaultValueLiteral;
		@Override public ParserRule getRule() { return rule; }

		//{xbase::XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XConstantUnaryOperation |
		//XSimpleFormalParameterDefaultValueLiteral
		public Alternatives getAlternatives() { return cAlternatives; }

		//{xbase::XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XConstantUnaryOperation
		public Group getGroup_0() { return cGroup_0; }

		//{xbase::XUnaryOperation}
		public Action getXUnaryOperationAction_0_0() { return cXUnaryOperationAction_0_0; }

		//feature=[types::JvmIdentifiableElement|OpUnary]
		public Assignment getFeatureAssignment_0_1() { return cFeatureAssignment_0_1; }

		//[types::JvmIdentifiableElement|OpUnary]
		public CrossReference getFeatureJvmIdentifiableElementCrossReference_0_1_0() { return cFeatureJvmIdentifiableElementCrossReference_0_1_0; }

		//OpUnary
		public RuleCall getFeatureJvmIdentifiableElementOpUnaryParserRuleCall_0_1_0_1() { return cFeatureJvmIdentifiableElementOpUnaryParserRuleCall_0_1_0_1; }

		//operand=XConstantUnaryOperation
		public Assignment getOperandAssignment_0_2() { return cOperandAssignment_0_2; }

		//XConstantUnaryOperation
		public RuleCall getOperandXConstantUnaryOperationParserRuleCall_0_2_0() { return cOperandXConstantUnaryOperationParserRuleCall_0_2_0; }

		//XSimpleFormalParameterDefaultValueLiteral
		public RuleCall getXSimpleFormalParameterDefaultValueLiteralParserRuleCall_1() { return cXSimpleFormalParameterDefaultValueLiteralParserRuleCall_1; }
	}

	public class XFormalParameterDefaultValueLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XFormalParameterDefaultValueLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cXConstantUnaryOperationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cXConstantListLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// todo add support for enumerations
		//XFormalParameterDefaultValueLiteral returns xbase::XExpression:
		//	XConstantUnaryOperation | XConstantListLiteral;
		@Override public ParserRule getRule() { return rule; }

		//XConstantUnaryOperation | XConstantListLiteral
		public Alternatives getAlternatives() { return cAlternatives; }

		//XConstantUnaryOperation
		public RuleCall getXConstantUnaryOperationParserRuleCall_0() { return cXConstantUnaryOperationParserRuleCall_0; }

		//XConstantListLiteral
		public RuleCall getXConstantListLiteralParserRuleCall_1() { return cXConstantListLiteralParserRuleCall_1; }
	}

	public class XConstantListLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XConstantListLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXListLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNumberSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cElementsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cElementsXConstantUnaryOperationParserRuleCall_3_0_0 = (RuleCall)cElementsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cElementsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cElementsXConstantUnaryOperationParserRuleCall_3_1_1_0 = (RuleCall)cElementsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//XConstantListLiteral returns xbase::XListLiteral:
		//	{xbase::XListLiteral} "#" "[" (elements+=XConstantUnaryOperation ("," elements+=XConstantUnaryOperation)*)? "]";
		@Override public ParserRule getRule() { return rule; }

		//{xbase::XListLiteral} "#" "[" (elements+=XConstantUnaryOperation ("," elements+=XConstantUnaryOperation)*)? "]"
		public Group getGroup() { return cGroup; }

		//{xbase::XListLiteral}
		public Action getXListLiteralAction_0() { return cXListLiteralAction_0; }

		//"#"
		public Keyword getNumberSignKeyword_1() { return cNumberSignKeyword_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }

		//(elements+=XConstantUnaryOperation ("," elements+=XConstantUnaryOperation)*)?
		public Group getGroup_3() { return cGroup_3; }

		//elements+=XConstantUnaryOperation
		public Assignment getElementsAssignment_3_0() { return cElementsAssignment_3_0; }

		//XConstantUnaryOperation
		public RuleCall getElementsXConstantUnaryOperationParserRuleCall_3_0_0() { return cElementsXConstantUnaryOperationParserRuleCall_3_0_0; }

		//("," elements+=XConstantUnaryOperation)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//elements+=XConstantUnaryOperation
		public Assignment getElementsAssignment_3_1_1() { return cElementsAssignment_3_1_1; }

		//XConstantUnaryOperation
		public RuleCall getElementsXConstantUnaryOperationParserRuleCall_3_1_1_0() { return cElementsXConstantUnaryOperationParserRuleCall_3_1_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}

	public class ContextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Context");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cContextVariableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cContextVariableContextVariableParserRuleCall_1_0 = (RuleCall)cContextVariableAssignment_1.eContents().get(0);
		private final Assignment cConstraintAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConstraintXBlockExpressionParserRuleCall_2_0 = (RuleCall)cConstraintAssignment_2.eContents().get(0);
		
		/// *
		// *   Context Description (incl constraint?)
		// * / Context:
		//	"for" contextVariable=ContextVariable constraint=XBlockExpression;
		@Override public ParserRule getRule() { return rule; }

		//"for" contextVariable=ContextVariable constraint=XBlockExpression
		public Group getGroup() { return cGroup; }

		//"for"
		public Keyword getForKeyword_0() { return cForKeyword_0; }

		//contextVariable=ContextVariable
		public Assignment getContextVariableAssignment_1() { return cContextVariableAssignment_1; }

		//ContextVariable
		public RuleCall getContextVariableContextVariableParserRuleCall_1_0() { return cContextVariableContextVariableParserRuleCall_1_0; }

		//constraint=XBlockExpression
		public Assignment getConstraintAssignment_2() { return cConstraintAssignment_2; }

		//XBlockExpression
		public RuleCall getConstraintXBlockExpressionParserRuleCall_2_0() { return cConstraintXBlockExpressionParserRuleCall_2_0; }
	}

	public class ContextVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ContextVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeJvmTypeReferenceParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//ContextVariable:
		//	type=JvmTypeReference name=ValidID?;
		@Override public ParserRule getRule() { return rule; }

		//type=JvmTypeReference name=ValidID?
		public Group getGroup() { return cGroup; }

		//type=JvmTypeReference
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//JvmTypeReference
		public RuleCall getTypeJvmTypeReferenceParserRuleCall_0_0() { return cTypeJvmTypeReferenceParserRuleCall_0_0; }

		//name=ValidID?
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_0() { return cNameValidIDParserRuleCall_1_0; }
	}

	public class XGuardExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XGuardExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXGuardExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cGuardKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cGuardAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cGuardXExpressionParserRuleCall_2_0 = (RuleCall)cGuardAssignment_2.eContents().get(0);
		
		///// * Adding Guards and Issues to the possible expressions * /
		//XGuardExpression returns xbase::XExpression:
		//	{XGuardExpression} "guard" guard=XExpression;
		@Override public ParserRule getRule() { return rule; }

		//{XGuardExpression} "guard" guard=XExpression
		public Group getGroup() { return cGroup; }

		//{XGuardExpression}
		public Action getXGuardExpressionAction_0() { return cXGuardExpressionAction_0; }

		//"guard"
		public Keyword getGuardKeyword_1() { return cGuardKeyword_1; }

		//guard=XExpression
		public Assignment getGuardAssignment_2() { return cGuardAssignment_2; }

		//XExpression
		public RuleCall getGuardXExpressionParserRuleCall_2_0() { return cGuardXExpressionParserRuleCall_2_0; }
	}

	public class XIssueExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XIssueExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXIssueExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIssueKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCheckAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cCheckCheckCrossReference_2_0 = (CrossReference)cCheckAssignment_2.eContents().get(0);
		private final RuleCall cCheckCheckQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cCheckCheckCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cOnKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Alternatives cAlternatives_3_1 = (Alternatives)cGroup_3.eContents().get(1);
		private final Group cGroup_3_1_0 = (Group)cAlternatives_3_1.eContents().get(0);
		private final Keyword cNumberSignKeyword_3_1_0_0 = (Keyword)cGroup_3_1_0.eContents().get(0);
		private final Assignment cMarkerFeatureAssignment_3_1_0_1 = (Assignment)cGroup_3_1_0.eContents().get(1);
		private final CrossReference cMarkerFeatureEStructuralFeatureCrossReference_3_1_0_1_0 = (CrossReference)cMarkerFeatureAssignment_3_1_0_1.eContents().get(0);
		private final RuleCall cMarkerFeatureEStructuralFeatureValidIDParserRuleCall_3_1_0_1_0_1 = (RuleCall)cMarkerFeatureEStructuralFeatureCrossReference_3_1_0_1_0.eContents().get(1);
		private final Group cGroup_3_1_1 = (Group)cAlternatives_3_1.eContents().get(1);
		private final Assignment cMarkerObjectAssignment_3_1_1_0 = (Assignment)cGroup_3_1_1.eContents().get(0);
		private final RuleCall cMarkerObjectXExpressionParserRuleCall_3_1_1_0_0 = (RuleCall)cMarkerObjectAssignment_3_1_1_0.eContents().get(0);
		private final Group cGroup_3_1_1_1 = (Group)cGroup_3_1_1.eContents().get(1);
		private final Keyword cNumberSignKeyword_3_1_1_1_0 = (Keyword)cGroup_3_1_1_1.eContents().get(0);
		private final Assignment cMarkerFeatureAssignment_3_1_1_1_1 = (Assignment)cGroup_3_1_1_1.eContents().get(1);
		private final CrossReference cMarkerFeatureEStructuralFeatureCrossReference_3_1_1_1_1_0 = (CrossReference)cMarkerFeatureAssignment_3_1_1_1_1.eContents().get(0);
		private final RuleCall cMarkerFeatureEStructuralFeatureFeatureCallIDParserRuleCall_3_1_1_1_1_0_1 = (RuleCall)cMarkerFeatureEStructuralFeatureCrossReference_3_1_1_1_1_0.eContents().get(1);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cMarkerIndexAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cMarkerIndexXExpressionParserRuleCall_3_2_1_0 = (RuleCall)cMarkerIndexAssignment_3_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3_2_2 = (Keyword)cGroup_3_2.eContents().get(2);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cMessageKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cMessageAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cMessageXExpressionParserRuleCall_4_1_0 = (RuleCall)cMessageAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cBindKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cMessageParametersAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cMessageParametersXExpressionParserRuleCall_5_2_0 = (RuleCall)cMessageParametersAssignment_5_2.eContents().get(0);
		private final Group cGroup_5_3 = (Group)cGroup_5.eContents().get(3);
		private final Keyword cCommaKeyword_5_3_0 = (Keyword)cGroup_5_3.eContents().get(0);
		private final Assignment cMessageParametersAssignment_5_3_1 = (Assignment)cGroup_5_3.eContents().get(1);
		private final RuleCall cMessageParametersXExpressionParserRuleCall_5_3_1_0 = (RuleCall)cMessageParametersAssignment_5_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5_4 = (Keyword)cGroup_5.eContents().get(4);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cDataKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cIssueCodeAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cIssueCodeValidIDParserRuleCall_6_1_0 = (RuleCall)cIssueCodeAssignment_6_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_6_2 = (Keyword)cGroup_6.eContents().get(2);
		private final Assignment cIssueDataAssignment_6_3 = (Assignment)cGroup_6.eContents().get(3);
		private final RuleCall cIssueDataXExpressionParserRuleCall_6_3_0 = (RuleCall)cIssueDataAssignment_6_3.eContents().get(0);
		private final Group cGroup_6_4 = (Group)cGroup_6.eContents().get(4);
		private final Keyword cCommaKeyword_6_4_0 = (Keyword)cGroup_6_4.eContents().get(0);
		private final Assignment cIssueDataAssignment_6_4_1 = (Assignment)cGroup_6_4.eContents().get(1);
		private final RuleCall cIssueDataXExpressionParserRuleCall_6_4_1_0 = (RuleCall)cIssueDataAssignment_6_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6_5 = (Keyword)cGroup_6.eContents().get(5);
		
		//XIssueExpression returns xbase::XExpression:
		//	{XIssueExpression} "issue" => check=[Check|QualifiedName]? ("on" ("#"
		//	markerFeature=[ecore::EStructuralFeature|ValidID] // we list the possible choices to help antlr
		//	| markerObject=XExpression ("#" markerFeature=[ecore::EStructuralFeature|FeatureCallID])?) ("[" markerIndex=XExpression
		//	"]")?)? ("message" message=XExpression)? ("bind" "(" messageParameters+=XExpression (","
		//	messageParameters+=XExpression)* ")")? //TODO rename as bindings
		//	("data" issueCode=ValidID? "(" issueData+=XExpression ("," issueData+=XExpression)* ")")?;
		@Override public ParserRule getRule() { return rule; }

		//{XIssueExpression} "issue" => check=[Check|QualifiedName]? ("on" ("#" markerFeature=[ecore::EStructuralFeature|ValidID] // we list the possible choices to help antlr
		//| markerObject=XExpression ("#" markerFeature=[ecore::EStructuralFeature|FeatureCallID])?) ("[" markerIndex=XExpression
		//"]")?)? ("message" message=XExpression)? ("bind" "(" messageParameters+=XExpression (","
		//messageParameters+=XExpression)* ")")? //TODO rename as bindings
		//("data" issueCode=ValidID? "(" issueData+=XExpression ("," issueData+=XExpression)* ")")?
		public Group getGroup() { return cGroup; }

		//{XIssueExpression}
		public Action getXIssueExpressionAction_0() { return cXIssueExpressionAction_0; }

		//"issue"
		public Keyword getIssueKeyword_1() { return cIssueKeyword_1; }

		//=> check=[Check|QualifiedName]?
		public Assignment getCheckAssignment_2() { return cCheckAssignment_2; }

		//[Check|QualifiedName]
		public CrossReference getCheckCheckCrossReference_2_0() { return cCheckCheckCrossReference_2_0; }

		//QualifiedName
		public RuleCall getCheckCheckQualifiedNameParserRuleCall_2_0_1() { return cCheckCheckQualifiedNameParserRuleCall_2_0_1; }

		//(=> "on" ("#" markerFeature=[ecore::EStructuralFeature|ValidID] // we list the possible choices to help antlr
		//| markerObject=XExpression ("#" markerFeature=[ecore::EStructuralFeature|FeatureCallID])?) ("[" markerIndex=XExpression
		//"]")?)?
		public Group getGroup_3() { return cGroup_3; }

		//=> "on"
		public Keyword getOnKeyword_3_0() { return cOnKeyword_3_0; }

		//=> "#" markerFeature=[ecore::EStructuralFeature|ValidID] // we list the possible choices to help antlr
		//| markerObject=XExpression ("#" markerFeature=[ecore::EStructuralFeature|FeatureCallID])?
		public Alternatives getAlternatives_3_1() { return cAlternatives_3_1; }

		//=> "#" markerFeature=[ecore::EStructuralFeature|ValidID]
		public Group getGroup_3_1_0() { return cGroup_3_1_0; }

		//=> "#"
		public Keyword getNumberSignKeyword_3_1_0_0() { return cNumberSignKeyword_3_1_0_0; }

		//markerFeature=[ecore::EStructuralFeature|ValidID]
		public Assignment getMarkerFeatureAssignment_3_1_0_1() { return cMarkerFeatureAssignment_3_1_0_1; }

		//[ecore::EStructuralFeature|ValidID]
		public CrossReference getMarkerFeatureEStructuralFeatureCrossReference_3_1_0_1_0() { return cMarkerFeatureEStructuralFeatureCrossReference_3_1_0_1_0; }

		//ValidID
		public RuleCall getMarkerFeatureEStructuralFeatureValidIDParserRuleCall_3_1_0_1_0_1() { return cMarkerFeatureEStructuralFeatureValidIDParserRuleCall_3_1_0_1_0_1; }

		//markerObject=XExpression ("#" markerFeature=[ecore::EStructuralFeature|FeatureCallID])?
		public Group getGroup_3_1_1() { return cGroup_3_1_1; }

		//markerObject=XExpression
		public Assignment getMarkerObjectAssignment_3_1_1_0() { return cMarkerObjectAssignment_3_1_1_0; }

		//XExpression
		public RuleCall getMarkerObjectXExpressionParserRuleCall_3_1_1_0_0() { return cMarkerObjectXExpressionParserRuleCall_3_1_1_0_0; }

		//(=> "#" markerFeature=[ecore::EStructuralFeature|FeatureCallID])?
		public Group getGroup_3_1_1_1() { return cGroup_3_1_1_1; }

		//=> "#"
		public Keyword getNumberSignKeyword_3_1_1_1_0() { return cNumberSignKeyword_3_1_1_1_0; }

		//markerFeature=[ecore::EStructuralFeature|FeatureCallID]
		public Assignment getMarkerFeatureAssignment_3_1_1_1_1() { return cMarkerFeatureAssignment_3_1_1_1_1; }

		//[ecore::EStructuralFeature|FeatureCallID]
		public CrossReference getMarkerFeatureEStructuralFeatureCrossReference_3_1_1_1_1_0() { return cMarkerFeatureEStructuralFeatureCrossReference_3_1_1_1_1_0; }

		//FeatureCallID
		public RuleCall getMarkerFeatureEStructuralFeatureFeatureCallIDParserRuleCall_3_1_1_1_1_0_1() { return cMarkerFeatureEStructuralFeatureFeatureCallIDParserRuleCall_3_1_1_1_1_0_1; }

		//(=> "[" markerIndex=XExpression "]")?
		public Group getGroup_3_2() { return cGroup_3_2; }

		//=> "["
		public Keyword getLeftSquareBracketKeyword_3_2_0() { return cLeftSquareBracketKeyword_3_2_0; }

		//markerIndex=XExpression
		public Assignment getMarkerIndexAssignment_3_2_1() { return cMarkerIndexAssignment_3_2_1; }

		//XExpression
		public RuleCall getMarkerIndexXExpressionParserRuleCall_3_2_1_0() { return cMarkerIndexXExpressionParserRuleCall_3_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3_2_2() { return cRightSquareBracketKeyword_3_2_2; }

		//(=> "message" message=XExpression)?
		public Group getGroup_4() { return cGroup_4; }

		//=> "message"
		public Keyword getMessageKeyword_4_0() { return cMessageKeyword_4_0; }

		//message=XExpression
		public Assignment getMessageAssignment_4_1() { return cMessageAssignment_4_1; }

		//XExpression
		public RuleCall getMessageXExpressionParserRuleCall_4_1_0() { return cMessageXExpressionParserRuleCall_4_1_0; }

		//(=> "bind" "(" messageParameters+=XExpression ("," messageParameters+=XExpression)* ")")?
		public Group getGroup_5() { return cGroup_5; }

		//=> "bind"
		public Keyword getBindKeyword_5_0() { return cBindKeyword_5_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_5_1() { return cLeftParenthesisKeyword_5_1; }

		//messageParameters+=XExpression
		public Assignment getMessageParametersAssignment_5_2() { return cMessageParametersAssignment_5_2; }

		//XExpression
		public RuleCall getMessageParametersXExpressionParserRuleCall_5_2_0() { return cMessageParametersXExpressionParserRuleCall_5_2_0; }

		//(=> "," messageParameters+=XExpression)*
		public Group getGroup_5_3() { return cGroup_5_3; }

		//=> ","
		public Keyword getCommaKeyword_5_3_0() { return cCommaKeyword_5_3_0; }

		//messageParameters+=XExpression
		public Assignment getMessageParametersAssignment_5_3_1() { return cMessageParametersAssignment_5_3_1; }

		//XExpression
		public RuleCall getMessageParametersXExpressionParserRuleCall_5_3_1_0() { return cMessageParametersXExpressionParserRuleCall_5_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5_4() { return cRightParenthesisKeyword_5_4; }

		//(=> "data" issueCode=ValidID? "(" issueData+=XExpression ("," issueData+=XExpression)* ")")?
		public Group getGroup_6() { return cGroup_6; }

		//=> "data"
		public Keyword getDataKeyword_6_0() { return cDataKeyword_6_0; }

		//issueCode=ValidID?
		public Assignment getIssueCodeAssignment_6_1() { return cIssueCodeAssignment_6_1; }

		//ValidID
		public RuleCall getIssueCodeValidIDParserRuleCall_6_1_0() { return cIssueCodeValidIDParserRuleCall_6_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_6_2() { return cLeftParenthesisKeyword_6_2; }

		//issueData+=XExpression
		public Assignment getIssueDataAssignment_6_3() { return cIssueDataAssignment_6_3; }

		//XExpression
		public RuleCall getIssueDataXExpressionParserRuleCall_6_3_0() { return cIssueDataXExpressionParserRuleCall_6_3_0; }

		//(=> "," issueData+=XExpression)*
		public Group getGroup_6_4() { return cGroup_6_4; }

		//=> ","
		public Keyword getCommaKeyword_6_4_0() { return cCommaKeyword_6_4_0; }

		//issueData+=XExpression
		public Assignment getIssueDataAssignment_6_4_1() { return cIssueDataAssignment_6_4_1; }

		//XExpression
		public RuleCall getIssueDataXExpressionParserRuleCall_6_4_1_0() { return cIssueDataXExpressionParserRuleCall_6_4_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6_5() { return cRightParenthesisKeyword_6_5; }
	}

	public class XPrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XPrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cXConstructorCallParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cXBlockExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cXSwitchExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cXSynchronizedExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cXFeatureCallParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cXLiteralParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cXIfExpressionParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cXForLoopExpressionParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cXBasicForLoopExpressionParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cXWhileExpressionParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cXDoWhileExpressionParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cXThrowExpressionParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cXReturnExpressionParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cXTryCatchFinallyExpressionParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		private final RuleCall cXParenthesizedExpressionParserRuleCall_14 = (RuleCall)cAlternatives.eContents().get(14);
		private final RuleCall cXGuardExpressionParserRuleCall_15 = (RuleCall)cAlternatives.eContents().get(15);
		private final RuleCall cXIssueExpressionParserRuleCall_16 = (RuleCall)cAlternatives.eContents().get(16);
		
		//XPrimaryExpression returns xbase::XExpression:
		//	XConstructorCall | XBlockExpression | XSwitchExpression | XSynchronizedExpression | XFeatureCall | XLiteral |
		//	XIfExpression | XForLoopExpression | XBasicForLoopExpression | XWhileExpression | XDoWhileExpression |
		//	XThrowExpression | XReturnExpression | XTryCatchFinallyExpression | XParenthesizedExpression | // <-new
		//	XGuardExpression | // <-new
		//	XIssueExpression;
		@Override public ParserRule getRule() { return rule; }

		//XConstructorCall | XBlockExpression | XSwitchExpression | XSynchronizedExpression | XFeatureCall | XLiteral |
		//XIfExpression | XForLoopExpression | XBasicForLoopExpression | XWhileExpression | XDoWhileExpression |
		//XThrowExpression | XReturnExpression | XTryCatchFinallyExpression | XParenthesizedExpression | // <-new
		//XGuardExpression | // <-new
		//XIssueExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//XConstructorCall
		public RuleCall getXConstructorCallParserRuleCall_0() { return cXConstructorCallParserRuleCall_0; }

		//XBlockExpression
		public RuleCall getXBlockExpressionParserRuleCall_1() { return cXBlockExpressionParserRuleCall_1; }

		//XSwitchExpression
		public RuleCall getXSwitchExpressionParserRuleCall_2() { return cXSwitchExpressionParserRuleCall_2; }

		//XSynchronizedExpression
		public RuleCall getXSynchronizedExpressionParserRuleCall_3() { return cXSynchronizedExpressionParserRuleCall_3; }

		//XFeatureCall
		public RuleCall getXFeatureCallParserRuleCall_4() { return cXFeatureCallParserRuleCall_4; }

		//XLiteral
		public RuleCall getXLiteralParserRuleCall_5() { return cXLiteralParserRuleCall_5; }

		//XIfExpression
		public RuleCall getXIfExpressionParserRuleCall_6() { return cXIfExpressionParserRuleCall_6; }

		//XForLoopExpression
		public RuleCall getXForLoopExpressionParserRuleCall_7() { return cXForLoopExpressionParserRuleCall_7; }

		//XBasicForLoopExpression
		public RuleCall getXBasicForLoopExpressionParserRuleCall_8() { return cXBasicForLoopExpressionParserRuleCall_8; }

		//XWhileExpression
		public RuleCall getXWhileExpressionParserRuleCall_9() { return cXWhileExpressionParserRuleCall_9; }

		//XDoWhileExpression
		public RuleCall getXDoWhileExpressionParserRuleCall_10() { return cXDoWhileExpressionParserRuleCall_10; }

		//XThrowExpression
		public RuleCall getXThrowExpressionParserRuleCall_11() { return cXThrowExpressionParserRuleCall_11; }

		//XReturnExpression
		public RuleCall getXReturnExpressionParserRuleCall_12() { return cXReturnExpressionParserRuleCall_12; }

		//XTryCatchFinallyExpression
		public RuleCall getXTryCatchFinallyExpressionParserRuleCall_13() { return cXTryCatchFinallyExpressionParserRuleCall_13; }

		//XParenthesizedExpression
		public RuleCall getXParenthesizedExpressionParserRuleCall_14() { return cXParenthesizedExpressionParserRuleCall_14; }

		//// <-new
		//XGuardExpression
		public RuleCall getXGuardExpressionParserRuleCall_15() { return cXGuardExpressionParserRuleCall_15; }

		//// <-new
		//XIssueExpression
		public RuleCall getXIssueExpressionParserRuleCall_16() { return cXIssueExpressionParserRuleCall_16; }
	}

	public class FeatureCallIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FeatureCallID");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cValidIDParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Keyword cExtendsKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cStaticKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cImportKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cExtensionKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cCatalogKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cGrammarKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cWithKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cCategoryKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cMessageKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cOnKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cBindKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		private final Keyword cDataKeyword_12 = (Keyword)cAlternatives.eContents().get(12);
		private final Keyword cSeverityRangeKeyword_13 = (Keyword)cAlternatives.eContents().get(13);
		private final Keyword cErrorKeyword_14 = (Keyword)cAlternatives.eContents().get(14);
		private final Keyword cWarningKeyword_15 = (Keyword)cAlternatives.eContents().get(15);
		private final Keyword cInfoKeyword_16 = (Keyword)cAlternatives.eContents().get(16);
		private final Keyword cIgnoreKeyword_17 = (Keyword)cAlternatives.eContents().get(17);
		private final Keyword cLiveKeyword_18 = (Keyword)cAlternatives.eContents().get(18);
		private final Keyword cOnSaveKeyword_19 = (Keyword)cAlternatives.eContents().get(19);
		private final Keyword cOnDemandKeyword_20 = (Keyword)cAlternatives.eContents().get(20);
		
		//// We cannot add any identifier here that also starts an XPrimaryExpression. ('for', 'guard', 'issue'). Also, don't add the Java keywords
		//// 'package' or 'final'. Let's at least allow all other keywords as member IDs in a chained feature call.
		//FeatureCallID:
		//	ValidID | "extends" | "static" | "import" | // Inherited from xbase
		//	"extension" | "catalog" | "grammar" | "with" | "category" | "message" | "on" | "bind" | "data" | "SeverityRange" |
		//	"error" | "warning" | "info" | // SeverityKind
		//	"ignore" | "live" | "onSave" | // TriggerKind
		//	"onDemand";
		@Override public ParserRule getRule() { return rule; }

		//ValidID | "extends" | "static" | "import" | // Inherited from xbase
		//"extension" | "catalog" | "grammar" | "with" | "category" | "message" | "on" | "bind" | "data" | "SeverityRange" |
		//"error" | "warning" | "info" | // SeverityKind
		//"ignore" | "live" | "onSave" | // TriggerKind
		//"onDemand"
		public Alternatives getAlternatives() { return cAlternatives; }

		//ValidID
		public RuleCall getValidIDParserRuleCall_0() { return cValidIDParserRuleCall_0; }

		//"extends"
		public Keyword getExtendsKeyword_1() { return cExtendsKeyword_1; }

		//"static"
		public Keyword getStaticKeyword_2() { return cStaticKeyword_2; }

		//"import"
		public Keyword getImportKeyword_3() { return cImportKeyword_3; }

		//// Inherited from xbase
		//"extension"
		public Keyword getExtensionKeyword_4() { return cExtensionKeyword_4; }

		//"catalog"
		public Keyword getCatalogKeyword_5() { return cCatalogKeyword_5; }

		//"grammar"
		public Keyword getGrammarKeyword_6() { return cGrammarKeyword_6; }

		//"with"
		public Keyword getWithKeyword_7() { return cWithKeyword_7; }

		//"category"
		public Keyword getCategoryKeyword_8() { return cCategoryKeyword_8; }

		//"message"
		public Keyword getMessageKeyword_9() { return cMessageKeyword_9; }

		//"on"
		public Keyword getOnKeyword_10() { return cOnKeyword_10; }

		//"bind"
		public Keyword getBindKeyword_11() { return cBindKeyword_11; }

		//"data"
		public Keyword getDataKeyword_12() { return cDataKeyword_12; }

		//"SeverityRange"
		public Keyword getSeverityRangeKeyword_13() { return cSeverityRangeKeyword_13; }

		//"error"
		public Keyword getErrorKeyword_14() { return cErrorKeyword_14; }

		//"warning"
		public Keyword getWarningKeyword_15() { return cWarningKeyword_15; }

		//"info"
		public Keyword getInfoKeyword_16() { return cInfoKeyword_16; }

		//// SeverityKind
		//"ignore"
		public Keyword getIgnoreKeyword_17() { return cIgnoreKeyword_17; }

		//"live"
		public Keyword getLiveKeyword_18() { return cLiveKeyword_18; }

		//"onSave"
		public Keyword getOnSaveKeyword_19() { return cOnSaveKeyword_19; }

		//// TriggerKind
		//"onDemand"
		public Keyword getOnDemandKeyword_20() { return cOnDemandKeyword_20; }
	}
	
	
	public class SeverityKindElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "SeverityKind");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cErrorEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cErrorErrorKeyword_0_0 = (Keyword)cErrorEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cWarningEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cWarningWarningKeyword_1_0 = (Keyword)cWarningEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cInfoEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cInfoInfoKeyword_2_0 = (Keyword)cInfoEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cIgnoreEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cIgnoreIgnoreKeyword_3_0 = (Keyword)cIgnoreEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum SeverityKind:
		//	error | warning | info | ignore;
		public EnumRule getRule() { return rule; }

		//error | warning | info | ignore
		public Alternatives getAlternatives() { return cAlternatives; }

		//error
		public EnumLiteralDeclaration getErrorEnumLiteralDeclaration_0() { return cErrorEnumLiteralDeclaration_0; }

		//"error"
		public Keyword getErrorErrorKeyword_0_0() { return cErrorErrorKeyword_0_0; }

		//warning
		public EnumLiteralDeclaration getWarningEnumLiteralDeclaration_1() { return cWarningEnumLiteralDeclaration_1; }

		//"warning"
		public Keyword getWarningWarningKeyword_1_0() { return cWarningWarningKeyword_1_0; }

		//info
		public EnumLiteralDeclaration getInfoEnumLiteralDeclaration_2() { return cInfoEnumLiteralDeclaration_2; }

		//"info"
		public Keyword getInfoInfoKeyword_2_0() { return cInfoInfoKeyword_2_0; }

		//ignore
		public EnumLiteralDeclaration getIgnoreEnumLiteralDeclaration_3() { return cIgnoreEnumLiteralDeclaration_3; }

		//"ignore"
		public Keyword getIgnoreIgnoreKeyword_3_0() { return cIgnoreIgnoreKeyword_3_0; }
	}

	public class TriggerKindElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "TriggerKind");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cFastEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cFastLiveKeyword_0_0 = (Keyword)cFastEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNormalEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNormalOnSaveKeyword_1_0 = (Keyword)cNormalEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cExpensiveEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cExpensiveOnDemandKeyword_2_0 = (Keyword)cExpensiveEnumLiteralDeclaration_2.eContents().get(0);
		
		//// we avoid using CheckKind to simplify writing expressions...
		//enum TriggerKind:
		//	fast="live" | normal="onSave" | expensive="onDemand";
		public EnumRule getRule() { return rule; }

		//fast="live" | normal="onSave" | expensive="onDemand"
		public Alternatives getAlternatives() { return cAlternatives; }

		//fast="live"
		public EnumLiteralDeclaration getFastEnumLiteralDeclaration_0() { return cFastEnumLiteralDeclaration_0; }

		//"live"
		public Keyword getFastLiveKeyword_0_0() { return cFastLiveKeyword_0_0; }

		//normal="onSave"
		public EnumLiteralDeclaration getNormalEnumLiteralDeclaration_1() { return cNormalEnumLiteralDeclaration_1; }

		//"onSave"
		public Keyword getNormalOnSaveKeyword_1_0() { return cNormalOnSaveKeyword_1_0; }

		//expensive="onDemand"
		public EnumLiteralDeclaration getExpensiveEnumLiteralDeclaration_2() { return cExpensiveEnumLiteralDeclaration_2; }

		//"onDemand"
		public Keyword getExpensiveOnDemandKeyword_2_0() { return cExpensiveOnDemandKeyword_2_0; }
	}
	
	private final CheckCatalogElements pCheckCatalog;
	private final XImportSectionElements pXImportSection;
	private final XImportDeclarationElements pXImportDeclaration;
	private final DocumentedElements pDocumented;
	private final ImplicitlyNamedElements pImplicitlyNamed;
	private final CategoryElements pCategory;
	private final CheckElements pCheck;
	private final SeverityRangeElements pSeverityRange;
	private final MemberElements pMember;
	private final ImplementationElements pImplementation;
	private final FormalParameterElements pFormalParameter;
	private final XSimpleFormalParameterDefaultValueLiteralElements pXSimpleFormalParameterDefaultValueLiteral;
	private final XConstantUnaryOperationElements pXConstantUnaryOperation;
	private final XFormalParameterDefaultValueLiteralElements pXFormalParameterDefaultValueLiteral;
	private final XConstantListLiteralElements pXConstantListLiteral;
	private final ContextElements pContext;
	private final ContextVariableElements pContextVariable;
	private final XGuardExpressionElements pXGuardExpression;
	private final XIssueExpressionElements pXIssueExpression;
	private final XPrimaryExpressionElements pXPrimaryExpression;
	private final FeatureCallIDElements pFeatureCallID;
	private final SeverityKindElements unknownRuleSeverityKind;
	private final TriggerKindElements unknownRuleTriggerKind;
	
	private final Grammar grammar;

	private final XbaseWithAnnotationsGrammarAccess gaXbaseWithAnnotations;

	@Inject
	public CheckGrammarAccess(GrammarProvider grammarProvider,
		XbaseWithAnnotationsGrammarAccess gaXbaseWithAnnotations) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaXbaseWithAnnotations = gaXbaseWithAnnotations;
		this.pCheckCatalog = new CheckCatalogElements();
		this.pXImportSection = new XImportSectionElements();
		this.pXImportDeclaration = new XImportDeclarationElements();
		this.pDocumented = new DocumentedElements();
		this.pImplicitlyNamed = new ImplicitlyNamedElements();
		this.pCategory = new CategoryElements();
		this.pCheck = new CheckElements();
		this.pSeverityRange = new SeverityRangeElements();
		this.pMember = new MemberElements();
		this.pImplementation = new ImplementationElements();
		this.pFormalParameter = new FormalParameterElements();
		this.pXSimpleFormalParameterDefaultValueLiteral = new XSimpleFormalParameterDefaultValueLiteralElements();
		this.pXConstantUnaryOperation = new XConstantUnaryOperationElements();
		this.pXFormalParameterDefaultValueLiteral = new XFormalParameterDefaultValueLiteralElements();
		this.pXConstantListLiteral = new XConstantListLiteralElements();
		this.pContext = new ContextElements();
		this.pContextVariable = new ContextVariableElements();
		this.pXGuardExpression = new XGuardExpressionElements();
		this.pXIssueExpression = new XIssueExpressionElements();
		this.pXPrimaryExpression = new XPrimaryExpressionElements();
		this.pFeatureCallID = new FeatureCallIDElements();
		this.unknownRuleSeverityKind = new SeverityKindElements();
		this.unknownRuleTriggerKind = new TriggerKindElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.avaloq.tools.ddk.check.Check".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public XbaseWithAnnotationsGrammarAccess getXbaseWithAnnotationsGrammarAccess() {
		return gaXbaseWithAnnotations;
	}

	
	//CheckCatalog:
	//	{CheckCatalog} "package" packageName=QualifiedName imports=XImportSection final?="final"? "catalog" name=ValidID
	//	("for" "grammar" ^grammar=[xtext::Grammar|QualifiedName])? "{" (categories+=Category |
	//	implementations+=Implementation | checks+=Check | members+=Member)* "}";
	public CheckCatalogElements getCheckCatalogAccess() {
		return pCheckCatalog;
	}
	
	public ParserRule getCheckCatalogRule() {
		return getCheckCatalogAccess().getRule();
	}

	//// Override (inherited via xbase->xtype) to force creation of a (possibly empty) XImportSection
	//XImportSection returns xtype::XImportSection:
	//	{xtype::XImportSection} importDeclarations+=XImportDeclaration*;
	public XImportSectionElements getXImportSectionAccess() {
		return pXImportSection;
	}
	
	public ParserRule getXImportSectionRule() {
		return getXImportSectionAccess().getRule();
	}

	//// Override (inherited via xbase->xtype) to restrict to our syntax. No static imports. (Backwards compatibility; would introduce a new keyword)
	//XImportDeclaration returns xtype::XImportDeclaration:
	//	"import" (importedType=[types::JvmDeclaredType|QualifiedName] | importedNamespace=QualifiedNameWithWildcard) ";"?;
	public XImportDeclarationElements getXImportDeclarationAccess() {
		return pXImportDeclaration;
	}
	
	public ParserRule getXImportDeclarationRule() {
		return getXImportDeclarationAccess().getRule();
	}

	//Documented:
	//	CheckCatalog | Check | Category | Context | Implementation | Member;
	public DocumentedElements getDocumentedAccess() {
		return pDocumented;
	}
	
	public ParserRule getDocumentedRule() {
		return getDocumentedAccess().getRule();
	}

	//ImplicitlyNamed:
	//	Check | Category;
	public ImplicitlyNamedElements getImplicitlyNamedAccess() {
		return pImplicitlyNamed;
	}
	
	public ParserRule getImplicitlyNamedRule() {
		return getImplicitlyNamedAccess().getRule();
	}

	//Category:
	//	"category" id=ValidID? label=STRING "{" checks+=Check* "}";
	public CategoryElements getCategoryAccess() {
		return pCategory;
	}
	
	public ParserRule getCategoryRule() {
		return getCategoryAccess().getRule();
	}

	//Check:
	//	severityRange=SeverityRange? final?="final"? kind=TriggerKind? defaultSeverity=SeverityKind id=ValidID? label=STRING
	//	("(" (formalParameters+=FormalParameter ("," formalParameters+=FormalParameter)*)? ")")? ("message"
	//	givenMessage=STRING)? ("{" contexts+=Context* "}" | contexts+=Context?);
	public CheckElements getCheckAccess() {
		return pCheck;
	}
	
	public ParserRule getCheckRule() {
		return getCheckAccess().getRule();
	}

	////TODO check duplicate names, qualified names don't include category
	//SeverityRange:
	//	"@" "SeverityRange" "(" minSeverity=SeverityKind ".." maxSeverity=SeverityKind //TODO  verification not allowed for final
	//	")";
	public SeverityRangeElements getSeverityRangeAccess() {
		return pSeverityRange;
	}
	
	public ParserRule getSeverityRangeRule() {
		return getSeverityRangeAccess().getRule();
	}

	//Member:
	//	annotations+=XAnnotation* type=JvmTypeReference name=ValidID (OpSingleAssign value=XOrExpression)? // TODO: check if semicolon necessary?
	//	";";
	public MemberElements getMemberAccess() {
		return pMember;
	}
	
	public ParserRule getMemberRule() {
		return getMemberAccess().getRule();
	}

	//Implementation:
	//	"def" name=ValidID context=Context;
	public ImplementationElements getImplementationAccess() {
		return pImplementation;
	}
	
	public ParserRule getImplementationRule() {
		return getImplementationAccess().getRule();
	}

	/// *
	// *   Parameter Description (incl type and default values)
	// * / // TODO how can formal parameters be referenced from within a 'def' Implementation clause?
	//FormalParameter:
	//	type=JvmParameterizedTypeReference name=ValidID "=" right=XFormalParameterDefaultValueLiteral label=STRING?;
	public FormalParameterElements getFormalParameterAccess() {
		return pFormalParameter;
	}
	
	public ParserRule getFormalParameterRule() {
		return getFormalParameterAccess().getRule();
	}

	////TODO resolve the allowed types either in scopes or in validations
	////TODO validate the default values according to the type.
	//XSimpleFormalParameterDefaultValueLiteral returns xbase::XExpression:
	//	XBooleanLiteral | XNumberLiteral | XStringLiteral;
	public XSimpleFormalParameterDefaultValueLiteralElements getXSimpleFormalParameterDefaultValueLiteralAccess() {
		return pXSimpleFormalParameterDefaultValueLiteral;
	}
	
	public ParserRule getXSimpleFormalParameterDefaultValueLiteralRule() {
		return getXSimpleFormalParameterDefaultValueLiteralAccess().getRule();
	}

	//XConstantUnaryOperation returns xbase::XExpression:
	//	{xbase::XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XConstantUnaryOperation |
	//	XSimpleFormalParameterDefaultValueLiteral;
	public XConstantUnaryOperationElements getXConstantUnaryOperationAccess() {
		return pXConstantUnaryOperation;
	}
	
	public ParserRule getXConstantUnaryOperationRule() {
		return getXConstantUnaryOperationAccess().getRule();
	}

	//// todo add support for enumerations
	//XFormalParameterDefaultValueLiteral returns xbase::XExpression:
	//	XConstantUnaryOperation | XConstantListLiteral;
	public XFormalParameterDefaultValueLiteralElements getXFormalParameterDefaultValueLiteralAccess() {
		return pXFormalParameterDefaultValueLiteral;
	}
	
	public ParserRule getXFormalParameterDefaultValueLiteralRule() {
		return getXFormalParameterDefaultValueLiteralAccess().getRule();
	}

	//XConstantListLiteral returns xbase::XListLiteral:
	//	{xbase::XListLiteral} "#" "[" (elements+=XConstantUnaryOperation ("," elements+=XConstantUnaryOperation)*)? "]";
	public XConstantListLiteralElements getXConstantListLiteralAccess() {
		return pXConstantListLiteral;
	}
	
	public ParserRule getXConstantListLiteralRule() {
		return getXConstantListLiteralAccess().getRule();
	}

	/// *
	// *   Context Description (incl constraint?)
	// * / Context:
	//	"for" contextVariable=ContextVariable constraint=XBlockExpression;
	public ContextElements getContextAccess() {
		return pContext;
	}
	
	public ParserRule getContextRule() {
		return getContextAccess().getRule();
	}

	//ContextVariable:
	//	type=JvmTypeReference name=ValidID?;
	public ContextVariableElements getContextVariableAccess() {
		return pContextVariable;
	}
	
	public ParserRule getContextVariableRule() {
		return getContextVariableAccess().getRule();
	}

	///// * Adding Guards and Issues to the possible expressions * /
	//XGuardExpression returns xbase::XExpression:
	//	{XGuardExpression} "guard" guard=XExpression;
	public XGuardExpressionElements getXGuardExpressionAccess() {
		return pXGuardExpression;
	}
	
	public ParserRule getXGuardExpressionRule() {
		return getXGuardExpressionAccess().getRule();
	}

	//XIssueExpression returns xbase::XExpression:
	//	{XIssueExpression} "issue" => check=[Check|QualifiedName]? ("on" ("#"
	//	markerFeature=[ecore::EStructuralFeature|ValidID] // we list the possible choices to help antlr
	//	| markerObject=XExpression ("#" markerFeature=[ecore::EStructuralFeature|FeatureCallID])?) ("[" markerIndex=XExpression
	//	"]")?)? ("message" message=XExpression)? ("bind" "(" messageParameters+=XExpression (","
	//	messageParameters+=XExpression)* ")")? //TODO rename as bindings
	//	("data" issueCode=ValidID? "(" issueData+=XExpression ("," issueData+=XExpression)* ")")?;
	public XIssueExpressionElements getXIssueExpressionAccess() {
		return pXIssueExpression;
	}
	
	public ParserRule getXIssueExpressionRule() {
		return getXIssueExpressionAccess().getRule();
	}

	//XPrimaryExpression returns xbase::XExpression:
	//	XConstructorCall | XBlockExpression | XSwitchExpression | XSynchronizedExpression | XFeatureCall | XLiteral |
	//	XIfExpression | XForLoopExpression | XBasicForLoopExpression | XWhileExpression | XDoWhileExpression |
	//	XThrowExpression | XReturnExpression | XTryCatchFinallyExpression | XParenthesizedExpression | // <-new
	//	XGuardExpression | // <-new
	//	XIssueExpression;
	public XPrimaryExpressionElements getXPrimaryExpressionAccess() {
		return pXPrimaryExpression;
	}
	
	public ParserRule getXPrimaryExpressionRule() {
		return getXPrimaryExpressionAccess().getRule();
	}

	//// We cannot add any identifier here that also starts an XPrimaryExpression. ('for', 'guard', 'issue'). Also, don't add the Java keywords
	//// 'package' or 'final'. Let's at least allow all other keywords as member IDs in a chained feature call.
	//FeatureCallID:
	//	ValidID | "extends" | "static" | "import" | // Inherited from xbase
	//	"extension" | "catalog" | "grammar" | "with" | "category" | "message" | "on" | "bind" | "data" | "SeverityRange" |
	//	"error" | "warning" | "info" | // SeverityKind
	//	"ignore" | "live" | "onSave" | // TriggerKind
	//	"onDemand";
	public FeatureCallIDElements getFeatureCallIDAccess() {
		return pFeatureCallID;
	}
	
	public ParserRule getFeatureCallIDRule() {
		return getFeatureCallIDAccess().getRule();
	}

	//enum SeverityKind:
	//	error | warning | info | ignore;
	public SeverityKindElements getSeverityKindAccess() {
		return unknownRuleSeverityKind;
	}
	
	public EnumRule getSeverityKindRule() {
		return getSeverityKindAccess().getRule();
	}

	//// we avoid using CheckKind to simplify writing expressions...
	//enum TriggerKind:
	//	fast="live" | normal="onSave" | expensive="onDemand";
	public TriggerKindElements getTriggerKindAccess() {
		return unknownRuleTriggerKind;
	}
	
	public EnumRule getTriggerKindRule() {
		return getTriggerKindAccess().getRule();
	}

	//XAnnotation:
	//	{XAnnotation} "@" annotationType=[types::JvmAnnotationType|QualifiedName] ("("
	//	(elementValuePairs+=XAnnotationElementValuePair ("," elementValuePairs+=XAnnotationElementValuePair)* |
	//	value=XAnnotationElementValueOrCommaList)? ")")?;
	public XbaseWithAnnotationsGrammarAccess.XAnnotationElements getXAnnotationAccess() {
		return gaXbaseWithAnnotations.getXAnnotationAccess();
	}
	
	public ParserRule getXAnnotationRule() {
		return getXAnnotationAccess().getRule();
	}

	//XAnnotationElementValuePair:
	//	=> (element=[types::JvmOperation|ValidID] "=") value=XAnnotationElementValue;
	public XbaseWithAnnotationsGrammarAccess.XAnnotationElementValuePairElements getXAnnotationElementValuePairAccess() {
		return gaXbaseWithAnnotations.getXAnnotationElementValuePairAccess();
	}
	
	public ParserRule getXAnnotationElementValuePairRule() {
		return getXAnnotationElementValuePairAccess().getRule();
	}

	//XAnnotationElementValueOrCommaList returns xbase::XExpression:
	//	=> ({xbase::XListLiteral} "#" "[") (elements+=XAnnotationOrExpression ("," elements+=XAnnotationOrExpression)*)? "]"
	//	| XAnnotationOrExpression ({xbase::XListLiteral.elements+=current} ("," elements+=XAnnotationOrExpression)+)?;
	public XbaseWithAnnotationsGrammarAccess.XAnnotationElementValueOrCommaListElements getXAnnotationElementValueOrCommaListAccess() {
		return gaXbaseWithAnnotations.getXAnnotationElementValueOrCommaListAccess();
	}
	
	public ParserRule getXAnnotationElementValueOrCommaListRule() {
		return getXAnnotationElementValueOrCommaListAccess().getRule();
	}

	//XAnnotationElementValue returns xbase::XExpression:
	//	=> ({xbase::XListLiteral} "#" "[") (elements+=XAnnotationOrExpression ("," elements+=XAnnotationOrExpression)*)? "]"
	//	| XAnnotationOrExpression;
	public XbaseWithAnnotationsGrammarAccess.XAnnotationElementValueElements getXAnnotationElementValueAccess() {
		return gaXbaseWithAnnotations.getXAnnotationElementValueAccess();
	}
	
	public ParserRule getXAnnotationElementValueRule() {
		return getXAnnotationElementValueAccess().getRule();
	}

	//XAnnotationOrExpression returns xbase::XExpression:
	//	XAnnotation | XExpression;
	public XbaseWithAnnotationsGrammarAccess.XAnnotationOrExpressionElements getXAnnotationOrExpressionAccess() {
		return gaXbaseWithAnnotations.getXAnnotationOrExpressionAccess();
	}
	
	public ParserRule getXAnnotationOrExpressionRule() {
		return getXAnnotationOrExpressionAccess().getRule();
	}

	//XExpression:
	//	XAssignment;
	public XbaseGrammarAccess.XExpressionElements getXExpressionAccess() {
		return gaXbaseWithAnnotations.getXExpressionAccess();
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}

	//XAssignment returns XExpression:
	//	{XAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign value=XAssignment | XOrExpression
	//	(=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMultiAssign])
	//	rightOperand=XAssignment)?;
	public XbaseGrammarAccess.XAssignmentElements getXAssignmentAccess() {
		return gaXbaseWithAnnotations.getXAssignmentAccess();
	}
	
	public ParserRule getXAssignmentRule() {
		return getXAssignmentAccess().getRule();
	}

	//OpSingleAssign:
	//	"=";
	public XbaseGrammarAccess.OpSingleAssignElements getOpSingleAssignAccess() {
		return gaXbaseWithAnnotations.getOpSingleAssignAccess();
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}

	//OpMultiAssign:
	//	"+=" | "-=" | "*=" | "/=" | "%=" | "<" "<" "=" | ">" ">"? ">=";
	public XbaseGrammarAccess.OpMultiAssignElements getOpMultiAssignAccess() {
		return gaXbaseWithAnnotations.getOpMultiAssignAccess();
	}
	
	public ParserRule getOpMultiAssignRule() {
		return getOpMultiAssignAccess().getRule();
	}

	//XOrExpression returns XExpression:
	//	XAndExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr])
	//	rightOperand=XAndExpression)*;
	public XbaseGrammarAccess.XOrExpressionElements getXOrExpressionAccess() {
		return gaXbaseWithAnnotations.getXOrExpressionAccess();
	}
	
	public ParserRule getXOrExpressionRule() {
		return getXOrExpressionAccess().getRule();
	}

	//OpOr:
	//	"||";
	public XbaseGrammarAccess.OpOrElements getOpOrAccess() {
		return gaXbaseWithAnnotations.getOpOrAccess();
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}

	//XAndExpression returns XExpression:
	//	XEqualityExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd])
	//	rightOperand=XEqualityExpression)*;
	public XbaseGrammarAccess.XAndExpressionElements getXAndExpressionAccess() {
		return gaXbaseWithAnnotations.getXAndExpressionAccess();
	}
	
	public ParserRule getXAndExpressionRule() {
		return getXAndExpressionAccess().getRule();
	}

	//OpAnd:
	//	"&&";
	public XbaseGrammarAccess.OpAndElements getOpAndAccess() {
		return gaXbaseWithAnnotations.getOpAndAccess();
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}

	//XEqualityExpression returns XExpression:
	//	XRelationalExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
	//	rightOperand=XRelationalExpression)*;
	public XbaseGrammarAccess.XEqualityExpressionElements getXEqualityExpressionAccess() {
		return gaXbaseWithAnnotations.getXEqualityExpressionAccess();
	}
	
	public ParserRule getXEqualityExpressionRule() {
		return getXEqualityExpressionAccess().getRule();
	}

	//OpEquality:
	//	"==" | "!=" | "===" | "!==";
	public XbaseGrammarAccess.OpEqualityElements getOpEqualityAccess() {
		return gaXbaseWithAnnotations.getOpEqualityAccess();
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}

	//XRelationalExpression returns XExpression:
	//	XOtherOperatorExpression (=> ({XInstanceOfExpression.expression=current} "instanceof") type=JvmTypeReference | =>
	//	({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare])
	//	rightOperand=XOtherOperatorExpression)*;
	public XbaseGrammarAccess.XRelationalExpressionElements getXRelationalExpressionAccess() {
		return gaXbaseWithAnnotations.getXRelationalExpressionAccess();
	}
	
	public ParserRule getXRelationalExpressionRule() {
		return getXRelationalExpressionAccess().getRule();
	}

	//OpCompare:
	//	">=" | "<" "=" | ">" | "<";
	public XbaseGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaXbaseWithAnnotations.getOpCompareAccess();
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}

	//XOtherOperatorExpression returns XExpression:
	//	XAdditiveExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOther])
	//	rightOperand=XAdditiveExpression)*;
	public XbaseGrammarAccess.XOtherOperatorExpressionElements getXOtherOperatorExpressionAccess() {
		return gaXbaseWithAnnotations.getXOtherOperatorExpressionAccess();
	}
	
	public ParserRule getXOtherOperatorExpressionRule() {
		return getXOtherOperatorExpressionAccess().getRule();
	}

	//OpOther:
	//	"->" | "..<" | ">" ".." | ".." | "=>" | ">" (=> (">" ">") | ">") | "<" (=> ("<" "<") | "<" | "=>") | "<>" | "?:";
	public XbaseGrammarAccess.OpOtherElements getOpOtherAccess() {
		return gaXbaseWithAnnotations.getOpOtherAccess();
	}
	
	public ParserRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}

	//XAdditiveExpression returns XExpression:
	//	XMultiplicativeExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd])
	//	rightOperand=XMultiplicativeExpression)*;
	public XbaseGrammarAccess.XAdditiveExpressionElements getXAdditiveExpressionAccess() {
		return gaXbaseWithAnnotations.getXAdditiveExpressionAccess();
	}
	
	public ParserRule getXAdditiveExpressionRule() {
		return getXAdditiveExpressionAccess().getRule();
	}

	//OpAdd:
	//	"+" | "-";
	public XbaseGrammarAccess.OpAddElements getOpAddAccess() {
		return gaXbaseWithAnnotations.getOpAddAccess();
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}

	//XMultiplicativeExpression returns XExpression:
	//	XUnaryOperation (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti])
	//	rightOperand=XUnaryOperation)*;
	public XbaseGrammarAccess.XMultiplicativeExpressionElements getXMultiplicativeExpressionAccess() {
		return gaXbaseWithAnnotations.getXMultiplicativeExpressionAccess();
	}
	
	public ParserRule getXMultiplicativeExpressionRule() {
		return getXMultiplicativeExpressionAccess().getRule();
	}

	//OpMulti:
	//	"*" | "**" | "/" | "%";
	public XbaseGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaXbaseWithAnnotations.getOpMultiAccess();
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}

	//XUnaryOperation returns XExpression:
	//	{XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XUnaryOperation | XCastedExpression;
	public XbaseGrammarAccess.XUnaryOperationElements getXUnaryOperationAccess() {
		return gaXbaseWithAnnotations.getXUnaryOperationAccess();
	}
	
	public ParserRule getXUnaryOperationRule() {
		return getXUnaryOperationAccess().getRule();
	}

	//OpUnary:
	//	"!" | "-" | "+";
	public XbaseGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaXbaseWithAnnotations.getOpUnaryAccess();
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}

	//XCastedExpression returns XExpression:
	//	XPostfixOperation (=> ({XCastedExpression.target=current} "as") type=JvmTypeReference)*;
	public XbaseGrammarAccess.XCastedExpressionElements getXCastedExpressionAccess() {
		return gaXbaseWithAnnotations.getXCastedExpressionAccess();
	}
	
	public ParserRule getXCastedExpressionRule() {
		return getXCastedExpressionAccess().getRule();
	}

	//XPostfixOperation returns XExpression:
	//	XMemberFeatureCall => ({XPostfixOperation.operand=current} feature=[types::JvmIdentifiableElement|OpPostfix])?;
	public XbaseGrammarAccess.XPostfixOperationElements getXPostfixOperationAccess() {
		return gaXbaseWithAnnotations.getXPostfixOperationAccess();
	}
	
	public ParserRule getXPostfixOperationRule() {
		return getXPostfixOperationAccess().getRule();
	}

	//OpPostfix:
	//	"++" | "--";
	public XbaseGrammarAccess.OpPostfixElements getOpPostfixAccess() {
		return gaXbaseWithAnnotations.getOpPostfixAccess();
	}
	
	public ParserRule getOpPostfixRule() {
		return getOpPostfixAccess().getRule();
	}

	//XMemberFeatureCall returns XExpression:
	//	XPrimaryExpression (=> ({XAssignment.assignable=current} ("." | explicitStatic?="::")
	//	feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment | =>
	//	({XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." | explicitStatic?="::")) ("<"
	//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?="(" (memberCallArguments+=XShortClosure
	//	| memberCallArguments+=XExpression ("," memberCallArguments+=XExpression)*)? ")")? memberCallArguments+=XClosure?)*;
	public XbaseGrammarAccess.XMemberFeatureCallElements getXMemberFeatureCallAccess() {
		return gaXbaseWithAnnotations.getXMemberFeatureCallAccess();
	}
	
	public ParserRule getXMemberFeatureCallRule() {
		return getXMemberFeatureCallAccess().getRule();
	}

	//XLiteral returns XExpression:
	//	XCollectionLiteral | XClosure | XBooleanLiteral | XNumberLiteral | XNullLiteral | XStringLiteral | XTypeLiteral;
	public XbaseGrammarAccess.XLiteralElements getXLiteralAccess() {
		return gaXbaseWithAnnotations.getXLiteralAccess();
	}
	
	public ParserRule getXLiteralRule() {
		return getXLiteralAccess().getRule();
	}

	//XCollectionLiteral:
	//	XSetLiteral | XListLiteral;
	public XbaseGrammarAccess.XCollectionLiteralElements getXCollectionLiteralAccess() {
		return gaXbaseWithAnnotations.getXCollectionLiteralAccess();
	}
	
	public ParserRule getXCollectionLiteralRule() {
		return getXCollectionLiteralAccess().getRule();
	}

	//XSetLiteral:
	//	{XSetLiteral} "#" "{" (elements+=XExpression ("," elements+=XExpression)*)? "}";
	public XbaseGrammarAccess.XSetLiteralElements getXSetLiteralAccess() {
		return gaXbaseWithAnnotations.getXSetLiteralAccess();
	}
	
	public ParserRule getXSetLiteralRule() {
		return getXSetLiteralAccess().getRule();
	}

	//XListLiteral:
	//	{XListLiteral} "#" "[" (elements+=XExpression ("," elements+=XExpression)*)? "]";
	public XbaseGrammarAccess.XListLiteralElements getXListLiteralAccess() {
		return gaXbaseWithAnnotations.getXListLiteralAccess();
	}
	
	public ParserRule getXListLiteralRule() {
		return getXListLiteralAccess().getRule();
	}

	//XClosure returns XExpression:
	//	=> ({XClosure} "[") => ((declaredFormalParameters+=JvmFormalParameter (","
	//	declaredFormalParameters+=JvmFormalParameter)*)? explicitSyntax?="|")? expression=XExpressionInClosure "]";
	public XbaseGrammarAccess.XClosureElements getXClosureAccess() {
		return gaXbaseWithAnnotations.getXClosureAccess();
	}
	
	public ParserRule getXClosureRule() {
		return getXClosureAccess().getRule();
	}

	//XExpressionInClosure returns XExpression:
	//	{XBlockExpression} (expressions+=XExpressionOrVarDeclaration ";"?)*;
	public XbaseGrammarAccess.XExpressionInClosureElements getXExpressionInClosureAccess() {
		return gaXbaseWithAnnotations.getXExpressionInClosureAccess();
	}
	
	public ParserRule getXExpressionInClosureRule() {
		return getXExpressionInClosureAccess().getRule();
	}

	//XShortClosure returns XExpression:
	//	=> ({XClosure} (declaredFormalParameters+=JvmFormalParameter ("," declaredFormalParameters+=JvmFormalParameter)*)?
	//	explicitSyntax?="|") expression=XExpression;
	public XbaseGrammarAccess.XShortClosureElements getXShortClosureAccess() {
		return gaXbaseWithAnnotations.getXShortClosureAccess();
	}
	
	public ParserRule getXShortClosureRule() {
		return getXShortClosureAccess().getRule();
	}

	//XParenthesizedExpression returns XExpression:
	//	"(" XExpression ")";
	public XbaseGrammarAccess.XParenthesizedExpressionElements getXParenthesizedExpressionAccess() {
		return gaXbaseWithAnnotations.getXParenthesizedExpressionAccess();
	}
	
	public ParserRule getXParenthesizedExpressionRule() {
		return getXParenthesizedExpressionAccess().getRule();
	}

	//XIfExpression returns XExpression:
	//	{XIfExpression} "if" "(" if=XExpression ")" then=XExpression ("else" else=XExpression)?;
	public XbaseGrammarAccess.XIfExpressionElements getXIfExpressionAccess() {
		return gaXbaseWithAnnotations.getXIfExpressionAccess();
	}
	
	public ParserRule getXIfExpressionRule() {
		return getXIfExpressionAccess().getRule();
	}

	//XSwitchExpression returns XExpression:
	//	{XSwitchExpression} "switch" (=> ("(" declaredParam=JvmFormalParameter ":") switch=XExpression ")" | =>
	//	(declaredParam=JvmFormalParameter ":")? switch=XExpression) "{" cases+=XCasePart* ("default" ":"
	//	default=XExpression)? "}";
	public XbaseGrammarAccess.XSwitchExpressionElements getXSwitchExpressionAccess() {
		return gaXbaseWithAnnotations.getXSwitchExpressionAccess();
	}
	
	public ParserRule getXSwitchExpressionRule() {
		return getXSwitchExpressionAccess().getRule();
	}

	//XCasePart:
	//	{XCasePart} typeGuard=JvmTypeReference? ("case" case=XExpression)? (":" then=XExpression | fallThrough?=",");
	public XbaseGrammarAccess.XCasePartElements getXCasePartAccess() {
		return gaXbaseWithAnnotations.getXCasePartAccess();
	}
	
	public ParserRule getXCasePartRule() {
		return getXCasePartAccess().getRule();
	}

	//XForLoopExpression returns XExpression:
	//	=> ({XForLoopExpression} "for" "(" declaredParam=JvmFormalParameter ":") forExpression=XExpression ")"
	//	eachExpression=XExpression;
	public XbaseGrammarAccess.XForLoopExpressionElements getXForLoopExpressionAccess() {
		return gaXbaseWithAnnotations.getXForLoopExpressionAccess();
	}
	
	public ParserRule getXForLoopExpressionRule() {
		return getXForLoopExpressionAccess().getRule();
	}

	//XBasicForLoopExpression returns XExpression:
	//	{XBasicForLoopExpression} "for" "(" (initExpressions+=XExpressionOrVarDeclaration (","
	//	initExpressions+=XExpressionOrVarDeclaration)*)? ";" expression=XExpression? ";" (updateExpressions+=XExpression (","
	//	updateExpressions+=XExpression)*)? ")" eachExpression=XExpression;
	public XbaseGrammarAccess.XBasicForLoopExpressionElements getXBasicForLoopExpressionAccess() {
		return gaXbaseWithAnnotations.getXBasicForLoopExpressionAccess();
	}
	
	public ParserRule getXBasicForLoopExpressionRule() {
		return getXBasicForLoopExpressionAccess().getRule();
	}

	//XWhileExpression returns XExpression:
	//	{XWhileExpression} "while" "(" predicate=XExpression ")" body=XExpression;
	public XbaseGrammarAccess.XWhileExpressionElements getXWhileExpressionAccess() {
		return gaXbaseWithAnnotations.getXWhileExpressionAccess();
	}
	
	public ParserRule getXWhileExpressionRule() {
		return getXWhileExpressionAccess().getRule();
	}

	//XDoWhileExpression returns XExpression:
	//	{XDoWhileExpression} "do" body=XExpression "while" "(" predicate=XExpression ")";
	public XbaseGrammarAccess.XDoWhileExpressionElements getXDoWhileExpressionAccess() {
		return gaXbaseWithAnnotations.getXDoWhileExpressionAccess();
	}
	
	public ParserRule getXDoWhileExpressionRule() {
		return getXDoWhileExpressionAccess().getRule();
	}

	//XBlockExpression returns XExpression:
	//	{XBlockExpression} "{" (expressions+=XExpressionOrVarDeclaration ";"?)* "}";
	public XbaseGrammarAccess.XBlockExpressionElements getXBlockExpressionAccess() {
		return gaXbaseWithAnnotations.getXBlockExpressionAccess();
	}
	
	public ParserRule getXBlockExpressionRule() {
		return getXBlockExpressionAccess().getRule();
	}

	//XExpressionOrVarDeclaration returns XExpression:
	//	XVariableDeclaration | XExpression;
	public XbaseGrammarAccess.XExpressionOrVarDeclarationElements getXExpressionOrVarDeclarationAccess() {
		return gaXbaseWithAnnotations.getXExpressionOrVarDeclarationAccess();
	}
	
	public ParserRule getXExpressionOrVarDeclarationRule() {
		return getXExpressionOrVarDeclarationAccess().getRule();
	}

	//XVariableDeclaration returns XExpression:
	//	{XVariableDeclaration} (writeable?="var" | "val") (=> (type=JvmTypeReference name=ValidID) | name=ValidID) ("="
	//	right=XExpression)?;
	public XbaseGrammarAccess.XVariableDeclarationElements getXVariableDeclarationAccess() {
		return gaXbaseWithAnnotations.getXVariableDeclarationAccess();
	}
	
	public ParserRule getXVariableDeclarationRule() {
		return getXVariableDeclarationAccess().getRule();
	}

	//JvmFormalParameter returns types::JvmFormalParameter:
	//	parameterType=JvmTypeReference? name=ValidID;
	public XbaseGrammarAccess.JvmFormalParameterElements getJvmFormalParameterAccess() {
		return gaXbaseWithAnnotations.getJvmFormalParameterAccess();
	}
	
	public ParserRule getJvmFormalParameterRule() {
		return getJvmFormalParameterAccess().getRule();
	}

	//FullJvmFormalParameter returns types::JvmFormalParameter:
	//	parameterType=JvmTypeReference name=ValidID;
	public XbaseGrammarAccess.FullJvmFormalParameterElements getFullJvmFormalParameterAccess() {
		return gaXbaseWithAnnotations.getFullJvmFormalParameterAccess();
	}
	
	public ParserRule getFullJvmFormalParameterRule() {
		return getFullJvmFormalParameterAccess().getRule();
	}

	//XFeatureCall returns XExpression:
	//	{XFeatureCall} ("<" typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?="(" (featureCallArguments+=XShortClosure
	//	| featureCallArguments+=XExpression ("," featureCallArguments+=XExpression)*)? ")")? featureCallArguments+=XClosure?;
	public XbaseGrammarAccess.XFeatureCallElements getXFeatureCallAccess() {
		return gaXbaseWithAnnotations.getXFeatureCallAccess();
	}
	
	public ParserRule getXFeatureCallRule() {
		return getXFeatureCallAccess().getRule();
	}

	//IdOrSuper:
	//	FeatureCallID | "super";
	public XbaseGrammarAccess.IdOrSuperElements getIdOrSuperAccess() {
		return gaXbaseWithAnnotations.getIdOrSuperAccess();
	}
	
	public ParserRule getIdOrSuperRule() {
		return getIdOrSuperAccess().getRule();
	}

	//XConstructorCall returns XExpression:
	//	{XConstructorCall} "new" constructor=[types::JvmConstructor|QualifiedName] ("<"
	//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")? (=>
	//	explicitConstructorCall?="(" (arguments+=XShortClosure | arguments+=XExpression ("," arguments+=XExpression)*)? ")")?
	//	arguments+=XClosure?;
	public XbaseGrammarAccess.XConstructorCallElements getXConstructorCallAccess() {
		return gaXbaseWithAnnotations.getXConstructorCallAccess();
	}
	
	public ParserRule getXConstructorCallRule() {
		return getXConstructorCallAccess().getRule();
	}

	//XBooleanLiteral returns XExpression:
	//	{XBooleanLiteral} ("false" | isTrue?="true");
	public XbaseGrammarAccess.XBooleanLiteralElements getXBooleanLiteralAccess() {
		return gaXbaseWithAnnotations.getXBooleanLiteralAccess();
	}
	
	public ParserRule getXBooleanLiteralRule() {
		return getXBooleanLiteralAccess().getRule();
	}

	//XNullLiteral returns XExpression:
	//	{XNullLiteral} "null";
	public XbaseGrammarAccess.XNullLiteralElements getXNullLiteralAccess() {
		return gaXbaseWithAnnotations.getXNullLiteralAccess();
	}
	
	public ParserRule getXNullLiteralRule() {
		return getXNullLiteralAccess().getRule();
	}

	//XNumberLiteral returns XExpression:
	//	{XNumberLiteral} value=Number;
	public XbaseGrammarAccess.XNumberLiteralElements getXNumberLiteralAccess() {
		return gaXbaseWithAnnotations.getXNumberLiteralAccess();
	}
	
	public ParserRule getXNumberLiteralRule() {
		return getXNumberLiteralAccess().getRule();
	}

	//XStringLiteral returns XExpression:
	//	{XStringLiteral} value=STRING;
	public XbaseGrammarAccess.XStringLiteralElements getXStringLiteralAccess() {
		return gaXbaseWithAnnotations.getXStringLiteralAccess();
	}
	
	public ParserRule getXStringLiteralRule() {
		return getXStringLiteralAccess().getRule();
	}

	//XTypeLiteral returns XExpression:
	//	{XTypeLiteral} "typeof" "(" type=[types::JvmType|QualifiedName] arrayDimensions+=ArrayBrackets* ")";
	public XbaseGrammarAccess.XTypeLiteralElements getXTypeLiteralAccess() {
		return gaXbaseWithAnnotations.getXTypeLiteralAccess();
	}
	
	public ParserRule getXTypeLiteralRule() {
		return getXTypeLiteralAccess().getRule();
	}

	//XThrowExpression returns XExpression:
	//	{XThrowExpression} "throw" expression=XExpression;
	public XbaseGrammarAccess.XThrowExpressionElements getXThrowExpressionAccess() {
		return gaXbaseWithAnnotations.getXThrowExpressionAccess();
	}
	
	public ParserRule getXThrowExpressionRule() {
		return getXThrowExpressionAccess().getRule();
	}

	//XReturnExpression returns XExpression:
	//	{XReturnExpression} "return" -> expression=XExpression?;
	public XbaseGrammarAccess.XReturnExpressionElements getXReturnExpressionAccess() {
		return gaXbaseWithAnnotations.getXReturnExpressionAccess();
	}
	
	public ParserRule getXReturnExpressionRule() {
		return getXReturnExpressionAccess().getRule();
	}

	//XTryCatchFinallyExpression returns XExpression:
	//	{XTryCatchFinallyExpression} "try" expression=XExpression (catchClauses+=XCatchClause+ ("finally"
	//	finallyExpression=XExpression)? | "finally" finallyExpression=XExpression);
	public XbaseGrammarAccess.XTryCatchFinallyExpressionElements getXTryCatchFinallyExpressionAccess() {
		return gaXbaseWithAnnotations.getXTryCatchFinallyExpressionAccess();
	}
	
	public ParserRule getXTryCatchFinallyExpressionRule() {
		return getXTryCatchFinallyExpressionAccess().getRule();
	}

	//XSynchronizedExpression returns XExpression:
	//	=> ({XSynchronizedExpression} "synchronized" "(") param=XExpression ")" expression=XExpression;
	public XbaseGrammarAccess.XSynchronizedExpressionElements getXSynchronizedExpressionAccess() {
		return gaXbaseWithAnnotations.getXSynchronizedExpressionAccess();
	}
	
	public ParserRule getXSynchronizedExpressionRule() {
		return getXSynchronizedExpressionAccess().getRule();
	}

	//XCatchClause:
	//	"catch" "(" declaredParam=FullJvmFormalParameter ")" expression=XExpression;
	public XbaseGrammarAccess.XCatchClauseElements getXCatchClauseAccess() {
		return gaXbaseWithAnnotations.getXCatchClauseAccess();
	}
	
	public ParserRule getXCatchClauseRule() {
		return getXCatchClauseAccess().getRule();
	}

	//QualifiedName:
	//	ValidID ("." ValidID)*;
	public XbaseGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaXbaseWithAnnotations.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//Number hidden():
	//	HEX | (INT | DECIMAL) ("." (INT | DECIMAL))?;
	public XbaseGrammarAccess.NumberElements getNumberAccess() {
		return gaXbaseWithAnnotations.getNumberAccess();
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}

	/// **
	// * Dummy rule, for "better" downwards compatibility, since GrammarAccess generates non-static inner classes, 
	// * which makes downstream grammars break on classloading, when a rule is removed.
	// * /
	//StaticQualifier:
	//	(ValidID "::")+;
	public XbaseGrammarAccess.StaticQualifierElements getStaticQualifierAccess() {
		return gaXbaseWithAnnotations.getStaticQualifierAccess();
	}
	
	public ParserRule getStaticQualifierRule() {
		return getStaticQualifierAccess().getRule();
	}

	//terminal HEX returns ecore::EString:
	//	("0x" | "0X") ("0".."9" | "a".."f" | "A".."F" | "_")+ ("#" (("b" | "B") ("i" | "I") | ("l" | "L")))?;
	public TerminalRule getHEXRule() {
		return gaXbaseWithAnnotations.getHEXRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9" ("0".."9" | "_")*;
	public TerminalRule getINTRule() {
		return gaXbaseWithAnnotations.getINTRule();
	} 

	//terminal DECIMAL returns ecore::EString:
	//	INT (("e" | "E") ("+" | "-")? INT)? (("b" | "B") ("i" | "I" | "d" | "D") | ("l" | "L" | "d" | "D" | "f" | "F"))?;
	public TerminalRule getDECIMALRule() {
		return gaXbaseWithAnnotations.getDECIMALRule();
	} 

	//JvmTypeReference:
	//	JvmParameterizedTypeReference => ({JvmGenericArrayTypeReference.componentType=current} ArrayBrackets)* |
	//	XFunctionTypeRef;
	public XtypeGrammarAccess.JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return gaXbaseWithAnnotations.getJvmTypeReferenceAccess();
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}

	//ArrayBrackets:
	//	"[" "]";
	public XtypeGrammarAccess.ArrayBracketsElements getArrayBracketsAccess() {
		return gaXbaseWithAnnotations.getArrayBracketsAccess();
	}
	
	public ParserRule getArrayBracketsRule() {
		return getArrayBracketsAccess().getRule();
	}

	//XFunctionTypeRef:
	//	("(" (paramTypes+=JvmTypeReference ("," paramTypes+=JvmTypeReference)*)? ")")? "=>" returnType=JvmTypeReference;
	public XtypeGrammarAccess.XFunctionTypeRefElements getXFunctionTypeRefAccess() {
		return gaXbaseWithAnnotations.getXFunctionTypeRefAccess();
	}
	
	public ParserRule getXFunctionTypeRefRule() {
		return getXFunctionTypeRefAccess().getRule();
	}

	//JvmParameterizedTypeReference:
	//	type=[JvmType|QualifiedName] ("<" arguments+=JvmArgumentTypeReference ("," arguments+=JvmArgumentTypeReference)* ">"
	//	(=> ({JvmInnerTypeReference.outer=current} ".") type=[JvmType|ValidID] ("<" arguments+=JvmArgumentTypeReference (","
	//	arguments+=JvmArgumentTypeReference)* ">")?)*)?;
	public XtypeGrammarAccess.JvmParameterizedTypeReferenceElements getJvmParameterizedTypeReferenceAccess() {
		return gaXbaseWithAnnotations.getJvmParameterizedTypeReferenceAccess();
	}
	
	public ParserRule getJvmParameterizedTypeReferenceRule() {
		return getJvmParameterizedTypeReferenceAccess().getRule();
	}

	//JvmArgumentTypeReference returns JvmTypeReference:
	//	JvmTypeReference | JvmWildcardTypeReference;
	public XtypeGrammarAccess.JvmArgumentTypeReferenceElements getJvmArgumentTypeReferenceAccess() {
		return gaXbaseWithAnnotations.getJvmArgumentTypeReferenceAccess();
	}
	
	public ParserRule getJvmArgumentTypeReferenceRule() {
		return getJvmArgumentTypeReferenceAccess().getRule();
	}

	//JvmWildcardTypeReference:
	//	{JvmWildcardTypeReference} "?" (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded* |
	//	constraints+=JvmLowerBound constraints+=JvmLowerBoundAnded*)?;
	public XtypeGrammarAccess.JvmWildcardTypeReferenceElements getJvmWildcardTypeReferenceAccess() {
		return gaXbaseWithAnnotations.getJvmWildcardTypeReferenceAccess();
	}
	
	public ParserRule getJvmWildcardTypeReferenceRule() {
		return getJvmWildcardTypeReferenceAccess().getRule();
	}

	//JvmUpperBound:
	//	"extends" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundElements getJvmUpperBoundAccess() {
		return gaXbaseWithAnnotations.getJvmUpperBoundAccess();
	}
	
	public ParserRule getJvmUpperBoundRule() {
		return getJvmUpperBoundAccess().getRule();
	}

	//JvmUpperBoundAnded returns JvmUpperBound:
	//	"&" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundAndedElements getJvmUpperBoundAndedAccess() {
		return gaXbaseWithAnnotations.getJvmUpperBoundAndedAccess();
	}
	
	public ParserRule getJvmUpperBoundAndedRule() {
		return getJvmUpperBoundAndedAccess().getRule();
	}

	//JvmLowerBound:
	//	"super" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundElements getJvmLowerBoundAccess() {
		return gaXbaseWithAnnotations.getJvmLowerBoundAccess();
	}
	
	public ParserRule getJvmLowerBoundRule() {
		return getJvmLowerBoundAccess().getRule();
	}

	//JvmLowerBoundAnded returns JvmLowerBound:
	//	"&" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundAndedElements getJvmLowerBoundAndedAccess() {
		return gaXbaseWithAnnotations.getJvmLowerBoundAndedAccess();
	}
	
	public ParserRule getJvmLowerBoundAndedRule() {
		return getJvmLowerBoundAndedAccess().getRule();
	}

	//JvmTypeParameter:
	//	name=ValidID (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded*)?;
	public XtypeGrammarAccess.JvmTypeParameterElements getJvmTypeParameterAccess() {
		return gaXbaseWithAnnotations.getJvmTypeParameterAccess();
	}
	
	public ParserRule getJvmTypeParameterRule() {
		return getJvmTypeParameterAccess().getRule();
	}

	//QualifiedNameWithWildcard:
	//	QualifiedName "." "*";
	public XtypeGrammarAccess.QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return gaXbaseWithAnnotations.getQualifiedNameWithWildcardAccess();
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}

	//ValidID:
	//	ID;
	public XtypeGrammarAccess.ValidIDElements getValidIDAccess() {
		return gaXbaseWithAnnotations.getValidIDAccess();
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}

	//QualifiedNameInStaticImport:
	//	(ValidID ".")+;
	public XtypeGrammarAccess.QualifiedNameInStaticImportElements getQualifiedNameInStaticImportAccess() {
		return gaXbaseWithAnnotations.getQualifiedNameInStaticImportAccess();
	}
	
	public ParserRule getQualifiedNameInStaticImportRule() {
		return getQualifiedNameInStaticImportAccess().getRule();
	}

	//terminal ID returns ecore::EString:
	//	"^"? ("a".."z" | "A".."Z" | "$" | "_") ("a".."z" | "A".."Z" | "$" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaXbaseWithAnnotations.getIDRule();
	} 

	//terminal STRING returns ecore::EString:
	//	"\"" ("\\" . / * ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') * / | !("\\" | "\""))* "\""? | "\'" ("\\" .
	//	/ * ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') * / | !("\\" | "\'"))* "\'"?;
	public TerminalRule getSTRINGRule() {
		return gaXbaseWithAnnotations.getSTRINGRule();
	} 

	//terminal ML_COMMENT returns ecore::EString:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaXbaseWithAnnotations.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT returns ecore::EString:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaXbaseWithAnnotations.getSL_COMMENTRule();
	} 

	//terminal WS returns ecore::EString:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaXbaseWithAnnotations.getWSRule();
	} 

	//terminal ANY_OTHER returns ecore::EString:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaXbaseWithAnnotations.getANY_OTHERRule();
	} 
}
