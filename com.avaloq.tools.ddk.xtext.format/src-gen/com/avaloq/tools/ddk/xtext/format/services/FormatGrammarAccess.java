/*
 * generated by Xtext
 */
package com.avaloq.tools.ddk.xtext.format.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.xbase.annotations.services.XbaseWithAnnotationsGrammarAccess;
import org.eclipse.xtext.xbase.services.XbaseGrammarAccess;
import org.eclipse.xtext.xbase.services.XtypeGrammarAccess;

@Singleton
public class FormatGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class FormatConfigurationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.avaloq.tools.ddk.xtext.format.Format.FormatConfiguration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFormatterKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cForKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTargetGrammarAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTargetGrammarGrammarCrossReference_2_0 = (CrossReference)cTargetGrammarAssignment_2.eContents().get(0);
		private final RuleCall cTargetGrammarGrammarDottedIDParserRuleCall_2_0_1 = (RuleCall)cTargetGrammarGrammarCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cWithKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cExtendedFormatConfigurationAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cExtendedFormatConfigurationFormatConfigurationCrossReference_3_1_0 = (CrossReference)cExtendedFormatConfigurationAssignment_3_1.eContents().get(0);
		private final RuleCall cExtendedFormatConfigurationFormatConfigurationDottedIDParserRuleCall_3_1_0_1 = (RuleCall)cExtendedFormatConfigurationFormatConfigurationCrossReference_3_1_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cExtendsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cFormatterBaseClassAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cFormatterBaseClassJvmDeclaredTypeCrossReference_4_1_0 = (CrossReference)cFormatterBaseClassAssignment_4_1.eContents().get(0);
		private final RuleCall cFormatterBaseClassJvmDeclaredTypeQualifiedNameParserRuleCall_4_1_0_1 = (RuleCall)cFormatterBaseClassJvmDeclaredTypeCrossReference_4_1_0.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cConstKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cConstantsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cConstantsConstantParserRuleCall_5_1_0 = (RuleCall)cConstantsAssignment_5_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final Assignment cRulesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cRulesRuleParserRuleCall_6_0 = (RuleCall)cRulesAssignment_6.eContents().get(0);
		
		//FormatConfiguration:
		//	'formatter' 'for' targetGrammar=[xtext::Grammar|DottedID] ('with'
		//	extendedFormatConfiguration=[FormatConfiguration|DottedID])? ('extends'
		//	formatterBaseClass=[types::JvmDeclaredType|QualifiedName])? ('const' constants+=Constant ';')* rules+=Rule*;
		@Override public ParserRule getRule() { return rule; }

		//'formatter' 'for' targetGrammar=[xtext::Grammar|DottedID] ('with'
		//extendedFormatConfiguration=[FormatConfiguration|DottedID])? ('extends'
		//formatterBaseClass=[types::JvmDeclaredType|QualifiedName])? ('const' constants+=Constant ';')* rules+=Rule*
		public Group getGroup() { return cGroup; }

		//'formatter'
		public Keyword getFormatterKeyword_0() { return cFormatterKeyword_0; }

		//'for'
		public Keyword getForKeyword_1() { return cForKeyword_1; }

		//targetGrammar=[xtext::Grammar|DottedID]
		public Assignment getTargetGrammarAssignment_2() { return cTargetGrammarAssignment_2; }

		//[xtext::Grammar|DottedID]
		public CrossReference getTargetGrammarGrammarCrossReference_2_0() { return cTargetGrammarGrammarCrossReference_2_0; }

		//DottedID
		public RuleCall getTargetGrammarGrammarDottedIDParserRuleCall_2_0_1() { return cTargetGrammarGrammarDottedIDParserRuleCall_2_0_1; }

		//('with' extendedFormatConfiguration=[FormatConfiguration|DottedID])?
		public Group getGroup_3() { return cGroup_3; }

		//'with'
		public Keyword getWithKeyword_3_0() { return cWithKeyword_3_0; }

		//extendedFormatConfiguration=[FormatConfiguration|DottedID]
		public Assignment getExtendedFormatConfigurationAssignment_3_1() { return cExtendedFormatConfigurationAssignment_3_1; }

		//[FormatConfiguration|DottedID]
		public CrossReference getExtendedFormatConfigurationFormatConfigurationCrossReference_3_1_0() { return cExtendedFormatConfigurationFormatConfigurationCrossReference_3_1_0; }

		//DottedID
		public RuleCall getExtendedFormatConfigurationFormatConfigurationDottedIDParserRuleCall_3_1_0_1() { return cExtendedFormatConfigurationFormatConfigurationDottedIDParserRuleCall_3_1_0_1; }

		//('extends' formatterBaseClass=[types::JvmDeclaredType|QualifiedName])?
		public Group getGroup_4() { return cGroup_4; }

		//'extends'
		public Keyword getExtendsKeyword_4_0() { return cExtendsKeyword_4_0; }

		//formatterBaseClass=[types::JvmDeclaredType|QualifiedName]
		public Assignment getFormatterBaseClassAssignment_4_1() { return cFormatterBaseClassAssignment_4_1; }

		//[types::JvmDeclaredType|QualifiedName]
		public CrossReference getFormatterBaseClassJvmDeclaredTypeCrossReference_4_1_0() { return cFormatterBaseClassJvmDeclaredTypeCrossReference_4_1_0; }

		//QualifiedName
		public RuleCall getFormatterBaseClassJvmDeclaredTypeQualifiedNameParserRuleCall_4_1_0_1() { return cFormatterBaseClassJvmDeclaredTypeQualifiedNameParserRuleCall_4_1_0_1; }

		//('const' constants+=Constant ';')*
		public Group getGroup_5() { return cGroup_5; }

		//'const'
		public Keyword getConstKeyword_5_0() { return cConstKeyword_5_0; }

		//constants+=Constant
		public Assignment getConstantsAssignment_5_1() { return cConstantsAssignment_5_1; }

		//Constant
		public RuleCall getConstantsConstantParserRuleCall_5_1_0() { return cConstantsConstantParserRuleCall_5_1_0; }

		//';'
		public Keyword getSemicolonKeyword_5_2() { return cSemicolonKeyword_5_2; }

		//rules+=Rule*
		public Assignment getRulesAssignment_6() { return cRulesAssignment_6; }

		//Rule
		public RuleCall getRulesRuleParserRuleCall_6_0() { return cRulesRuleParserRuleCall_6_0; }
	}

	public class ConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.avaloq.tools.ddk.xtext.format.Format.Constant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cIntTypeAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final Keyword cIntTypeIntKeyword_0_0_0 = (Keyword)cIntTypeAssignment_0_0.eContents().get(0);
		private final Assignment cStringTypeAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final Keyword cStringTypeStringKeyword_0_1_0 = (Keyword)cStringTypeAssignment_0_1.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cIntValueAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cIntValueIntObjectParserRuleCall_3_0_0 = (RuleCall)cIntValueAssignment_3_0.eContents().get(0);
		private final Assignment cStringValueAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cStringValueSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cStringValueAssignment_3_1.eContents().get(0);
		
		//Constant:
		//	(intType?='int' | stringType?='String')? //specifying the type is optional
		// name=ID '=' (intValue=IntObject |
		//	stringValue=STRING);
		@Override public ParserRule getRule() { return rule; }

		//(intType?='int' | stringType?='String')? //specifying the type is optional
		// name=ID '=' (intValue=IntObject |
		//stringValue=STRING)
		public Group getGroup() { return cGroup; }

		//(intType?='int' | stringType?='String')?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//intType?='int'
		public Assignment getIntTypeAssignment_0_0() { return cIntTypeAssignment_0_0; }

		//'int'
		public Keyword getIntTypeIntKeyword_0_0_0() { return cIntTypeIntKeyword_0_0_0; }

		//stringType?='String'
		public Assignment getStringTypeAssignment_0_1() { return cStringTypeAssignment_0_1; }

		//'String'
		public Keyword getStringTypeStringKeyword_0_1_0() { return cStringTypeStringKeyword_0_1_0; }

		////specifying the type is optional
		// name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//intValue=IntObject | stringValue=STRING
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//intValue=IntObject
		public Assignment getIntValueAssignment_3_0() { return cIntValueAssignment_3_0; }

		//IntObject
		public RuleCall getIntValueIntObjectParserRuleCall_3_0_0() { return cIntValueIntObjectParserRuleCall_3_0_0; }

		//stringValue=STRING
		public Assignment getStringValueAssignment_3_1() { return cStringValueAssignment_3_1; }

		//STRING
		public RuleCall getStringValueSTRINGTerminalRuleCall_3_1_0() { return cStringValueSTRINGTerminalRuleCall_3_1_0; }
	}

	public class IntValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.avaloq.tools.ddk.xtext.format.Format.IntValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cLiteralAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cLiteralIntObjectParserRuleCall_0_0 = (RuleCall)cLiteralAssignment_0.eContents().get(0);
		private final Assignment cReferenceAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final CrossReference cReferenceConstantCrossReference_1_0 = (CrossReference)cReferenceAssignment_1.eContents().get(0);
		private final RuleCall cReferenceConstantDottedIDParserRuleCall_1_0_1 = (RuleCall)cReferenceConstantCrossReference_1_0.eContents().get(1);
		
		//IntValue:
		//	literal=IntObject | reference=[Constant|DottedID];
		@Override public ParserRule getRule() { return rule; }

		//literal=IntObject | reference=[Constant|DottedID]
		public Alternatives getAlternatives() { return cAlternatives; }

		//literal=IntObject
		public Assignment getLiteralAssignment_0() { return cLiteralAssignment_0; }

		//IntObject
		public RuleCall getLiteralIntObjectParserRuleCall_0_0() { return cLiteralIntObjectParserRuleCall_0_0; }

		//reference=[Constant|DottedID]
		public Assignment getReferenceAssignment_1() { return cReferenceAssignment_1; }

		//[Constant|DottedID]
		public CrossReference getReferenceConstantCrossReference_1_0() { return cReferenceConstantCrossReference_1_0; }

		//DottedID
		public RuleCall getReferenceConstantDottedIDParserRuleCall_1_0_1() { return cReferenceConstantDottedIDParserRuleCall_1_0_1; }
	}

	public class StringValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.avaloq.tools.ddk.xtext.format.Format.StringValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cLiteralAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cLiteralSTRINGTerminalRuleCall_0_0 = (RuleCall)cLiteralAssignment_0.eContents().get(0);
		private final Assignment cReferenceAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final CrossReference cReferenceConstantCrossReference_1_0 = (CrossReference)cReferenceAssignment_1.eContents().get(0);
		private final RuleCall cReferenceConstantDottedIDParserRuleCall_1_0_1 = (RuleCall)cReferenceConstantCrossReference_1_0.eContents().get(1);
		
		//StringValue:
		//	literal=STRING | reference=[Constant|DottedID];
		@Override public ParserRule getRule() { return rule; }

		//literal=STRING | reference=[Constant|DottedID]
		public Alternatives getAlternatives() { return cAlternatives; }

		//literal=STRING
		public Assignment getLiteralAssignment_0() { return cLiteralAssignment_0; }

		//STRING
		public RuleCall getLiteralSTRINGTerminalRuleCall_0_0() { return cLiteralSTRINGTerminalRuleCall_0_0; }

		//reference=[Constant|DottedID]
		public Assignment getReferenceAssignment_1() { return cReferenceAssignment_1; }

		//[Constant|DottedID]
		public CrossReference getReferenceConstantCrossReference_1_0() { return cReferenceConstantCrossReference_1_0; }

		//DottedID
		public RuleCall getReferenceConstantDottedIDParserRuleCall_1_0_1() { return cReferenceConstantDottedIDParserRuleCall_1_0_1; }
	}

	public class RuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.avaloq.tools.ddk.xtext.format.Format.Rule");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cWildcardRuleParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cGrammarRuleParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Rule:
		//	WildcardRule | GrammarRule;
		@Override public ParserRule getRule() { return rule; }

		//WildcardRule | GrammarRule
		public Alternatives getAlternatives() { return cAlternatives; }

		//WildcardRule
		public RuleCall getWildcardRuleParserRuleCall_0() { return cWildcardRuleParserRuleCall_0; }

		//GrammarRule
		public RuleCall getGrammarRuleParserRuleCall_1() { return cGrammarRuleParserRuleCall_1; }
	}

	public class GrammarRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.avaloq.tools.ddk.xtext.format.Format.GrammarRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOverrideAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cOverrideOverrideKeyword_0_0 = (Keyword)cOverrideAssignment_0.eContents().get(0);
		private final Assignment cTargetRuleAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTargetRuleAbstractRuleCrossReference_1_0 = (CrossReference)cTargetRuleAssignment_1.eContents().get(0);
		private final RuleCall cTargetRuleAbstractRuleIDTerminalRuleCall_1_0_1 = (RuleCall)cTargetRuleAbstractRuleCrossReference_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cDirectivesAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cDirectivesGrammarRuleDirectiveParserRuleCall_3_0_0 = (RuleCall)cDirectivesAssignment_3_0.eContents().get(0);
		private final Assignment cDirectivesAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cDirectivesGroupBlockParserRuleCall_3_1_0 = (RuleCall)cDirectivesAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//GrammarRule:
		//	override?='override'? targetRule=[xtext::AbstractRule] '{' (directives+=GrammarRuleDirective |
		//	directives+=GroupBlock)* '}';
		@Override public ParserRule getRule() { return rule; }

		//override?='override'? targetRule=[xtext::AbstractRule] '{' (directives+=GrammarRuleDirective | directives+=GroupBlock)*
		//'}'
		public Group getGroup() { return cGroup; }

		//override?='override'?
		public Assignment getOverrideAssignment_0() { return cOverrideAssignment_0; }

		//'override'
		public Keyword getOverrideOverrideKeyword_0_0() { return cOverrideOverrideKeyword_0_0; }

		//targetRule=[xtext::AbstractRule]
		public Assignment getTargetRuleAssignment_1() { return cTargetRuleAssignment_1; }

		//[xtext::AbstractRule]
		public CrossReference getTargetRuleAbstractRuleCrossReference_1_0() { return cTargetRuleAbstractRuleCrossReference_1_0; }

		//ID
		public RuleCall getTargetRuleAbstractRuleIDTerminalRuleCall_1_0_1() { return cTargetRuleAbstractRuleIDTerminalRuleCall_1_0_1; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//(directives+=GrammarRuleDirective | directives+=GroupBlock)*
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//directives+=GrammarRuleDirective
		public Assignment getDirectivesAssignment_3_0() { return cDirectivesAssignment_3_0; }

		//GrammarRuleDirective
		public RuleCall getDirectivesGrammarRuleDirectiveParserRuleCall_3_0_0() { return cDirectivesGrammarRuleDirectiveParserRuleCall_3_0_0; }

		//directives+=GroupBlock
		public Assignment getDirectivesAssignment_3_1() { return cDirectivesAssignment_3_1; }

		//GroupBlock
		public RuleCall getDirectivesGroupBlockParserRuleCall_3_1_0() { return cDirectivesGroupBlockParserRuleCall_3_1_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class WildcardRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.avaloq.tools.ddk.xtext.format.Format.WildcardRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cWildcardRuleAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cOverrideAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cOverrideOverrideKeyword_1_0 = (Keyword)cOverrideAssignment_1.eContents().get(0);
		private final Keyword cAsteriskKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cDirectivesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDirectivesWildcardRuleDirectiveParserRuleCall_4_0 = (RuleCall)cDirectivesAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//WildcardRule:
		//	{WildcardRule} override?='override'? '*' '{' directives+=WildcardRuleDirective* '}';
		@Override public ParserRule getRule() { return rule; }

		//{WildcardRule} override?='override'? '*' '{' directives+=WildcardRuleDirective* '}'
		public Group getGroup() { return cGroup; }

		//{WildcardRule}
		public Action getWildcardRuleAction_0() { return cWildcardRuleAction_0; }

		//override?='override'?
		public Assignment getOverrideAssignment_1() { return cOverrideAssignment_1; }

		//'override'
		public Keyword getOverrideOverrideKeyword_1_0() { return cOverrideOverrideKeyword_1_0; }

		//'*'
		public Keyword getAsteriskKeyword_2() { return cAsteriskKeyword_2; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//directives+=WildcardRuleDirective*
		public Assignment getDirectivesAssignment_4() { return cDirectivesAssignment_4; }

		//WildcardRuleDirective
		public RuleCall getDirectivesWildcardRuleDirectiveParserRuleCall_4_0() { return cDirectivesWildcardRuleDirectiveParserRuleCall_4_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class GrammarRuleDirectiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.avaloq.tools.ddk.xtext.format.Format.GrammarRuleDirective");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSpecificDirectiveParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cContextFreeDirectiveParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cKeywordPairParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//GrammarRuleDirective:
		//	SpecificDirective | ContextFreeDirective | KeywordPair;
		@Override public ParserRule getRule() { return rule; }

		//SpecificDirective | ContextFreeDirective | KeywordPair
		public Alternatives getAlternatives() { return cAlternatives; }

		//SpecificDirective
		public RuleCall getSpecificDirectiveParserRuleCall_0() { return cSpecificDirectiveParserRuleCall_0; }

		//ContextFreeDirective
		public RuleCall getContextFreeDirectiveParserRuleCall_1() { return cContextFreeDirectiveParserRuleCall_1; }

		//KeywordPair
		public RuleCall getKeywordPairParserRuleCall_2() { return cKeywordPairParserRuleCall_2; }
	}

	public class WildcardRuleDirectiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.avaloq.tools.ddk.xtext.format.Format.WildcardRuleDirective");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cContextFreeDirectiveParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cKeywordPairParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//WildcardRuleDirective:
		//	ContextFreeDirective | KeywordPair;
		@Override public ParserRule getRule() { return rule; }

		//ContextFreeDirective | KeywordPair
		public Alternatives getAlternatives() { return cAlternatives; }

		//ContextFreeDirective
		public RuleCall getContextFreeDirectiveParserRuleCall_0() { return cContextFreeDirectiveParserRuleCall_0; }

		//KeywordPair
		public RuleCall getKeywordPairParserRuleCall_1() { return cKeywordPairParserRuleCall_1; }
	}

	public class GrammarElementReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.avaloq.tools.ddk.xtext.format.Format.GrammarElementReference");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cAssignmentAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final CrossReference cAssignmentAssignmentCrossReference_0_1_0 = (CrossReference)cAssignmentAssignment_0_1.eContents().get(0);
		private final RuleCall cAssignmentAssignmentParameterizedIdentifierParserRuleCall_0_1_0_1 = (RuleCall)cAssignmentAssignmentCrossReference_0_1_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cCommercialAtKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cRuleCallAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cRuleCallRuleCallCrossReference_1_1_0 = (CrossReference)cRuleCallAssignment_1_1.eContents().get(0);
		private final RuleCall cRuleCallRuleCallParameterizedIdentifierParserRuleCall_1_1_0_1 = (RuleCall)cRuleCallRuleCallCrossReference_1_1_0.eContents().get(1);
		private final Assignment cSelfAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final CrossReference cSelfAbstractRuleCrossReference_2_0 = (CrossReference)cSelfAssignment_2.eContents().get(0);
		private final RuleCall cSelfAbstractRuleRuleSelfIdentifierParserRuleCall_2_0_1 = (RuleCall)cSelfAbstractRuleCrossReference_2_0.eContents().get(1);
		private final Assignment cRuleAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final CrossReference cRuleAbstractRuleCrossReference_3_0 = (CrossReference)cRuleAssignment_3.eContents().get(0);
		private final RuleCall cRuleAbstractRuleIdentifierParserRuleCall_3_0_1 = (RuleCall)cRuleAbstractRuleCrossReference_3_0.eContents().get(1);
		private final Assignment cKeywordAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final CrossReference cKeywordKeywordCrossReference_4_0 = (CrossReference)cKeywordAssignment_4.eContents().get(0);
		private final RuleCall cKeywordKeywordParameterizedStringParserRuleCall_4_0_1 = (RuleCall)cKeywordKeywordCrossReference_4_0.eContents().get(1);
		
		//GrammarElementReference:
		//	'=' assignment=[xtext::Assignment|ParameterizedIdentifier] | '@' ruleCall=[xtext::RuleCall|ParameterizedIdentifier] |
		//	self=[xtext::AbstractRule|RuleSelfIdentifier] | rule=[xtext::AbstractRule|Identifier] |
		//	keyword=[xtext::Keyword|ParameterizedString];
		@Override public ParserRule getRule() { return rule; }

		//'=' assignment=[xtext::Assignment|ParameterizedIdentifier] | '@' ruleCall=[xtext::RuleCall|ParameterizedIdentifier] |
		//self=[xtext::AbstractRule|RuleSelfIdentifier] | rule=[xtext::AbstractRule|Identifier] |
		//keyword=[xtext::Keyword|ParameterizedString]
		public Alternatives getAlternatives() { return cAlternatives; }

		//'=' assignment=[xtext::Assignment|ParameterizedIdentifier]
		public Group getGroup_0() { return cGroup_0; }

		//'='
		public Keyword getEqualsSignKeyword_0_0() { return cEqualsSignKeyword_0_0; }

		//assignment=[xtext::Assignment|ParameterizedIdentifier]
		public Assignment getAssignmentAssignment_0_1() { return cAssignmentAssignment_0_1; }

		//[xtext::Assignment|ParameterizedIdentifier]
		public CrossReference getAssignmentAssignmentCrossReference_0_1_0() { return cAssignmentAssignmentCrossReference_0_1_0; }

		//ParameterizedIdentifier
		public RuleCall getAssignmentAssignmentParameterizedIdentifierParserRuleCall_0_1_0_1() { return cAssignmentAssignmentParameterizedIdentifierParserRuleCall_0_1_0_1; }

		//'@' ruleCall=[xtext::RuleCall|ParameterizedIdentifier]
		public Group getGroup_1() { return cGroup_1; }

		//'@'
		public Keyword getCommercialAtKeyword_1_0() { return cCommercialAtKeyword_1_0; }

		//ruleCall=[xtext::RuleCall|ParameterizedIdentifier]
		public Assignment getRuleCallAssignment_1_1() { return cRuleCallAssignment_1_1; }

		//[xtext::RuleCall|ParameterizedIdentifier]
		public CrossReference getRuleCallRuleCallCrossReference_1_1_0() { return cRuleCallRuleCallCrossReference_1_1_0; }

		//ParameterizedIdentifier
		public RuleCall getRuleCallRuleCallParameterizedIdentifierParserRuleCall_1_1_0_1() { return cRuleCallRuleCallParameterizedIdentifierParserRuleCall_1_1_0_1; }

		//self=[xtext::AbstractRule|RuleSelfIdentifier]
		public Assignment getSelfAssignment_2() { return cSelfAssignment_2; }

		//[xtext::AbstractRule|RuleSelfIdentifier]
		public CrossReference getSelfAbstractRuleCrossReference_2_0() { return cSelfAbstractRuleCrossReference_2_0; }

		//RuleSelfIdentifier
		public RuleCall getSelfAbstractRuleRuleSelfIdentifierParserRuleCall_2_0_1() { return cSelfAbstractRuleRuleSelfIdentifierParserRuleCall_2_0_1; }

		//rule=[xtext::AbstractRule|Identifier]
		public Assignment getRuleAssignment_3() { return cRuleAssignment_3; }

		//[xtext::AbstractRule|Identifier]
		public CrossReference getRuleAbstractRuleCrossReference_3_0() { return cRuleAbstractRuleCrossReference_3_0; }

		//Identifier
		public RuleCall getRuleAbstractRuleIdentifierParserRuleCall_3_0_1() { return cRuleAbstractRuleIdentifierParserRuleCall_3_0_1; }

		//keyword=[xtext::Keyword|ParameterizedString]
		public Assignment getKeywordAssignment_4() { return cKeywordAssignment_4; }

		//[xtext::Keyword|ParameterizedString]
		public CrossReference getKeywordKeywordCrossReference_4_0() { return cKeywordKeywordCrossReference_4_0; }

		//ParameterizedString
		public RuleCall getKeywordKeywordParameterizedStringParserRuleCall_4_0_1() { return cKeywordKeywordParameterizedStringParserRuleCall_4_0_1; }
	}

	public class GrammarElementLookupElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.avaloq.tools.ddk.xtext.format.Format.GrammarElementLookup");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cRuleAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final CrossReference cRuleAbstractRuleCrossReference_0_0 = (CrossReference)cRuleAssignment_0.eContents().get(0);
		private final RuleCall cRuleAbstractRuleIdentifierParserRuleCall_0_0_1 = (RuleCall)cRuleAbstractRuleCrossReference_0_0.eContents().get(1);
		private final Assignment cKeywordAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cKeywordSTRINGTerminalRuleCall_1_0 = (RuleCall)cKeywordAssignment_1.eContents().get(0);
		
		//GrammarElementLookup:
		//	rule=[xtext::AbstractRule|Identifier] | keyword=STRING;
		@Override public ParserRule getRule() { return rule; }

		//rule=[xtext::AbstractRule|Identifier] | keyword=STRING
		public Alternatives getAlternatives() { return cAlternatives; }

		//rule=[xtext::AbstractRule|Identifier]
		public Assignment getRuleAssignment_0() { return cRuleAssignment_0; }

		//[xtext::AbstractRule|Identifier]
		public CrossReference getRuleAbstractRuleCrossReference_0_0() { return cRuleAbstractRuleCrossReference_0_0; }

		//Identifier
		public RuleCall getRuleAbstractRuleIdentifierParserRuleCall_0_0_1() { return cRuleAbstractRuleIdentifierParserRuleCall_0_0_1; }

		//keyword=STRING
		public Assignment getKeywordAssignment_1() { return cKeywordAssignment_1; }

		//STRING
		public RuleCall getKeywordSTRINGTerminalRuleCall_1_0() { return cKeywordSTRINGTerminalRuleCall_1_0; }
	}

	public class ContextFreeDirectiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.avaloq.tools.ddk.xtext.format.Format.ContextFreeDirective");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cGrammarElementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cGrammarElementsGrammarElementLookupParserRuleCall_1_0 = (RuleCall)cGrammarElementsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cGrammarElementsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cGrammarElementsGrammarElementLookupParserRuleCall_2_1_0 = (RuleCall)cGrammarElementsAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cMatcherListAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cMatcherListMatcherListParserRuleCall_4_0 = (RuleCall)cMatcherListAssignment_4.eContents().get(0);
		
		//ContextFreeDirective:
		//	'[' grammarElements+=GrammarElementLookup (',' grammarElements+=GrammarElementLookup)* ']' matcherList=MatcherList;
		@Override public ParserRule getRule() { return rule; }

		//'[' grammarElements+=GrammarElementLookup (',' grammarElements+=GrammarElementLookup)* ']' matcherList=MatcherList
		public Group getGroup() { return cGroup; }

		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//grammarElements+=GrammarElementLookup
		public Assignment getGrammarElementsAssignment_1() { return cGrammarElementsAssignment_1; }

		//GrammarElementLookup
		public RuleCall getGrammarElementsGrammarElementLookupParserRuleCall_1_0() { return cGrammarElementsGrammarElementLookupParserRuleCall_1_0; }

		//(',' grammarElements+=GrammarElementLookup)*
		public Group getGroup_2() { return cGroup_2; }

		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//grammarElements+=GrammarElementLookup
		public Assignment getGrammarElementsAssignment_2_1() { return cGrammarElementsAssignment_2_1; }

		//GrammarElementLookup
		public RuleCall getGrammarElementsGrammarElementLookupParserRuleCall_2_1_0() { return cGrammarElementsGrammarElementLookupParserRuleCall_2_1_0; }

		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }

		//matcherList=MatcherList
		public Assignment getMatcherListAssignment_4() { return cMatcherListAssignment_4; }

		//MatcherList
		public RuleCall getMatcherListMatcherListParserRuleCall_4_0() { return cMatcherListMatcherListParserRuleCall_4_0; }
	}

	public class SpecificDirectiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.avaloq.tools.ddk.xtext.format.Format.SpecificDirective");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cGrammarElementsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cGrammarElementsGrammarElementReferenceParserRuleCall_0_0 = (RuleCall)cGrammarElementsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cGrammarElementsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cGrammarElementsGrammarElementReferenceParserRuleCall_1_1_0 = (RuleCall)cGrammarElementsAssignment_1_1.eContents().get(0);
		private final Assignment cMatcherListAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMatcherListMatcherListParserRuleCall_2_0 = (RuleCall)cMatcherListAssignment_2.eContents().get(0);
		
		//SpecificDirective:
		//	grammarElements+=GrammarElementReference (',' grammarElements+=GrammarElementReference)* matcherList=MatcherList;
		@Override public ParserRule getRule() { return rule; }

		//grammarElements+=GrammarElementReference (',' grammarElements+=GrammarElementReference)* matcherList=MatcherList
		public Group getGroup() { return cGroup; }

		//grammarElements+=GrammarElementReference
		public Assignment getGrammarElementsAssignment_0() { return cGrammarElementsAssignment_0; }

		//GrammarElementReference
		public RuleCall getGrammarElementsGrammarElementReferenceParserRuleCall_0_0() { return cGrammarElementsGrammarElementReferenceParserRuleCall_0_0; }

		//(',' grammarElements+=GrammarElementReference)*
		public Group getGroup_1() { return cGroup_1; }

		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//grammarElements+=GrammarElementReference
		public Assignment getGrammarElementsAssignment_1_1() { return cGrammarElementsAssignment_1_1; }

		//GrammarElementReference
		public RuleCall getGrammarElementsGrammarElementReferenceParserRuleCall_1_1_0() { return cGrammarElementsGrammarElementReferenceParserRuleCall_1_1_0; }

		//matcherList=MatcherList
		public Assignment getMatcherListAssignment_2() { return cMatcherListAssignment_2; }

		//MatcherList
		public RuleCall getMatcherListMatcherListParserRuleCall_2_0() { return cMatcherListMatcherListParserRuleCall_2_0; }
	}

	public class MatcherListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.avaloq.tools.ddk.xtext.format.Format.MatcherList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cColonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMatchersAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMatchersMatcherParserRuleCall_1_0 = (RuleCall)cMatchersAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cMatchersAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cMatchersMatcherParserRuleCall_2_1_0 = (RuleCall)cMatchersAssignment_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//MatcherList:
		//	':' matchers+=Matcher (',' matchers+=Matcher)* ';';
		@Override public ParserRule getRule() { return rule; }

		//':' matchers+=Matcher (',' matchers+=Matcher)* ';'
		public Group getGroup() { return cGroup; }

		//':'
		public Keyword getColonKeyword_0() { return cColonKeyword_0; }

		//matchers+=Matcher
		public Assignment getMatchersAssignment_1() { return cMatchersAssignment_1; }

		//Matcher
		public RuleCall getMatchersMatcherParserRuleCall_1_0() { return cMatchersMatcherParserRuleCall_1_0; }

		//(',' matchers+=Matcher)*
		public Group getGroup_2() { return cGroup_2; }

		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//matchers+=Matcher
		public Assignment getMatchersAssignment_2_1() { return cMatchersAssignment_2_1; }

		//Matcher
		public RuleCall getMatchersMatcherParserRuleCall_2_1_0() { return cMatchersMatcherParserRuleCall_2_1_0; }

		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class GroupBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.avaloq.tools.ddk.xtext.format.Format.GroupBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGroupKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cGrammarElementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cGrammarElementCompoundElementCrossReference_1_0 = (CrossReference)cGrammarElementAssignment_1.eContents().get(0);
		private final RuleCall cGrammarElementCompoundElementIntIdentifierParserRuleCall_1_0_1 = (RuleCall)cGrammarElementCompoundElementCrossReference_1_0.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cMatcherListAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cMatcherListMatcherListParserRuleCall_2_0_0 = (RuleCall)cMatcherListAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cEqualsSignGreaterThanSignKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cSubGroupAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cSubGroupGroupBlockParserRuleCall_2_1_1_0 = (RuleCall)cSubGroupAssignment_2_1_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cAlternatives_2.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cDirectivesAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cDirectivesGrammarRuleDirectiveParserRuleCall_2_2_1_0 = (RuleCall)cDirectivesAssignment_2_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_2_2 = (Keyword)cGroup_2_2.eContents().get(2);
		
		//GroupBlock:
		//	'group' grammarElement=[xtext::CompoundElement|IntIdentifier] (matcherList=MatcherList | '=>' subGroup=GroupBlock |
		//	'{' directives+=GrammarRuleDirective* '}');
		@Override public ParserRule getRule() { return rule; }

		//'group' grammarElement=[xtext::CompoundElement|IntIdentifier] (matcherList=MatcherList | '=>' subGroup=GroupBlock | '{'
		//directives+=GrammarRuleDirective* '}')
		public Group getGroup() { return cGroup; }

		//'group'
		public Keyword getGroupKeyword_0() { return cGroupKeyword_0; }

		//grammarElement=[xtext::CompoundElement|IntIdentifier]
		public Assignment getGrammarElementAssignment_1() { return cGrammarElementAssignment_1; }

		//[xtext::CompoundElement|IntIdentifier]
		public CrossReference getGrammarElementCompoundElementCrossReference_1_0() { return cGrammarElementCompoundElementCrossReference_1_0; }

		//IntIdentifier
		public RuleCall getGrammarElementCompoundElementIntIdentifierParserRuleCall_1_0_1() { return cGrammarElementCompoundElementIntIdentifierParserRuleCall_1_0_1; }

		//matcherList=MatcherList | '=>' subGroup=GroupBlock | '{' directives+=GrammarRuleDirective* '}'
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//matcherList=MatcherList
		public Assignment getMatcherListAssignment_2_0() { return cMatcherListAssignment_2_0; }

		//MatcherList
		public RuleCall getMatcherListMatcherListParserRuleCall_2_0_0() { return cMatcherListMatcherListParserRuleCall_2_0_0; }

		//'=>' subGroup=GroupBlock
		public Group getGroup_2_1() { return cGroup_2_1; }

		//'=>'
		public Keyword getEqualsSignGreaterThanSignKeyword_2_1_0() { return cEqualsSignGreaterThanSignKeyword_2_1_0; }

		//subGroup=GroupBlock
		public Assignment getSubGroupAssignment_2_1_1() { return cSubGroupAssignment_2_1_1; }

		//GroupBlock
		public RuleCall getSubGroupGroupBlockParserRuleCall_2_1_1_0() { return cSubGroupGroupBlockParserRuleCall_2_1_1_0; }

		//'{' directives+=GrammarRuleDirective* '}'
		public Group getGroup_2_2() { return cGroup_2_2; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_2_0() { return cLeftCurlyBracketKeyword_2_2_0; }

		//directives+=GrammarRuleDirective*
		public Assignment getDirectivesAssignment_2_2_1() { return cDirectivesAssignment_2_2_1; }

		//GrammarRuleDirective
		public RuleCall getDirectivesGrammarRuleDirectiveParserRuleCall_2_2_1_0() { return cDirectivesGrammarRuleDirectiveParserRuleCall_2_2_1_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_2_2_2() { return cRightCurlyBracketKeyword_2_2_2; }
	}

	public class KeywordPairElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.avaloq.tools.ddk.xtext.format.Format.KeywordPair");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLeftAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLeftSTRINGTerminalRuleCall_1_0 = (RuleCall)cLeftAssignment_1.eContents().get(0);
		private final Assignment cRightAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRightSTRINGTerminalRuleCall_2_0 = (RuleCall)cRightAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Group cGroup_5_0 = (Group)cAlternatives_5.eContents().get(0);
		private final Keyword cLeftKeyword_5_0_0 = (Keyword)cGroup_5_0.eContents().get(0);
		private final Keyword cFullStopKeyword_5_0_1 = (Keyword)cGroup_5_0.eContents().get(1);
		private final Assignment cLeftMatchersAssignment_5_0_2 = (Assignment)cGroup_5_0.eContents().get(2);
		private final RuleCall cLeftMatchersMatcherParserRuleCall_5_0_2_0 = (RuleCall)cLeftMatchersAssignment_5_0_2.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cAlternatives_5.eContents().get(1);
		private final Keyword cRightKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Keyword cFullStopKeyword_5_1_1 = (Keyword)cGroup_5_1.eContents().get(1);
		private final Assignment cRightMatchersAssignment_5_1_2 = (Assignment)cGroup_5_1.eContents().get(2);
		private final RuleCall cRightMatchersMatcherParserRuleCall_5_1_2_0 = (RuleCall)cRightMatchersAssignment_5_1_2.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cCommaKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Alternatives cAlternatives_6_1 = (Alternatives)cGroup_6.eContents().get(1);
		private final Group cGroup_6_1_0 = (Group)cAlternatives_6_1.eContents().get(0);
		private final Keyword cLeftKeyword_6_1_0_0 = (Keyword)cGroup_6_1_0.eContents().get(0);
		private final Keyword cFullStopKeyword_6_1_0_1 = (Keyword)cGroup_6_1_0.eContents().get(1);
		private final Assignment cLeftMatchersAssignment_6_1_0_2 = (Assignment)cGroup_6_1_0.eContents().get(2);
		private final RuleCall cLeftMatchersMatcherParserRuleCall_6_1_0_2_0 = (RuleCall)cLeftMatchersAssignment_6_1_0_2.eContents().get(0);
		private final Group cGroup_6_1_1 = (Group)cAlternatives_6_1.eContents().get(1);
		private final Keyword cRightKeyword_6_1_1_0 = (Keyword)cGroup_6_1_1.eContents().get(0);
		private final Keyword cFullStopKeyword_6_1_1_1 = (Keyword)cGroup_6_1_1.eContents().get(1);
		private final Assignment cRightMatchersAssignment_6_1_1_2 = (Assignment)cGroup_6_1_1.eContents().get(2);
		private final RuleCall cRightMatchersMatcherParserRuleCall_6_1_1_2_0 = (RuleCall)cRightMatchersAssignment_6_1_1_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//KeywordPair:
		//	'(' left=STRING right=STRING ')' ':' ('left' '.' leftMatchers+=Matcher | 'right' '.' rightMatchers+=Matcher) (','
		//	('left' '.' leftMatchers+=Matcher | 'right' '.' rightMatchers+=Matcher))* ';';
		@Override public ParserRule getRule() { return rule; }

		//'(' left=STRING right=STRING ')' ':' ('left' '.' leftMatchers+=Matcher | 'right' '.' rightMatchers+=Matcher) (','
		//('left' '.' leftMatchers+=Matcher | 'right' '.' rightMatchers+=Matcher))* ';'
		public Group getGroup() { return cGroup; }

		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//left=STRING
		public Assignment getLeftAssignment_1() { return cLeftAssignment_1; }

		//STRING
		public RuleCall getLeftSTRINGTerminalRuleCall_1_0() { return cLeftSTRINGTerminalRuleCall_1_0; }

		//right=STRING
		public Assignment getRightAssignment_2() { return cRightAssignment_2; }

		//STRING
		public RuleCall getRightSTRINGTerminalRuleCall_2_0() { return cRightSTRINGTerminalRuleCall_2_0; }

		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//':'
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }

		//'left' '.' leftMatchers+=Matcher | 'right' '.' rightMatchers+=Matcher
		public Alternatives getAlternatives_5() { return cAlternatives_5; }

		//'left' '.' leftMatchers+=Matcher
		public Group getGroup_5_0() { return cGroup_5_0; }

		//'left'
		public Keyword getLeftKeyword_5_0_0() { return cLeftKeyword_5_0_0; }

		//'.'
		public Keyword getFullStopKeyword_5_0_1() { return cFullStopKeyword_5_0_1; }

		//leftMatchers+=Matcher
		public Assignment getLeftMatchersAssignment_5_0_2() { return cLeftMatchersAssignment_5_0_2; }

		//Matcher
		public RuleCall getLeftMatchersMatcherParserRuleCall_5_0_2_0() { return cLeftMatchersMatcherParserRuleCall_5_0_2_0; }

		//'right' '.' rightMatchers+=Matcher
		public Group getGroup_5_1() { return cGroup_5_1; }

		//'right'
		public Keyword getRightKeyword_5_1_0() { return cRightKeyword_5_1_0; }

		//'.'
		public Keyword getFullStopKeyword_5_1_1() { return cFullStopKeyword_5_1_1; }

		//rightMatchers+=Matcher
		public Assignment getRightMatchersAssignment_5_1_2() { return cRightMatchersAssignment_5_1_2; }

		//Matcher
		public RuleCall getRightMatchersMatcherParserRuleCall_5_1_2_0() { return cRightMatchersMatcherParserRuleCall_5_1_2_0; }

		//(',' ('left' '.' leftMatchers+=Matcher | 'right' '.' rightMatchers+=Matcher))*
		public Group getGroup_6() { return cGroup_6; }

		//','
		public Keyword getCommaKeyword_6_0() { return cCommaKeyword_6_0; }

		//'left' '.' leftMatchers+=Matcher | 'right' '.' rightMatchers+=Matcher
		public Alternatives getAlternatives_6_1() { return cAlternatives_6_1; }

		//'left' '.' leftMatchers+=Matcher
		public Group getGroup_6_1_0() { return cGroup_6_1_0; }

		//'left'
		public Keyword getLeftKeyword_6_1_0_0() { return cLeftKeyword_6_1_0_0; }

		//'.'
		public Keyword getFullStopKeyword_6_1_0_1() { return cFullStopKeyword_6_1_0_1; }

		//leftMatchers+=Matcher
		public Assignment getLeftMatchersAssignment_6_1_0_2() { return cLeftMatchersAssignment_6_1_0_2; }

		//Matcher
		public RuleCall getLeftMatchersMatcherParserRuleCall_6_1_0_2_0() { return cLeftMatchersMatcherParserRuleCall_6_1_0_2_0; }

		//'right' '.' rightMatchers+=Matcher
		public Group getGroup_6_1_1() { return cGroup_6_1_1; }

		//'right'
		public Keyword getRightKeyword_6_1_1_0() { return cRightKeyword_6_1_1_0; }

		//'.'
		public Keyword getFullStopKeyword_6_1_1_1() { return cFullStopKeyword_6_1_1_1; }

		//rightMatchers+=Matcher
		public Assignment getRightMatchersAssignment_6_1_1_2() { return cRightMatchersAssignment_6_1_1_2; }

		//Matcher
		public RuleCall getRightMatchersMatcherParserRuleCall_6_1_1_2_0() { return cRightMatchersMatcherParserRuleCall_6_1_1_2_0; }

		//';'
		public Keyword getSemicolonKeyword_7() { return cSemicolonKeyword_7; }
	}

	public class MatcherElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.avaloq.tools.ddk.xtext.format.Format.Matcher");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLocatorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLocatorLocatorParserRuleCall_0_0 = (RuleCall)cLocatorAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeMatcherTypeEnumRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cConditionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionXBlockExpressionParserRuleCall_2_0 = (RuleCall)cConditionAssignment_2.eContents().get(0);
		
		//Matcher:
		//	locator=Locator type=MatcherType condition=XBlockExpression?;
		@Override public ParserRule getRule() { return rule; }

		//locator=Locator type=MatcherType condition=XBlockExpression?
		public Group getGroup() { return cGroup; }

		//locator=Locator
		public Assignment getLocatorAssignment_0() { return cLocatorAssignment_0; }

		//Locator
		public RuleCall getLocatorLocatorParserRuleCall_0_0() { return cLocatorLocatorParserRuleCall_0_0; }

		//type=MatcherType
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//MatcherType
		public RuleCall getTypeMatcherTypeEnumRuleCall_1_0() { return cTypeMatcherTypeEnumRuleCall_1_0; }

		//condition=XBlockExpression?
		public Assignment getConditionAssignment_2() { return cConditionAssignment_2; }

		//XBlockExpression
		public RuleCall getConditionXBlockExpressionParserRuleCall_2_0() { return cConditionXBlockExpressionParserRuleCall_2_0; }
	}

	public class LocatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.avaloq.tools.ddk.xtext.format.Format.Locator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSpaceLocatorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRightPaddingLocatorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLinewrapLocatorParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cColumnLocatorParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cOffsetLocatorParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cIndentLocatorParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cNoFormatLocatorParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//Locator:
		//	SpaceLocator | RightPaddingLocator | LinewrapLocator | ColumnLocator | OffsetLocator | IndentLocator |
		//	NoFormatLocator;
		@Override public ParserRule getRule() { return rule; }

		//SpaceLocator | RightPaddingLocator | LinewrapLocator | ColumnLocator | OffsetLocator | IndentLocator | NoFormatLocator
		public Alternatives getAlternatives() { return cAlternatives; }

		//SpaceLocator
		public RuleCall getSpaceLocatorParserRuleCall_0() { return cSpaceLocatorParserRuleCall_0; }

		//RightPaddingLocator
		public RuleCall getRightPaddingLocatorParserRuleCall_1() { return cRightPaddingLocatorParserRuleCall_1; }

		//LinewrapLocator
		public RuleCall getLinewrapLocatorParserRuleCall_2() { return cLinewrapLocatorParserRuleCall_2; }

		//ColumnLocator
		public RuleCall getColumnLocatorParserRuleCall_3() { return cColumnLocatorParserRuleCall_3; }

		//OffsetLocator
		public RuleCall getOffsetLocatorParserRuleCall_4() { return cOffsetLocatorParserRuleCall_4; }

		//IndentLocator
		public RuleCall getIndentLocatorParserRuleCall_5() { return cIndentLocatorParserRuleCall_5; }

		//NoFormatLocator
		public RuleCall getNoFormatLocatorParserRuleCall_6() { return cNoFormatLocatorParserRuleCall_6; }
	}

	public class NoFormatLocatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.avaloq.tools.ddk.xtext.format.Format.NoFormatLocator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNoFormatLocatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNo_formatKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//NoFormatLocator:
		//	{NoFormatLocator} 'no_format';
		@Override public ParserRule getRule() { return rule; }

		//{NoFormatLocator} 'no_format'
		public Group getGroup() { return cGroup; }

		//{NoFormatLocator}
		public Action getNoFormatLocatorAction_0() { return cNoFormatLocatorAction_0; }

		//'no_format'
		public Keyword getNo_formatKeyword_1() { return cNo_formatKeyword_1; }
	}

	public class SpaceLocatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.avaloq.tools.ddk.xtext.format.Format.SpaceLocator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cSpaceKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValueStringValueParserRuleCall_0_1_0 = (RuleCall)cValueAssignment_0_1.eContents().get(0);
		private final Assignment cNoSpaceAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cNoSpaceNo_spaceKeyword_1_0 = (Keyword)cNoSpaceAssignment_1.eContents().get(0);
		
		//SpaceLocator:
		//	'space' value=StringValue | noSpace?='no_space';
		@Override public ParserRule getRule() { return rule; }

		//'space' value=StringValue | noSpace?='no_space'
		public Alternatives getAlternatives() { return cAlternatives; }

		//'space' value=StringValue
		public Group getGroup_0() { return cGroup_0; }

		//'space'
		public Keyword getSpaceKeyword_0_0() { return cSpaceKeyword_0_0; }

		//value=StringValue
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }

		//StringValue
		public RuleCall getValueStringValueParserRuleCall_0_1_0() { return cValueStringValueParserRuleCall_0_1_0; }

		//noSpace?='no_space'
		public Assignment getNoSpaceAssignment_1() { return cNoSpaceAssignment_1; }

		//'no_space'
		public Keyword getNoSpaceNo_spaceKeyword_1_0() { return cNoSpaceNo_spaceKeyword_1_0; }
	}

	public class RightPaddingLocatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.avaloq.tools.ddk.xtext.format.Format.RightPaddingLocator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRight_paddingKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueIntValueParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//RightPaddingLocator:
		//	'right_padding' value=IntValue;
		@Override public ParserRule getRule() { return rule; }

		//'right_padding' value=IntValue
		public Group getGroup() { return cGroup; }

		//'right_padding'
		public Keyword getRight_paddingKeyword_0() { return cRight_paddingKeyword_0; }

		//value=IntValue
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//IntValue
		public RuleCall getValueIntValueParserRuleCall_1_0() { return cValueIntValueParserRuleCall_1_0; }
	}

	public class LinewrapLocatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.avaloq.tools.ddk.xtext.format.Format.LinewrapLocator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cLinewrapLocatorAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cLinewrapKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Alternatives cAlternatives_0_1_1 = (Alternatives)cGroup_0_1.eContents().get(1);
		private final Assignment cValueAssignment_0_1_1_0 = (Assignment)cAlternatives_0_1_1.eContents().get(0);
		private final RuleCall cValueIntValueParserRuleCall_0_1_1_0_0 = (RuleCall)cValueAssignment_0_1_1_0.eContents().get(0);
		private final Group cGroup_0_1_1_1 = (Group)cAlternatives_0_1_1.eContents().get(1);
		private final Assignment cMinimumAssignment_0_1_1_1_0 = (Assignment)cGroup_0_1_1_1.eContents().get(0);
		private final RuleCall cMinimumIntValueParserRuleCall_0_1_1_1_0_0 = (RuleCall)cMinimumAssignment_0_1_1_1_0.eContents().get(0);
		private final Assignment cDefaultAssignment_0_1_1_1_1 = (Assignment)cGroup_0_1_1_1.eContents().get(1);
		private final RuleCall cDefaultIntValueParserRuleCall_0_1_1_1_1_0 = (RuleCall)cDefaultAssignment_0_1_1_1_1.eContents().get(0);
		private final Assignment cMaximumAssignment_0_1_1_1_2 = (Assignment)cGroup_0_1_1_1.eContents().get(2);
		private final RuleCall cMaximumIntValueParserRuleCall_0_1_1_1_2_0 = (RuleCall)cMaximumAssignment_0_1_1_1_2.eContents().get(0);
		private final Assignment cNoLinewrapAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cNoLinewrapNo_linewrapKeyword_1_0 = (Keyword)cNoLinewrapAssignment_1.eContents().get(0);
		
		//LinewrapLocator:
		//	{LinewrapLocator} ('linewrap' (value=IntValue | minimum=IntValue default=IntValue maximum=IntValue)?) |
		//	noLinewrap?='no_linewrap';
		@Override public ParserRule getRule() { return rule; }

		//{LinewrapLocator} ('linewrap' (value=IntValue | minimum=IntValue default=IntValue maximum=IntValue)?) |
		//noLinewrap?='no_linewrap'
		public Alternatives getAlternatives() { return cAlternatives; }

		//{LinewrapLocator} ('linewrap' (value=IntValue | minimum=IntValue default=IntValue maximum=IntValue)?)
		public Group getGroup_0() { return cGroup_0; }

		//{LinewrapLocator}
		public Action getLinewrapLocatorAction_0_0() { return cLinewrapLocatorAction_0_0; }

		//'linewrap' (value=IntValue | minimum=IntValue default=IntValue maximum=IntValue)?
		public Group getGroup_0_1() { return cGroup_0_1; }

		//'linewrap'
		public Keyword getLinewrapKeyword_0_1_0() { return cLinewrapKeyword_0_1_0; }

		//(value=IntValue | minimum=IntValue default=IntValue maximum=IntValue)?
		public Alternatives getAlternatives_0_1_1() { return cAlternatives_0_1_1; }

		//value=IntValue
		public Assignment getValueAssignment_0_1_1_0() { return cValueAssignment_0_1_1_0; }

		//IntValue
		public RuleCall getValueIntValueParserRuleCall_0_1_1_0_0() { return cValueIntValueParserRuleCall_0_1_1_0_0; }

		//minimum=IntValue default=IntValue maximum=IntValue
		public Group getGroup_0_1_1_1() { return cGroup_0_1_1_1; }

		//minimum=IntValue
		public Assignment getMinimumAssignment_0_1_1_1_0() { return cMinimumAssignment_0_1_1_1_0; }

		//IntValue
		public RuleCall getMinimumIntValueParserRuleCall_0_1_1_1_0_0() { return cMinimumIntValueParserRuleCall_0_1_1_1_0_0; }

		//default=IntValue
		public Assignment getDefaultAssignment_0_1_1_1_1() { return cDefaultAssignment_0_1_1_1_1; }

		//IntValue
		public RuleCall getDefaultIntValueParserRuleCall_0_1_1_1_1_0() { return cDefaultIntValueParserRuleCall_0_1_1_1_1_0; }

		//maximum=IntValue
		public Assignment getMaximumAssignment_0_1_1_1_2() { return cMaximumAssignment_0_1_1_1_2; }

		//IntValue
		public RuleCall getMaximumIntValueParserRuleCall_0_1_1_1_2_0() { return cMaximumIntValueParserRuleCall_0_1_1_1_2_0; }

		//noLinewrap?='no_linewrap'
		public Assignment getNoLinewrapAssignment_1() { return cNoLinewrapAssignment_1; }

		//'no_linewrap'
		public Keyword getNoLinewrapNo_linewrapKeyword_1_0() { return cNoLinewrapNo_linewrapKeyword_1_0; }
	}

	public class ColumnLocatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.avaloq.tools.ddk.xtext.format.Format.ColumnLocator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cColumnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFixedAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cFixedFixedKeyword_1_0 = (Keyword)cFixedAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cValueIntValueParserRuleCall_2_0_0 = (RuleCall)cValueAssignment_2_0.eContents().get(0);
		private final Assignment cParameterAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cParameterXBlockExpressionParserRuleCall_2_1_0 = (RuleCall)cParameterAssignment_2_1.eContents().get(0);
		private final Assignment cRelativeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cRelativeRelativeKeyword_3_0 = (Keyword)cRelativeAssignment_3.eContents().get(0);
		private final Assignment cNobreakAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Keyword cNobreakNobreakKeyword_4_0 = (Keyword)cNobreakAssignment_4.eContents().get(0);
		
		//ColumnLocator:
		//	'column' fixed?='fixed'? (value=IntValue | parameter=XBlockExpression) relative?='relative'? nobreak?='nobreak'?;
		@Override public ParserRule getRule() { return rule; }

		//'column' fixed?='fixed'? (value=IntValue | parameter=XBlockExpression) relative?='relative'? nobreak?='nobreak'?
		public Group getGroup() { return cGroup; }

		//'column'
		public Keyword getColumnKeyword_0() { return cColumnKeyword_0; }

		//fixed?='fixed'?
		public Assignment getFixedAssignment_1() { return cFixedAssignment_1; }

		//'fixed'
		public Keyword getFixedFixedKeyword_1_0() { return cFixedFixedKeyword_1_0; }

		//value=IntValue | parameter=XBlockExpression
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//value=IntValue
		public Assignment getValueAssignment_2_0() { return cValueAssignment_2_0; }

		//IntValue
		public RuleCall getValueIntValueParserRuleCall_2_0_0() { return cValueIntValueParserRuleCall_2_0_0; }

		//parameter=XBlockExpression
		public Assignment getParameterAssignment_2_1() { return cParameterAssignment_2_1; }

		//XBlockExpression
		public RuleCall getParameterXBlockExpressionParserRuleCall_2_1_0() { return cParameterXBlockExpressionParserRuleCall_2_1_0; }

		//relative?='relative'?
		public Assignment getRelativeAssignment_3() { return cRelativeAssignment_3; }

		//'relative'
		public Keyword getRelativeRelativeKeyword_3_0() { return cRelativeRelativeKeyword_3_0; }

		//nobreak?='nobreak'?
		public Assignment getNobreakAssignment_4() { return cNobreakAssignment_4; }

		//'nobreak'
		public Keyword getNobreakNobreakKeyword_4_0() { return cNobreakNobreakKeyword_4_0; }
	}

	public class OffsetLocatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.avaloq.tools.ddk.xtext.format.Format.OffsetLocator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOffsetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFixedAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cFixedFixedKeyword_1_0 = (Keyword)cFixedAssignment_1.eContents().get(0);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueIntValueParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Assignment cNobreakAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cNobreakNobreakKeyword_3_0 = (Keyword)cNobreakAssignment_3.eContents().get(0);
		
		//OffsetLocator:
		//	'offset' fixed?='fixed'? value=IntValue nobreak?='nobreak'?;
		@Override public ParserRule getRule() { return rule; }

		//'offset' fixed?='fixed'? value=IntValue nobreak?='nobreak'?
		public Group getGroup() { return cGroup; }

		//'offset'
		public Keyword getOffsetKeyword_0() { return cOffsetKeyword_0; }

		//fixed?='fixed'?
		public Assignment getFixedAssignment_1() { return cFixedAssignment_1; }

		//'fixed'
		public Keyword getFixedFixedKeyword_1_0() { return cFixedFixedKeyword_1_0; }

		//value=IntValue
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//IntValue
		public RuleCall getValueIntValueParserRuleCall_2_0() { return cValueIntValueParserRuleCall_2_0; }

		//nobreak?='nobreak'?
		public Assignment getNobreakAssignment_3() { return cNobreakAssignment_3; }

		//'nobreak'
		public Keyword getNobreakNobreakKeyword_3_0() { return cNobreakNobreakKeyword_3_0; }
	}

	public class IndentLocatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.avaloq.tools.ddk.xtext.format.Format.IndentLocator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIndentLocatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cIncrementAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final Keyword cIncrementIncrementKeyword_1_0_0 = (Keyword)cIncrementAssignment_1_0.eContents().get(0);
		private final Keyword cDecrementKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cValueIntValueParserRuleCall_2_0_0 = (RuleCall)cValueAssignment_2_0.eContents().get(0);
		private final Assignment cParameterAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cParameterXBlockExpressionParserRuleCall_2_1_0 = (RuleCall)cParameterAssignment_2_1.eContents().get(0);
		
		//IndentLocator:
		//	{IndentLocator} (increment?='increment' | 'decrement') (value=IntValue | parameter=XBlockExpression)?;
		@Override public ParserRule getRule() { return rule; }

		//{IndentLocator} (increment?='increment' | 'decrement') (value=IntValue | parameter=XBlockExpression)?
		public Group getGroup() { return cGroup; }

		//{IndentLocator}
		public Action getIndentLocatorAction_0() { return cIndentLocatorAction_0; }

		//increment?='increment' | 'decrement'
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//increment?='increment'
		public Assignment getIncrementAssignment_1_0() { return cIncrementAssignment_1_0; }

		//'increment'
		public Keyword getIncrementIncrementKeyword_1_0_0() { return cIncrementIncrementKeyword_1_0_0; }

		//'decrement'
		public Keyword getDecrementKeyword_1_1() { return cDecrementKeyword_1_1; }

		//(value=IntValue | parameter=XBlockExpression)?
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//value=IntValue
		public Assignment getValueAssignment_2_0() { return cValueAssignment_2_0; }

		//IntValue
		public RuleCall getValueIntValueParserRuleCall_2_0_0() { return cValueIntValueParserRuleCall_2_0_0; }

		//parameter=XBlockExpression
		public Assignment getParameterAssignment_2_1() { return cParameterAssignment_2_1; }

		//XBlockExpression
		public RuleCall getParameterXBlockExpressionParserRuleCall_2_1_0() { return cParameterXBlockExpressionParserRuleCall_2_1_0; }
	}

	public class ParameterizedIdentifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.avaloq.tools.ddk.xtext.format.Format.ParameterizedIdentifier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIdentifierParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_1_3 = (RuleCall)cGroup_1.eContents().get(3);
		private final Keyword cRightParenthesisKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		
		//ParameterizedIdentifier:
		//	Identifier ('(' INT ',' INT ')')?;
		@Override public ParserRule getRule() { return rule; }

		//Identifier ('(' INT ',' INT ')')?
		public Group getGroup() { return cGroup; }

		//Identifier
		public RuleCall getIdentifierParserRuleCall_0() { return cIdentifierParserRuleCall_0; }

		//('(' INT ',' INT ')')?
		public Group getGroup_1() { return cGroup_1; }

		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1_1() { return cINTTerminalRuleCall_1_1; }

		//','
		public Keyword getCommaKeyword_1_2() { return cCommaKeyword_1_2; }

		//INT
		public RuleCall getINTTerminalRuleCall_1_3() { return cINTTerminalRuleCall_1_3; }

		//')'
		public Keyword getRightParenthesisKeyword_1_4() { return cRightParenthesisKeyword_1_4; }
	}

	public class ParameterizedStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.avaloq.tools.ddk.xtext.format.Format.ParameterizedString");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_1_3 = (RuleCall)cGroup_1.eContents().get(3);
		private final Keyword cRightParenthesisKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		
		//ParameterizedString:
		//	STRING ('(' INT ',' INT ')')?;
		@Override public ParserRule getRule() { return rule; }

		//STRING ('(' INT ',' INT ')')?
		public Group getGroup() { return cGroup; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }

		//('(' INT ',' INT ')')?
		public Group getGroup_1() { return cGroup_1; }

		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1_1() { return cINTTerminalRuleCall_1_1; }

		//','
		public Keyword getCommaKeyword_1_2() { return cCommaKeyword_1_2; }

		//INT
		public RuleCall getINTTerminalRuleCall_1_3() { return cINTTerminalRuleCall_1_3; }

		//')'
		public Keyword getRightParenthesisKeyword_1_4() { return cRightParenthesisKeyword_1_4; }
	}

	public class IdentifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.avaloq.tools.ddk.xtext.format.Format.Identifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Keyword cDefaultKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cValKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//Identifier:
		//	ID | 'default' | 'val';
		@Override public ParserRule getRule() { return rule; }

		//ID | 'default' | 'val'
		public Alternatives getAlternatives() { return cAlternatives; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//'default'
		public Keyword getDefaultKeyword_1() { return cDefaultKeyword_1; }

		//'val'
		public Keyword getValKeyword_2() { return cValKeyword_2; }
	}

	public class DottedIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.avaloq.tools.ddk.xtext.format.Format.DottedID");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIdentifierParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIdentifierParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//DottedID:
		//	Identifier ('.' Identifier)*;
		@Override public ParserRule getRule() { return rule; }

		//Identifier ('.' Identifier)*
		public Group getGroup() { return cGroup; }

		//Identifier
		public RuleCall getIdentifierParserRuleCall_0() { return cIdentifierParserRuleCall_0; }

		//('.' Identifier)*
		public Group getGroup_1() { return cGroup_1; }

		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//Identifier
		public RuleCall getIdentifierParserRuleCall_1_1() { return cIdentifierParserRuleCall_1_1; }
	}

	public class IntIdentifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.avaloq.tools.ddk.xtext.format.Format.IntIdentifier");
		private final RuleCall cINTTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//IntIdentifier:
		//	INT;
		@Override public ParserRule getRule() { return rule; }

		//INT
		public RuleCall getINTTerminalRuleCall() { return cINTTerminalRuleCall; }
	}

	public class IntObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.avaloq.tools.ddk.xtext.format.Format.IntObject");
		private final RuleCall cINTTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//IntObject ecore::EIntegerObject:
		//	INT;
		@Override public ParserRule getRule() { return rule; }

		//INT
		public RuleCall getINTTerminalRuleCall() { return cINTTerminalRuleCall; }
	}

	public class RuleSelfIdentifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.avaloq.tools.ddk.xtext.format.Format.RuleSelfIdentifier");
		private final Keyword cRuleKeyword = (Keyword)rule.eContents().get(1);
		
		//RuleSelfIdentifier:
		//	'rule';
		@Override public ParserRule getRule() { return rule; }

		//'rule'
		public Keyword getRuleKeyword() { return cRuleKeyword; }
	}

	public class ValidIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.avaloq.tools.ddk.xtext.format.Format.ValidID");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cContextKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cCurrentColumnKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ValidID:
		//	'context' | 'currentColumn' | ID;
		@Override public ParserRule getRule() { return rule; }

		//'context' | 'currentColumn' | ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//'context'
		public Keyword getContextKeyword_0() { return cContextKeyword_0; }

		//'currentColumn'
		public Keyword getCurrentColumnKeyword_1() { return cCurrentColumnKeyword_1; }

		//ID
		public RuleCall getIDTerminalRuleCall_2() { return cIDTerminalRuleCall_2; }
	}
	
	
	public class MatcherTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "com.avaloq.tools.ddk.xtext.format.Format.MatcherType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cBeforeEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cBeforeBeforeKeyword_0_0 = (Keyword)cBeforeEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cAfterEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cAfterAfterKeyword_1_0 = (Keyword)cAfterEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cAroundEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cAroundAroundKeyword_2_0 = (Keyword)cAroundEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cBetweenEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cBetweenBetweenKeyword_3_0 = (Keyword)cBetweenEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cRangeEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cRangeRangeKeyword_4_0 = (Keyword)cRangeEnumLiteralDeclaration_4.eContents().get(0);
		
		//enum MatcherType:
		//	before | after | around | between | range;
		public EnumRule getRule() { return rule; }

		//before | after | around | between | range
		public Alternatives getAlternatives() { return cAlternatives; }

		//before
		public EnumLiteralDeclaration getBeforeEnumLiteralDeclaration_0() { return cBeforeEnumLiteralDeclaration_0; }

		//"before"
		public Keyword getBeforeBeforeKeyword_0_0() { return cBeforeBeforeKeyword_0_0; }

		//after
		public EnumLiteralDeclaration getAfterEnumLiteralDeclaration_1() { return cAfterEnumLiteralDeclaration_1; }

		//"after"
		public Keyword getAfterAfterKeyword_1_0() { return cAfterAfterKeyword_1_0; }

		//around
		public EnumLiteralDeclaration getAroundEnumLiteralDeclaration_2() { return cAroundEnumLiteralDeclaration_2; }

		//"around"
		public Keyword getAroundAroundKeyword_2_0() { return cAroundAroundKeyword_2_0; }

		//between
		public EnumLiteralDeclaration getBetweenEnumLiteralDeclaration_3() { return cBetweenEnumLiteralDeclaration_3; }

		//"between"
		public Keyword getBetweenBetweenKeyword_3_0() { return cBetweenBetweenKeyword_3_0; }

		//range
		public EnumLiteralDeclaration getRangeEnumLiteralDeclaration_4() { return cRangeEnumLiteralDeclaration_4; }

		//"range"
		public Keyword getRangeRangeKeyword_4_0() { return cRangeRangeKeyword_4_0; }
	}
	
	private final FormatConfigurationElements pFormatConfiguration;
	private final ConstantElements pConstant;
	private final IntValueElements pIntValue;
	private final StringValueElements pStringValue;
	private final RuleElements pRule;
	private final GrammarRuleElements pGrammarRule;
	private final WildcardRuleElements pWildcardRule;
	private final GrammarRuleDirectiveElements pGrammarRuleDirective;
	private final WildcardRuleDirectiveElements pWildcardRuleDirective;
	private final GrammarElementReferenceElements pGrammarElementReference;
	private final GrammarElementLookupElements pGrammarElementLookup;
	private final ContextFreeDirectiveElements pContextFreeDirective;
	private final SpecificDirectiveElements pSpecificDirective;
	private final MatcherListElements pMatcherList;
	private final GroupBlockElements pGroupBlock;
	private final KeywordPairElements pKeywordPair;
	private final MatcherElements pMatcher;
	private final MatcherTypeElements eMatcherType;
	private final LocatorElements pLocator;
	private final NoFormatLocatorElements pNoFormatLocator;
	private final SpaceLocatorElements pSpaceLocator;
	private final RightPaddingLocatorElements pRightPaddingLocator;
	private final LinewrapLocatorElements pLinewrapLocator;
	private final ColumnLocatorElements pColumnLocator;
	private final OffsetLocatorElements pOffsetLocator;
	private final IndentLocatorElements pIndentLocator;
	private final ParameterizedIdentifierElements pParameterizedIdentifier;
	private final ParameterizedStringElements pParameterizedString;
	private final IdentifierElements pIdentifier;
	private final DottedIDElements pDottedID;
	private final IntIdentifierElements pIntIdentifier;
	private final IntObjectElements pIntObject;
	private final RuleSelfIdentifierElements pRuleSelfIdentifier;
	private final ValidIDElements pValidID;
	private final TerminalRule tINT;
	
	private final Grammar grammar;

	private final XbaseWithAnnotationsGrammarAccess gaXbaseWithAnnotations;

	private final XbaseGrammarAccess gaXbase;

	private final XtypeGrammarAccess gaXtype;

	@Inject
	public FormatGrammarAccess(GrammarProvider grammarProvider,
		XbaseWithAnnotationsGrammarAccess gaXbaseWithAnnotations,
		XbaseGrammarAccess gaXbase,
		XtypeGrammarAccess gaXtype) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaXbaseWithAnnotations = gaXbaseWithAnnotations;
		this.gaXbase = gaXbase;
		this.gaXtype = gaXtype;
		this.pFormatConfiguration = new FormatConfigurationElements();
		this.pConstant = new ConstantElements();
		this.pIntValue = new IntValueElements();
		this.pStringValue = new StringValueElements();
		this.pRule = new RuleElements();
		this.pGrammarRule = new GrammarRuleElements();
		this.pWildcardRule = new WildcardRuleElements();
		this.pGrammarRuleDirective = new GrammarRuleDirectiveElements();
		this.pWildcardRuleDirective = new WildcardRuleDirectiveElements();
		this.pGrammarElementReference = new GrammarElementReferenceElements();
		this.pGrammarElementLookup = new GrammarElementLookupElements();
		this.pContextFreeDirective = new ContextFreeDirectiveElements();
		this.pSpecificDirective = new SpecificDirectiveElements();
		this.pMatcherList = new MatcherListElements();
		this.pGroupBlock = new GroupBlockElements();
		this.pKeywordPair = new KeywordPairElements();
		this.pMatcher = new MatcherElements();
		this.eMatcherType = new MatcherTypeElements();
		this.pLocator = new LocatorElements();
		this.pNoFormatLocator = new NoFormatLocatorElements();
		this.pSpaceLocator = new SpaceLocatorElements();
		this.pRightPaddingLocator = new RightPaddingLocatorElements();
		this.pLinewrapLocator = new LinewrapLocatorElements();
		this.pColumnLocator = new ColumnLocatorElements();
		this.pOffsetLocator = new OffsetLocatorElements();
		this.pIndentLocator = new IndentLocatorElements();
		this.pParameterizedIdentifier = new ParameterizedIdentifierElements();
		this.pParameterizedString = new ParameterizedStringElements();
		this.pIdentifier = new IdentifierElements();
		this.pDottedID = new DottedIDElements();
		this.pIntIdentifier = new IntIdentifierElements();
		this.pIntObject = new IntObjectElements();
		this.pRuleSelfIdentifier = new RuleSelfIdentifierElements();
		this.pValidID = new ValidIDElements();
		this.tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.avaloq.tools.ddk.xtext.format.Format.INT");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.avaloq.tools.ddk.xtext.format.Format".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public XbaseWithAnnotationsGrammarAccess getXbaseWithAnnotationsGrammarAccess() {
		return gaXbaseWithAnnotations;
	}

	public XbaseGrammarAccess getXbaseGrammarAccess() {
		return gaXbase;
	}

	public XtypeGrammarAccess getXtypeGrammarAccess() {
		return gaXtype;
	}

	
	//FormatConfiguration:
	//	'formatter' 'for' targetGrammar=[xtext::Grammar|DottedID] ('with'
	//	extendedFormatConfiguration=[FormatConfiguration|DottedID])? ('extends'
	//	formatterBaseClass=[types::JvmDeclaredType|QualifiedName])? ('const' constants+=Constant ';')* rules+=Rule*;
	public FormatConfigurationElements getFormatConfigurationAccess() {
		return pFormatConfiguration;
	}
	
	public ParserRule getFormatConfigurationRule() {
		return getFormatConfigurationAccess().getRule();
	}

	//Constant:
	//	(intType?='int' | stringType?='String')? //specifying the type is optional
	// name=ID '=' (intValue=IntObject |
	//	stringValue=STRING);
	public ConstantElements getConstantAccess() {
		return pConstant;
	}
	
	public ParserRule getConstantRule() {
		return getConstantAccess().getRule();
	}

	//IntValue:
	//	literal=IntObject | reference=[Constant|DottedID];
	public IntValueElements getIntValueAccess() {
		return pIntValue;
	}
	
	public ParserRule getIntValueRule() {
		return getIntValueAccess().getRule();
	}

	//StringValue:
	//	literal=STRING | reference=[Constant|DottedID];
	public StringValueElements getStringValueAccess() {
		return pStringValue;
	}
	
	public ParserRule getStringValueRule() {
		return getStringValueAccess().getRule();
	}

	//Rule:
	//	WildcardRule | GrammarRule;
	public RuleElements getRuleAccess() {
		return pRule;
	}
	
	public ParserRule getRuleRule() {
		return getRuleAccess().getRule();
	}

	//GrammarRule:
	//	override?='override'? targetRule=[xtext::AbstractRule] '{' (directives+=GrammarRuleDirective |
	//	directives+=GroupBlock)* '}';
	public GrammarRuleElements getGrammarRuleAccess() {
		return pGrammarRule;
	}
	
	public ParserRule getGrammarRuleRule() {
		return getGrammarRuleAccess().getRule();
	}

	//WildcardRule:
	//	{WildcardRule} override?='override'? '*' '{' directives+=WildcardRuleDirective* '}';
	public WildcardRuleElements getWildcardRuleAccess() {
		return pWildcardRule;
	}
	
	public ParserRule getWildcardRuleRule() {
		return getWildcardRuleAccess().getRule();
	}

	//GrammarRuleDirective:
	//	SpecificDirective | ContextFreeDirective | KeywordPair;
	public GrammarRuleDirectiveElements getGrammarRuleDirectiveAccess() {
		return pGrammarRuleDirective;
	}
	
	public ParserRule getGrammarRuleDirectiveRule() {
		return getGrammarRuleDirectiveAccess().getRule();
	}

	//WildcardRuleDirective:
	//	ContextFreeDirective | KeywordPair;
	public WildcardRuleDirectiveElements getWildcardRuleDirectiveAccess() {
		return pWildcardRuleDirective;
	}
	
	public ParserRule getWildcardRuleDirectiveRule() {
		return getWildcardRuleDirectiveAccess().getRule();
	}

	//GrammarElementReference:
	//	'=' assignment=[xtext::Assignment|ParameterizedIdentifier] | '@' ruleCall=[xtext::RuleCall|ParameterizedIdentifier] |
	//	self=[xtext::AbstractRule|RuleSelfIdentifier] | rule=[xtext::AbstractRule|Identifier] |
	//	keyword=[xtext::Keyword|ParameterizedString];
	public GrammarElementReferenceElements getGrammarElementReferenceAccess() {
		return pGrammarElementReference;
	}
	
	public ParserRule getGrammarElementReferenceRule() {
		return getGrammarElementReferenceAccess().getRule();
	}

	//GrammarElementLookup:
	//	rule=[xtext::AbstractRule|Identifier] | keyword=STRING;
	public GrammarElementLookupElements getGrammarElementLookupAccess() {
		return pGrammarElementLookup;
	}
	
	public ParserRule getGrammarElementLookupRule() {
		return getGrammarElementLookupAccess().getRule();
	}

	//ContextFreeDirective:
	//	'[' grammarElements+=GrammarElementLookup (',' grammarElements+=GrammarElementLookup)* ']' matcherList=MatcherList;
	public ContextFreeDirectiveElements getContextFreeDirectiveAccess() {
		return pContextFreeDirective;
	}
	
	public ParserRule getContextFreeDirectiveRule() {
		return getContextFreeDirectiveAccess().getRule();
	}

	//SpecificDirective:
	//	grammarElements+=GrammarElementReference (',' grammarElements+=GrammarElementReference)* matcherList=MatcherList;
	public SpecificDirectiveElements getSpecificDirectiveAccess() {
		return pSpecificDirective;
	}
	
	public ParserRule getSpecificDirectiveRule() {
		return getSpecificDirectiveAccess().getRule();
	}

	//MatcherList:
	//	':' matchers+=Matcher (',' matchers+=Matcher)* ';';
	public MatcherListElements getMatcherListAccess() {
		return pMatcherList;
	}
	
	public ParserRule getMatcherListRule() {
		return getMatcherListAccess().getRule();
	}

	//GroupBlock:
	//	'group' grammarElement=[xtext::CompoundElement|IntIdentifier] (matcherList=MatcherList | '=>' subGroup=GroupBlock |
	//	'{' directives+=GrammarRuleDirective* '}');
	public GroupBlockElements getGroupBlockAccess() {
		return pGroupBlock;
	}
	
	public ParserRule getGroupBlockRule() {
		return getGroupBlockAccess().getRule();
	}

	//KeywordPair:
	//	'(' left=STRING right=STRING ')' ':' ('left' '.' leftMatchers+=Matcher | 'right' '.' rightMatchers+=Matcher) (','
	//	('left' '.' leftMatchers+=Matcher | 'right' '.' rightMatchers+=Matcher))* ';';
	public KeywordPairElements getKeywordPairAccess() {
		return pKeywordPair;
	}
	
	public ParserRule getKeywordPairRule() {
		return getKeywordPairAccess().getRule();
	}

	//Matcher:
	//	locator=Locator type=MatcherType condition=XBlockExpression?;
	public MatcherElements getMatcherAccess() {
		return pMatcher;
	}
	
	public ParserRule getMatcherRule() {
		return getMatcherAccess().getRule();
	}

	//enum MatcherType:
	//	before | after | around | between | range;
	public MatcherTypeElements getMatcherTypeAccess() {
		return eMatcherType;
	}
	
	public EnumRule getMatcherTypeRule() {
		return getMatcherTypeAccess().getRule();
	}

	//Locator:
	//	SpaceLocator | RightPaddingLocator | LinewrapLocator | ColumnLocator | OffsetLocator | IndentLocator |
	//	NoFormatLocator;
	public LocatorElements getLocatorAccess() {
		return pLocator;
	}
	
	public ParserRule getLocatorRule() {
		return getLocatorAccess().getRule();
	}

	//NoFormatLocator:
	//	{NoFormatLocator} 'no_format';
	public NoFormatLocatorElements getNoFormatLocatorAccess() {
		return pNoFormatLocator;
	}
	
	public ParserRule getNoFormatLocatorRule() {
		return getNoFormatLocatorAccess().getRule();
	}

	//SpaceLocator:
	//	'space' value=StringValue | noSpace?='no_space';
	public SpaceLocatorElements getSpaceLocatorAccess() {
		return pSpaceLocator;
	}
	
	public ParserRule getSpaceLocatorRule() {
		return getSpaceLocatorAccess().getRule();
	}

	//RightPaddingLocator:
	//	'right_padding' value=IntValue;
	public RightPaddingLocatorElements getRightPaddingLocatorAccess() {
		return pRightPaddingLocator;
	}
	
	public ParserRule getRightPaddingLocatorRule() {
		return getRightPaddingLocatorAccess().getRule();
	}

	//LinewrapLocator:
	//	{LinewrapLocator} ('linewrap' (value=IntValue | minimum=IntValue default=IntValue maximum=IntValue)?) |
	//	noLinewrap?='no_linewrap';
	public LinewrapLocatorElements getLinewrapLocatorAccess() {
		return pLinewrapLocator;
	}
	
	public ParserRule getLinewrapLocatorRule() {
		return getLinewrapLocatorAccess().getRule();
	}

	//ColumnLocator:
	//	'column' fixed?='fixed'? (value=IntValue | parameter=XBlockExpression) relative?='relative'? nobreak?='nobreak'?;
	public ColumnLocatorElements getColumnLocatorAccess() {
		return pColumnLocator;
	}
	
	public ParserRule getColumnLocatorRule() {
		return getColumnLocatorAccess().getRule();
	}

	//OffsetLocator:
	//	'offset' fixed?='fixed'? value=IntValue nobreak?='nobreak'?;
	public OffsetLocatorElements getOffsetLocatorAccess() {
		return pOffsetLocator;
	}
	
	public ParserRule getOffsetLocatorRule() {
		return getOffsetLocatorAccess().getRule();
	}

	//IndentLocator:
	//	{IndentLocator} (increment?='increment' | 'decrement') (value=IntValue | parameter=XBlockExpression)?;
	public IndentLocatorElements getIndentLocatorAccess() {
		return pIndentLocator;
	}
	
	public ParserRule getIndentLocatorRule() {
		return getIndentLocatorAccess().getRule();
	}

	//ParameterizedIdentifier:
	//	Identifier ('(' INT ',' INT ')')?;
	public ParameterizedIdentifierElements getParameterizedIdentifierAccess() {
		return pParameterizedIdentifier;
	}
	
	public ParserRule getParameterizedIdentifierRule() {
		return getParameterizedIdentifierAccess().getRule();
	}

	//ParameterizedString:
	//	STRING ('(' INT ',' INT ')')?;
	public ParameterizedStringElements getParameterizedStringAccess() {
		return pParameterizedString;
	}
	
	public ParserRule getParameterizedStringRule() {
		return getParameterizedStringAccess().getRule();
	}

	//Identifier:
	//	ID | 'default' | 'val';
	public IdentifierElements getIdentifierAccess() {
		return pIdentifier;
	}
	
	public ParserRule getIdentifierRule() {
		return getIdentifierAccess().getRule();
	}

	//DottedID:
	//	Identifier ('.' Identifier)*;
	public DottedIDElements getDottedIDAccess() {
		return pDottedID;
	}
	
	public ParserRule getDottedIDRule() {
		return getDottedIDAccess().getRule();
	}

	//IntIdentifier:
	//	INT;
	public IntIdentifierElements getIntIdentifierAccess() {
		return pIntIdentifier;
	}
	
	public ParserRule getIntIdentifierRule() {
		return getIntIdentifierAccess().getRule();
	}

	//IntObject ecore::EIntegerObject:
	//	INT;
	public IntObjectElements getIntObjectAccess() {
		return pIntObject;
	}
	
	public ParserRule getIntObjectRule() {
		return getIntObjectAccess().getRule();
	}

	//RuleSelfIdentifier:
	//	'rule';
	public RuleSelfIdentifierElements getRuleSelfIdentifierAccess() {
		return pRuleSelfIdentifier;
	}
	
	public ParserRule getRuleSelfIdentifierRule() {
		return getRuleSelfIdentifierAccess().getRule();
	}

	//ValidID:
	//	'context' | 'currentColumn' | ID;
	public ValidIDElements getValidIDAccess() {
		return pValidID;
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}

	//terminal INT returns ecore::EInt:
	//	'0'..'9' ('0'..'9' | '_')*;
	public TerminalRule getINTRule() {
		return tINT;
	} 

	//XAnnotation:
	//	{XAnnotation} '@' annotationType=[types::JvmAnnotationType|QualifiedName] (=> '('
	//	(elementValuePairs+=XAnnotationElementValuePair (',' elementValuePairs+=XAnnotationElementValuePair)* |
	//	value=XAnnotationElementValueOrCommaList)? ')')?;
	public XbaseWithAnnotationsGrammarAccess.XAnnotationElements getXAnnotationAccess() {
		return gaXbaseWithAnnotations.getXAnnotationAccess();
	}
	
	public ParserRule getXAnnotationRule() {
		return getXAnnotationAccess().getRule();
	}

	//XAnnotationElementValuePair:
	//	=> (element=[types::JvmOperation|super::ValidID] '=') value=XAnnotationElementValue;
	public XbaseWithAnnotationsGrammarAccess.XAnnotationElementValuePairElements getXAnnotationElementValuePairAccess() {
		return gaXbaseWithAnnotations.getXAnnotationElementValuePairAccess();
	}
	
	public ParserRule getXAnnotationElementValuePairRule() {
		return getXAnnotationElementValuePairAccess().getRule();
	}

	//XAnnotationElementValueOrCommaList xbase::XExpression:
	//	=> ({xbase::XListLiteral} '#' '[') (elements+=XAnnotationOrExpression (',' elements+=XAnnotationOrExpression)*)? ']'
	//	| XAnnotationOrExpression ({xbase::XListLiteral.elements+=current} (',' elements+=XAnnotationOrExpression)+)?;
	public XbaseWithAnnotationsGrammarAccess.XAnnotationElementValueOrCommaListElements getXAnnotationElementValueOrCommaListAccess() {
		return gaXbaseWithAnnotations.getXAnnotationElementValueOrCommaListAccess();
	}
	
	public ParserRule getXAnnotationElementValueOrCommaListRule() {
		return getXAnnotationElementValueOrCommaListAccess().getRule();
	}

	//XAnnotationElementValue xbase::XExpression:
	//	=> ({xbase::XListLiteral} '#' '[') (elements+=XAnnotationOrExpression (',' elements+=XAnnotationOrExpression)*)? ']'
	//	| XAnnotationOrExpression;
	public XbaseWithAnnotationsGrammarAccess.XAnnotationElementValueElements getXAnnotationElementValueAccess() {
		return gaXbaseWithAnnotations.getXAnnotationElementValueAccess();
	}
	
	public ParserRule getXAnnotationElementValueRule() {
		return getXAnnotationElementValueAccess().getRule();
	}

	//XAnnotationOrExpression xbase::XExpression:
	//	XAnnotation | XExpression;
	public XbaseWithAnnotationsGrammarAccess.XAnnotationOrExpressionElements getXAnnotationOrExpressionAccess() {
		return gaXbaseWithAnnotations.getXAnnotationOrExpressionAccess();
	}
	
	public ParserRule getXAnnotationOrExpressionRule() {
		return getXAnnotationOrExpressionAccess().getRule();
	}

	//XExpression:
	//	XAssignment;
	public XbaseGrammarAccess.XExpressionElements getXExpressionAccess() {
		return gaXbase.getXExpressionAccess();
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}

	//XAssignment XExpression:
	//	{XAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign value=XAssignment | XOrExpression
	//	(=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMultiAssign])
	//	rightOperand=XAssignment)?;
	public XbaseGrammarAccess.XAssignmentElements getXAssignmentAccess() {
		return gaXbase.getXAssignmentAccess();
	}
	
	public ParserRule getXAssignmentRule() {
		return getXAssignmentAccess().getRule();
	}

	//OpSingleAssign:
	//	'=';
	public XbaseGrammarAccess.OpSingleAssignElements getOpSingleAssignAccess() {
		return gaXbase.getOpSingleAssignAccess();
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}

	//OpMultiAssign:
	//	'+=' | '-=' | '*=' | '/=' | '%=' | '<' '<' '=' | '>' '>'? '>=';
	public XbaseGrammarAccess.OpMultiAssignElements getOpMultiAssignAccess() {
		return gaXbase.getOpMultiAssignAccess();
	}
	
	public ParserRule getOpMultiAssignRule() {
		return getOpMultiAssignAccess().getRule();
	}

	//XOrExpression XExpression:
	//	XAndExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr])
	//	rightOperand=XAndExpression)*;
	public XbaseGrammarAccess.XOrExpressionElements getXOrExpressionAccess() {
		return gaXbase.getXOrExpressionAccess();
	}
	
	public ParserRule getXOrExpressionRule() {
		return getXOrExpressionAccess().getRule();
	}

	//OpOr:
	//	'||';
	public XbaseGrammarAccess.OpOrElements getOpOrAccess() {
		return gaXbase.getOpOrAccess();
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}

	//XAndExpression XExpression:
	//	XEqualityExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd])
	//	rightOperand=XEqualityExpression)*;
	public XbaseGrammarAccess.XAndExpressionElements getXAndExpressionAccess() {
		return gaXbase.getXAndExpressionAccess();
	}
	
	public ParserRule getXAndExpressionRule() {
		return getXAndExpressionAccess().getRule();
	}

	//OpAnd:
	//	'&&';
	public XbaseGrammarAccess.OpAndElements getOpAndAccess() {
		return gaXbase.getOpAndAccess();
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}

	//XEqualityExpression XExpression:
	//	XRelationalExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
	//	rightOperand=XRelationalExpression)*;
	public XbaseGrammarAccess.XEqualityExpressionElements getXEqualityExpressionAccess() {
		return gaXbase.getXEqualityExpressionAccess();
	}
	
	public ParserRule getXEqualityExpressionRule() {
		return getXEqualityExpressionAccess().getRule();
	}

	//OpEquality:
	//	'==' | '!=' | '===' | '!==';
	public XbaseGrammarAccess.OpEqualityElements getOpEqualityAccess() {
		return gaXbase.getOpEqualityAccess();
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}

	//XRelationalExpression XExpression:
	//	XOtherOperatorExpression (=> ({XInstanceOfExpression.expression=current} 'instanceof') type=JvmTypeReference | =>
	//	({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare])
	//	rightOperand=XOtherOperatorExpression)*;
	public XbaseGrammarAccess.XRelationalExpressionElements getXRelationalExpressionAccess() {
		return gaXbase.getXRelationalExpressionAccess();
	}
	
	public ParserRule getXRelationalExpressionRule() {
		return getXRelationalExpressionAccess().getRule();
	}

	//OpCompare:
	//	'>=' | '<' '=' | '>' | '<';
	public XbaseGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaXbase.getOpCompareAccess();
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}

	//XOtherOperatorExpression XExpression:
	//	XAdditiveExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOther])
	//	rightOperand=XAdditiveExpression)*;
	public XbaseGrammarAccess.XOtherOperatorExpressionElements getXOtherOperatorExpressionAccess() {
		return gaXbase.getXOtherOperatorExpressionAccess();
	}
	
	public ParserRule getXOtherOperatorExpressionRule() {
		return getXOtherOperatorExpressionAccess().getRule();
	}

	//OpOther:
	//	'->' | '..<' | '>' '..' | '..' | '=>' | '>' (=> ('>' '>') | '>') | '<' (=> ('<' '<') | '<' | '=>') | '<>' | '?:';
	public XbaseGrammarAccess.OpOtherElements getOpOtherAccess() {
		return gaXbase.getOpOtherAccess();
	}
	
	public ParserRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}

	//XAdditiveExpression XExpression:
	//	XMultiplicativeExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd])
	//	rightOperand=XMultiplicativeExpression)*;
	public XbaseGrammarAccess.XAdditiveExpressionElements getXAdditiveExpressionAccess() {
		return gaXbase.getXAdditiveExpressionAccess();
	}
	
	public ParserRule getXAdditiveExpressionRule() {
		return getXAdditiveExpressionAccess().getRule();
	}

	//OpAdd:
	//	'+' | '-';
	public XbaseGrammarAccess.OpAddElements getOpAddAccess() {
		return gaXbase.getOpAddAccess();
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}

	//XMultiplicativeExpression XExpression:
	//	XUnaryOperation (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti])
	//	rightOperand=XUnaryOperation)*;
	public XbaseGrammarAccess.XMultiplicativeExpressionElements getXMultiplicativeExpressionAccess() {
		return gaXbase.getXMultiplicativeExpressionAccess();
	}
	
	public ParserRule getXMultiplicativeExpressionRule() {
		return getXMultiplicativeExpressionAccess().getRule();
	}

	//OpMulti:
	//	'*' | '**' | '/' | '%';
	public XbaseGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaXbase.getOpMultiAccess();
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}

	//XUnaryOperation XExpression:
	//	{XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XUnaryOperation | XCastedExpression;
	public XbaseGrammarAccess.XUnaryOperationElements getXUnaryOperationAccess() {
		return gaXbase.getXUnaryOperationAccess();
	}
	
	public ParserRule getXUnaryOperationRule() {
		return getXUnaryOperationAccess().getRule();
	}

	//OpUnary:
	//	"!" | "-" | "+";
	public XbaseGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaXbase.getOpUnaryAccess();
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}

	//XCastedExpression XExpression:
	//	XPostfixOperation (=> ({XCastedExpression.target=current} 'as') type=JvmTypeReference)*;
	public XbaseGrammarAccess.XCastedExpressionElements getXCastedExpressionAccess() {
		return gaXbase.getXCastedExpressionAccess();
	}
	
	public ParserRule getXCastedExpressionRule() {
		return getXCastedExpressionAccess().getRule();
	}

	//XPostfixOperation XExpression:
	//	XMemberFeatureCall => ({XPostfixOperation.operand=current} feature=[types::JvmIdentifiableElement|OpPostfix])?;
	public XbaseGrammarAccess.XPostfixOperationElements getXPostfixOperationAccess() {
		return gaXbase.getXPostfixOperationAccess();
	}
	
	public ParserRule getXPostfixOperationRule() {
		return getXPostfixOperationAccess().getRule();
	}

	//OpPostfix:
	//	"++" | "--";
	public XbaseGrammarAccess.OpPostfixElements getOpPostfixAccess() {
		return gaXbase.getOpPostfixAccess();
	}
	
	public ParserRule getOpPostfixRule() {
		return getOpPostfixAccess().getRule();
	}

	//XMemberFeatureCall XExpression:
	//	XPrimaryExpression (=> ({XAssignment.assignable=current} ('.' | explicitStatic?="::")
	//	feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment | =>
	//	({XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." | explicitStatic?="::")) ('<'
	//	typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?='(' (memberCallArguments+=XShortClosure
	//	| memberCallArguments+=XExpression (',' memberCallArguments+=XExpression)*)? ')')? memberCallArguments+=XClosure?)*;
	public XbaseGrammarAccess.XMemberFeatureCallElements getXMemberFeatureCallAccess() {
		return gaXbase.getXMemberFeatureCallAccess();
	}
	
	public ParserRule getXMemberFeatureCallRule() {
		return getXMemberFeatureCallAccess().getRule();
	}

	//XPrimaryExpression XExpression:
	//	XConstructorCall | XBlockExpression | XSwitchExpression | XSynchronizedExpression | XFeatureCall | XLiteral |
	//	XIfExpression | XForLoopExpression | XBasicForLoopExpression | XWhileExpression | XDoWhileExpression |
	//	XThrowExpression | XReturnExpression | XTryCatchFinallyExpression | XParenthesizedExpression;
	public XbaseGrammarAccess.XPrimaryExpressionElements getXPrimaryExpressionAccess() {
		return gaXbase.getXPrimaryExpressionAccess();
	}
	
	public ParserRule getXPrimaryExpressionRule() {
		return getXPrimaryExpressionAccess().getRule();
	}

	//XLiteral XExpression:
	//	XCollectionLiteral | XClosure | XBooleanLiteral | XNumberLiteral | XNullLiteral | XStringLiteral | XTypeLiteral;
	public XbaseGrammarAccess.XLiteralElements getXLiteralAccess() {
		return gaXbase.getXLiteralAccess();
	}
	
	public ParserRule getXLiteralRule() {
		return getXLiteralAccess().getRule();
	}

	//XCollectionLiteral:
	//	XSetLiteral | XListLiteral;
	public XbaseGrammarAccess.XCollectionLiteralElements getXCollectionLiteralAccess() {
		return gaXbase.getXCollectionLiteralAccess();
	}
	
	public ParserRule getXCollectionLiteralRule() {
		return getXCollectionLiteralAccess().getRule();
	}

	//XSetLiteral:
	//	{XSetLiteral} '#' '{' (elements+=XExpression (',' elements+=XExpression)*)? '}';
	public XbaseGrammarAccess.XSetLiteralElements getXSetLiteralAccess() {
		return gaXbase.getXSetLiteralAccess();
	}
	
	public ParserRule getXSetLiteralRule() {
		return getXSetLiteralAccess().getRule();
	}

	//XListLiteral:
	//	{XListLiteral} '#' '[' (elements+=XExpression (',' elements+=XExpression)*)? ']';
	public XbaseGrammarAccess.XListLiteralElements getXListLiteralAccess() {
		return gaXbase.getXListLiteralAccess();
	}
	
	public ParserRule getXListLiteralRule() {
		return getXListLiteralAccess().getRule();
	}

	//XClosure XExpression:
	//	=> ({XClosure} '[') => ((declaredFormalParameters+=JvmFormalParameter (','
	//	declaredFormalParameters+=JvmFormalParameter)*)? explicitSyntax?='|')? expression=XExpressionInClosure ']';
	public XbaseGrammarAccess.XClosureElements getXClosureAccess() {
		return gaXbase.getXClosureAccess();
	}
	
	public ParserRule getXClosureRule() {
		return getXClosureAccess().getRule();
	}

	//XExpressionInClosure XExpression:
	//	{XBlockExpression} (expressions+=XExpressionOrVarDeclaration ';'?)*;
	public XbaseGrammarAccess.XExpressionInClosureElements getXExpressionInClosureAccess() {
		return gaXbase.getXExpressionInClosureAccess();
	}
	
	public ParserRule getXExpressionInClosureRule() {
		return getXExpressionInClosureAccess().getRule();
	}

	//XShortClosure XExpression:
	//	=> ({XClosure} (declaredFormalParameters+=JvmFormalParameter (',' declaredFormalParameters+=JvmFormalParameter)*)?
	//	explicitSyntax?='|') expression=XExpression;
	public XbaseGrammarAccess.XShortClosureElements getXShortClosureAccess() {
		return gaXbase.getXShortClosureAccess();
	}
	
	public ParserRule getXShortClosureRule() {
		return getXShortClosureAccess().getRule();
	}

	//XParenthesizedExpression XExpression:
	//	'(' XExpression ')';
	public XbaseGrammarAccess.XParenthesizedExpressionElements getXParenthesizedExpressionAccess() {
		return gaXbase.getXParenthesizedExpressionAccess();
	}
	
	public ParserRule getXParenthesizedExpressionRule() {
		return getXParenthesizedExpressionAccess().getRule();
	}

	//XIfExpression XExpression:
	//	{XIfExpression} 'if' '(' if=XExpression ')' then=XExpression (=> 'else' else=XExpression)?;
	public XbaseGrammarAccess.XIfExpressionElements getXIfExpressionAccess() {
		return gaXbase.getXIfExpressionAccess();
	}
	
	public ParserRule getXIfExpressionRule() {
		return getXIfExpressionAccess().getRule();
	}

	//XSwitchExpression XExpression:
	//	{XSwitchExpression} 'switch' (=> ('(' declaredParam=JvmFormalParameter ':') switch=XExpression ')' | =>
	//	(declaredParam=JvmFormalParameter ':')? switch=XExpression) '{' cases+=XCasePart* ('default' ':'
	//	default=XExpression)? '}';
	public XbaseGrammarAccess.XSwitchExpressionElements getXSwitchExpressionAccess() {
		return gaXbase.getXSwitchExpressionAccess();
	}
	
	public ParserRule getXSwitchExpressionRule() {
		return getXSwitchExpressionAccess().getRule();
	}

	//XCasePart:
	//	{XCasePart} typeGuard=JvmTypeReference? ('case' case=XExpression)? (':' then=XExpression | fallThrough?=',');
	public XbaseGrammarAccess.XCasePartElements getXCasePartAccess() {
		return gaXbase.getXCasePartAccess();
	}
	
	public ParserRule getXCasePartRule() {
		return getXCasePartAccess().getRule();
	}

	//XForLoopExpression XExpression:
	//	=> ({XForLoopExpression} 'for' '(' declaredParam=JvmFormalParameter ':') forExpression=XExpression ')'
	//	eachExpression=XExpression;
	public XbaseGrammarAccess.XForLoopExpressionElements getXForLoopExpressionAccess() {
		return gaXbase.getXForLoopExpressionAccess();
	}
	
	public ParserRule getXForLoopExpressionRule() {
		return getXForLoopExpressionAccess().getRule();
	}

	//XBasicForLoopExpression XExpression:
	//	{XBasicForLoopExpression} 'for' '(' (initExpressions+=XExpressionOrVarDeclaration (','
	//	initExpressions+=XExpressionOrVarDeclaration)*)? ';' expression=XExpression? ';' (updateExpressions+=XExpression (','
	//	updateExpressions+=XExpression)*)? ')' eachExpression=XExpression;
	public XbaseGrammarAccess.XBasicForLoopExpressionElements getXBasicForLoopExpressionAccess() {
		return gaXbase.getXBasicForLoopExpressionAccess();
	}
	
	public ParserRule getXBasicForLoopExpressionRule() {
		return getXBasicForLoopExpressionAccess().getRule();
	}

	//XWhileExpression XExpression:
	//	{XWhileExpression} 'while' '(' predicate=XExpression ')' body=XExpression;
	public XbaseGrammarAccess.XWhileExpressionElements getXWhileExpressionAccess() {
		return gaXbase.getXWhileExpressionAccess();
	}
	
	public ParserRule getXWhileExpressionRule() {
		return getXWhileExpressionAccess().getRule();
	}

	//XDoWhileExpression XExpression:
	//	{XDoWhileExpression} 'do' body=XExpression 'while' '(' predicate=XExpression ')';
	public XbaseGrammarAccess.XDoWhileExpressionElements getXDoWhileExpressionAccess() {
		return gaXbase.getXDoWhileExpressionAccess();
	}
	
	public ParserRule getXDoWhileExpressionRule() {
		return getXDoWhileExpressionAccess().getRule();
	}

	//XBlockExpression XExpression:
	//	{XBlockExpression} '{' (expressions+=XExpressionOrVarDeclaration ';'?)* '}';
	public XbaseGrammarAccess.XBlockExpressionElements getXBlockExpressionAccess() {
		return gaXbase.getXBlockExpressionAccess();
	}
	
	public ParserRule getXBlockExpressionRule() {
		return getXBlockExpressionAccess().getRule();
	}

	//XExpressionOrVarDeclaration XExpression:
	//	XVariableDeclaration | XExpression;
	public XbaseGrammarAccess.XExpressionOrVarDeclarationElements getXExpressionOrVarDeclarationAccess() {
		return gaXbase.getXExpressionOrVarDeclarationAccess();
	}
	
	public ParserRule getXExpressionOrVarDeclarationRule() {
		return getXExpressionOrVarDeclarationAccess().getRule();
	}

	//XVariableDeclaration XExpression:
	//	{XVariableDeclaration} (writeable?='var' | 'val') (=> (type=JvmTypeReference name=super::ValidID) |
	//	name=super::ValidID) ('=' right=XExpression)?;
	public XbaseGrammarAccess.XVariableDeclarationElements getXVariableDeclarationAccess() {
		return gaXbase.getXVariableDeclarationAccess();
	}
	
	public ParserRule getXVariableDeclarationRule() {
		return getXVariableDeclarationAccess().getRule();
	}

	//JvmFormalParameter types::JvmFormalParameter:
	//	parameterType=JvmTypeReference? name=super::ValidID;
	public XbaseGrammarAccess.JvmFormalParameterElements getJvmFormalParameterAccess() {
		return gaXbase.getJvmFormalParameterAccess();
	}
	
	public ParserRule getJvmFormalParameterRule() {
		return getJvmFormalParameterAccess().getRule();
	}

	//FullJvmFormalParameter types::JvmFormalParameter:
	//	parameterType=JvmTypeReference name=super::ValidID;
	public XbaseGrammarAccess.FullJvmFormalParameterElements getFullJvmFormalParameterAccess() {
		return gaXbase.getFullJvmFormalParameterAccess();
	}
	
	public ParserRule getFullJvmFormalParameterRule() {
		return getFullJvmFormalParameterAccess().getRule();
	}

	//XFeatureCall XExpression:
	//	{XFeatureCall} ('<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?='(' (featureCallArguments+=XShortClosure
	//	| featureCallArguments+=XExpression (',' featureCallArguments+=XExpression)*)? ')')? featureCallArguments+=XClosure?;
	public XbaseGrammarAccess.XFeatureCallElements getXFeatureCallAccess() {
		return gaXbase.getXFeatureCallAccess();
	}
	
	public ParserRule getXFeatureCallRule() {
		return getXFeatureCallAccess().getRule();
	}

	//FeatureCallID:
	//	super::ValidID | 'extends' | 'static' | 'import' | 'extension';
	public XbaseGrammarAccess.FeatureCallIDElements getFeatureCallIDAccess() {
		return gaXbase.getFeatureCallIDAccess();
	}
	
	public ParserRule getFeatureCallIDRule() {
		return getFeatureCallIDAccess().getRule();
	}

	//IdOrSuper:
	//	FeatureCallID | 'super';
	public XbaseGrammarAccess.IdOrSuperElements getIdOrSuperAccess() {
		return gaXbase.getIdOrSuperAccess();
	}
	
	public ParserRule getIdOrSuperRule() {
		return getIdOrSuperAccess().getRule();
	}

	//XConstructorCall XExpression:
	//	{XConstructorCall} 'new' constructor=[types::JvmConstructor|QualifiedName] (=> '<'
	//	typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')? (=>
	//	explicitConstructorCall?='(' (arguments+=XShortClosure | arguments+=XExpression (',' arguments+=XExpression)*)? ')')?
	//	arguments+=XClosure?;
	public XbaseGrammarAccess.XConstructorCallElements getXConstructorCallAccess() {
		return gaXbase.getXConstructorCallAccess();
	}
	
	public ParserRule getXConstructorCallRule() {
		return getXConstructorCallAccess().getRule();
	}

	//XBooleanLiteral XExpression:
	//	{XBooleanLiteral} ('false' | isTrue?='true');
	public XbaseGrammarAccess.XBooleanLiteralElements getXBooleanLiteralAccess() {
		return gaXbase.getXBooleanLiteralAccess();
	}
	
	public ParserRule getXBooleanLiteralRule() {
		return getXBooleanLiteralAccess().getRule();
	}

	//XNullLiteral XExpression:
	//	{XNullLiteral} 'null';
	public XbaseGrammarAccess.XNullLiteralElements getXNullLiteralAccess() {
		return gaXbase.getXNullLiteralAccess();
	}
	
	public ParserRule getXNullLiteralRule() {
		return getXNullLiteralAccess().getRule();
	}

	//XNumberLiteral XExpression:
	//	{XNumberLiteral} value=Number;
	public XbaseGrammarAccess.XNumberLiteralElements getXNumberLiteralAccess() {
		return gaXbase.getXNumberLiteralAccess();
	}
	
	public ParserRule getXNumberLiteralRule() {
		return getXNumberLiteralAccess().getRule();
	}

	//XStringLiteral XExpression:
	//	{XStringLiteral} value=STRING;
	public XbaseGrammarAccess.XStringLiteralElements getXStringLiteralAccess() {
		return gaXbase.getXStringLiteralAccess();
	}
	
	public ParserRule getXStringLiteralRule() {
		return getXStringLiteralAccess().getRule();
	}

	//XTypeLiteral XExpression:
	//	{XTypeLiteral} 'typeof' '(' type=[types::JvmType|QualifiedName] arrayDimensions+=ArrayBrackets* ')';
	public XbaseGrammarAccess.XTypeLiteralElements getXTypeLiteralAccess() {
		return gaXbase.getXTypeLiteralAccess();
	}
	
	public ParserRule getXTypeLiteralRule() {
		return getXTypeLiteralAccess().getRule();
	}

	//XThrowExpression XExpression:
	//	{XThrowExpression} 'throw' expression=XExpression;
	public XbaseGrammarAccess.XThrowExpressionElements getXThrowExpressionAccess() {
		return gaXbase.getXThrowExpressionAccess();
	}
	
	public ParserRule getXThrowExpressionRule() {
		return getXThrowExpressionAccess().getRule();
	}

	//XReturnExpression XExpression:
	//	{XReturnExpression} 'return' -> expression=XExpression?;
	public XbaseGrammarAccess.XReturnExpressionElements getXReturnExpressionAccess() {
		return gaXbase.getXReturnExpressionAccess();
	}
	
	public ParserRule getXReturnExpressionRule() {
		return getXReturnExpressionAccess().getRule();
	}

	//XTryCatchFinallyExpression XExpression:
	//	{XTryCatchFinallyExpression} 'try' expression=XExpression (catchClauses+=XCatchClause+ (=> 'finally'
	//	finallyExpression=XExpression)? | 'finally' finallyExpression=XExpression);
	public XbaseGrammarAccess.XTryCatchFinallyExpressionElements getXTryCatchFinallyExpressionAccess() {
		return gaXbase.getXTryCatchFinallyExpressionAccess();
	}
	
	public ParserRule getXTryCatchFinallyExpressionRule() {
		return getXTryCatchFinallyExpressionAccess().getRule();
	}

	//XSynchronizedExpression XExpression:
	//	=> ({XSynchronizedExpression} 'synchronized' '(') param=XExpression ')' expression=XExpression;
	public XbaseGrammarAccess.XSynchronizedExpressionElements getXSynchronizedExpressionAccess() {
		return gaXbase.getXSynchronizedExpressionAccess();
	}
	
	public ParserRule getXSynchronizedExpressionRule() {
		return getXSynchronizedExpressionAccess().getRule();
	}

	//XCatchClause:
	//	=> 'catch' '(' declaredParam=FullJvmFormalParameter ')' expression=XExpression;
	public XbaseGrammarAccess.XCatchClauseElements getXCatchClauseAccess() {
		return gaXbase.getXCatchClauseAccess();
	}
	
	public ParserRule getXCatchClauseRule() {
		return getXCatchClauseAccess().getRule();
	}

	//@Override
	//QualifiedName:
	//	super::ValidID (=> '.' super::ValidID)*;
	public XbaseGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaXbase.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//Number hidden():
	//	HEX | (super::INT | DECIMAL) ('.' (super::INT | DECIMAL))?;
	public XbaseGrammarAccess.NumberElements getNumberAccess() {
		return gaXbase.getNumberAccess();
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}

	///**
	// * Dummy rule, for "better" downwards compatibility, since GrammarAccess generates non-static inner classes,
	// * which makes downstream grammars break on classloading, when a rule is removed.
	// */
	//StaticQualifier:
	//	(super::ValidID '::')+;
	public XbaseGrammarAccess.StaticQualifierElements getStaticQualifierAccess() {
		return gaXbase.getStaticQualifierAccess();
	}
	
	public ParserRule getStaticQualifierRule() {
		return getStaticQualifierAccess().getRule();
	}

	//terminal HEX:
	//	('0x' | '0X') ('0'..'9' | 'a'..'f' | 'A'..'F' | '_')+ ('#' (('b' | 'B') ('i' | 'I') | ('l' | 'L')))?;
	public TerminalRule getHEXRule() {
		return gaXbase.getHEXRule();
	} 

	//terminal DECIMAL:
	//	super::INT (('e' | 'E') ('+' | '-')? super::INT)? (('b' | 'B') ('i' | 'I' | 'd' | 'D') | ('l' | 'L' | 'd' | 'D' | 'f'
	//	| 'F'))?;
	public TerminalRule getDECIMALRule() {
		return gaXbase.getDECIMALRule();
	} 

	//JvmTypeReference:
	//	JvmParameterizedTypeReference => ({JvmGenericArrayTypeReference.componentType=current} ArrayBrackets)* |
	//	XFunctionTypeRef;
	public XtypeGrammarAccess.JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return gaXtype.getJvmTypeReferenceAccess();
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}

	//ArrayBrackets:
	//	'[' ']';
	public XtypeGrammarAccess.ArrayBracketsElements getArrayBracketsAccess() {
		return gaXtype.getArrayBracketsAccess();
	}
	
	public ParserRule getArrayBracketsRule() {
		return getArrayBracketsAccess().getRule();
	}

	//XFunctionTypeRef:
	//	('(' (paramTypes+=JvmTypeReference (',' paramTypes+=JvmTypeReference)*)? ')')? '=>' returnType=JvmTypeReference;
	public XtypeGrammarAccess.XFunctionTypeRefElements getXFunctionTypeRefAccess() {
		return gaXtype.getXFunctionTypeRefAccess();
	}
	
	public ParserRule getXFunctionTypeRefRule() {
		return getXFunctionTypeRefAccess().getRule();
	}

	//JvmParameterizedTypeReference:
	//	type=[JvmType|super::QualifiedName] (=> '<' arguments+=JvmArgumentTypeReference (','
	//	arguments+=JvmArgumentTypeReference)* '>' (=> ({JvmInnerTypeReference.outer=current} '.')
	//	type=[JvmType|super::ValidID] (=> '<' arguments+=JvmArgumentTypeReference (',' arguments+=JvmArgumentTypeReference)*
	//	'>')?)*)?;
	public XtypeGrammarAccess.JvmParameterizedTypeReferenceElements getJvmParameterizedTypeReferenceAccess() {
		return gaXtype.getJvmParameterizedTypeReferenceAccess();
	}
	
	public ParserRule getJvmParameterizedTypeReferenceRule() {
		return getJvmParameterizedTypeReferenceAccess().getRule();
	}

	//JvmArgumentTypeReference JvmTypeReference:
	//	JvmTypeReference | JvmWildcardTypeReference;
	public XtypeGrammarAccess.JvmArgumentTypeReferenceElements getJvmArgumentTypeReferenceAccess() {
		return gaXtype.getJvmArgumentTypeReferenceAccess();
	}
	
	public ParserRule getJvmArgumentTypeReferenceRule() {
		return getJvmArgumentTypeReferenceAccess().getRule();
	}

	//JvmWildcardTypeReference:
	//	{JvmWildcardTypeReference} '?' (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded* |
	//	constraints+=JvmLowerBound constraints+=JvmLowerBoundAnded*)?;
	public XtypeGrammarAccess.JvmWildcardTypeReferenceElements getJvmWildcardTypeReferenceAccess() {
		return gaXtype.getJvmWildcardTypeReferenceAccess();
	}
	
	public ParserRule getJvmWildcardTypeReferenceRule() {
		return getJvmWildcardTypeReferenceAccess().getRule();
	}

	//JvmUpperBound:
	//	'extends' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundElements getJvmUpperBoundAccess() {
		return gaXtype.getJvmUpperBoundAccess();
	}
	
	public ParserRule getJvmUpperBoundRule() {
		return getJvmUpperBoundAccess().getRule();
	}

	//JvmUpperBoundAnded JvmUpperBound:
	//	'&' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundAndedElements getJvmUpperBoundAndedAccess() {
		return gaXtype.getJvmUpperBoundAndedAccess();
	}
	
	public ParserRule getJvmUpperBoundAndedRule() {
		return getJvmUpperBoundAndedAccess().getRule();
	}

	//JvmLowerBound:
	//	'super' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundElements getJvmLowerBoundAccess() {
		return gaXtype.getJvmLowerBoundAccess();
	}
	
	public ParserRule getJvmLowerBoundRule() {
		return getJvmLowerBoundAccess().getRule();
	}

	//JvmLowerBoundAnded JvmLowerBound:
	//	'&' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundAndedElements getJvmLowerBoundAndedAccess() {
		return gaXtype.getJvmLowerBoundAndedAccess();
	}
	
	public ParserRule getJvmLowerBoundAndedRule() {
		return getJvmLowerBoundAndedAccess().getRule();
	}

	//JvmTypeParameter:
	//	name=super::ValidID (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded*)?;
	public XtypeGrammarAccess.JvmTypeParameterElements getJvmTypeParameterAccess() {
		return gaXtype.getJvmTypeParameterAccess();
	}
	
	public ParserRule getJvmTypeParameterRule() {
		return getJvmTypeParameterAccess().getRule();
	}

	//QualifiedNameWithWildcard:
	//	super::QualifiedName '.' '*';
	public XtypeGrammarAccess.QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return gaXtype.getQualifiedNameWithWildcardAccess();
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}

	//XImportSection:
	//	importDeclarations+=XImportDeclaration+;
	public XtypeGrammarAccess.XImportSectionElements getXImportSectionAccess() {
		return gaXtype.getXImportSectionAccess();
	}
	
	public ParserRule getXImportSectionRule() {
		return getXImportSectionAccess().getRule();
	}

	//XImportDeclaration:
	//	'import' (static?='static' extension?='extension'? importedType=[JvmDeclaredType|QualifiedNameInStaticImport]
	//	(wildcard?='*' | memberName=super::ValidID) | importedType=[JvmDeclaredType|super::QualifiedName] |
	//	importedNamespace=QualifiedNameWithWildcard) ';'?;
	public XtypeGrammarAccess.XImportDeclarationElements getXImportDeclarationAccess() {
		return gaXtype.getXImportDeclarationAccess();
	}
	
	public ParserRule getXImportDeclarationRule() {
		return getXImportDeclarationAccess().getRule();
	}

	//QualifiedNameInStaticImport:
	//	(super::ValidID '.')+;
	public XtypeGrammarAccess.QualifiedNameInStaticImportElements getQualifiedNameInStaticImportAccess() {
		return gaXtype.getQualifiedNameInStaticImportAccess();
	}
	
	public ParserRule getQualifiedNameInStaticImportRule() {
		return getQualifiedNameInStaticImportAccess().getRule();
	}

	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '$' | '_') ('a'..'z' | 'A'..'Z' | '$' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaXtype.getIDRule();
	} 

	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"'? | "'" ('\\' . | !('\\' | "'"))* "'"?;
	public TerminalRule getSTRINGRule() {
		return gaXtype.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaXtype.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaXtype.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaXtype.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaXtype.getANY_OTHERRule();
	} 
}
