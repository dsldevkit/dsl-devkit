/*******************************************************************************
 * Copyright (c) 2016 Avaloq Evolution AG and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Avaloq Evolution AG - initial API and implementation
 *******************************************************************************/
grammar com.avaloq.tools.ddk.xtext.format.Format with org.eclipse.xtext.xbase.annotations.XbaseWithAnnotations

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.eclipse.org/2008/Xtext" as xtext
import "http://www.eclipse.org/xtext/common/JavaVMTypes" as types
generate format "http://www.avaloq.com/tools/ddk/xtext/format/Format"

FormatConfiguration:
  'formatter' 'for' targetGrammar=[xtext::Grammar|DottedID]
  ('with' extendedFormatConfiguration=[FormatConfiguration|DottedID])?
  ('extends' formatterBaseClass=[types::JvmDeclaredType|QualifiedName])?
  ('const' constants+=Constant ';')*
  (rules+=Rule)*;

Constant:
  (intType?='int' | stringType?='String')? //specifying the type is optional
  name=ID '=' (intValue=IntObject | stringValue=STRING);

IntValue:
  (literal=IntObject | reference=[Constant|DottedID]);

StringValue:
  (literal=STRING | reference=[Constant|DottedID]);

Rule:
  WildcardRule | GrammarRule;

GrammarRule:
  (override ?= 'override')?
  targetRule=[xtext::AbstractRule|ID] '{'
  (directives+=GrammarRuleDirective
  | directives+=GroupBlock)*
  '}';

WildcardRule:
  {WildcardRule}
  (override ?= 'override')?
  '*' '{'
  (directives+=WildcardRuleDirective)*
  '}';

GrammarRuleDirective:
  SpecificDirective | ContextFreeDirective | KeywordPair;

WildcardRuleDirective:
  ContextFreeDirective | KeywordPair;

GrammarElementReference :
  ('=' assignment=[xtext::Assignment|ParameterizedIdentifier])
  | ('@' ruleCall=[xtext::RuleCall|ParameterizedIdentifier])
  | (self=[xtext::AbstractRule|RuleSelfIdentifier])
  | (rule=[xtext::AbstractRule|Identifier])
  | (keyword=[xtext::Keyword|ParameterizedString]);

GrammarElementLookup :
  (rule=[xtext::AbstractRule|Identifier])
  | (keyword=STRING);

ContextFreeDirective:
  '[' grammarElements+=GrammarElementLookup (',' grammarElements+=GrammarElementLookup)* ']'
  matcherList=MatcherList;

SpecificDirective:
  grammarElements+=GrammarElementReference (',' grammarElements+=GrammarElementReference)*
  matcherList=MatcherList;

MatcherList:
  ':'
  matchers+=Matcher (',' matchers+=Matcher)*
  ';';

GroupBlock:
  'group' grammarElement=[xtext::CompoundElement|IntIdentifier]
  (
    (matcherList=MatcherList)
    | ('=>' subGroup=GroupBlock)
    | ('{' (directives+=GrammarRuleDirective)* '}')
  )
  ;

KeywordPair:
  '(' left=STRING right=STRING ')'
  ':'
  (('left' '.' leftMatchers+=Matcher)
  | ('right' '.' rightMatchers+=Matcher))
  (','
  (('left' '.' leftMatchers+=Matcher)
  | ('right' '.' rightMatchers+=Matcher)))*
  ';';

Matcher:
  locator=Locator type=MatcherType (condition = XBlockExpression)? ;

enum MatcherType:
  before | after | around | between | range ;

Locator:
  SpaceLocator | RightPaddingLocator | LinewrapLocator | ColumnLocator | OffsetLocator | IndentLocator | NoFormatLocator;

NoFormatLocator:
  {NoFormatLocator}
  'no_format';

SpaceLocator:
  ('space' value=StringValue)
  | (noSpace?='no_space');

RightPaddingLocator:
  'right_padding' value=IntValue;

LinewrapLocator:
  {LinewrapLocator}
  ('linewrap'
  (value=IntValue
  | (minimum=IntValue default=IntValue maximum=IntValue))?)
  | (noLinewrap?='no_linewrap');

ColumnLocator:
  'column' (fixed ?= 'fixed')?  (value=IntValue | parameter=XBlockExpression) (relative ?= 'relative')? (nobreak ?= 'nobreak')?;

OffsetLocator:
  'offset' (fixed ?= 'fixed')? value=IntValue (nobreak ?= 'nobreak')?;

IndentLocator:
  {IndentLocator}
  (increment?='increment' | 'decrement')
  (value=IntValue | parameter=XBlockExpression)?;

ParameterizedIdentifier returns ecore::EString:
  Identifier ('(' INT ',' INT ')')?;

ParameterizedString returns ecore::EString:
  STRING ('(' INT ',' INT ')')?;

Identifier returns ecore::EString:
  ID | 'default' | 'val';

DottedID returns ecore::EString:
  Identifier ('.' Identifier)*;

IntIdentifier returns ecore::EString:
  INT;

IntObject returns ecore::EIntegerObject:
  INT;

RuleSelfIdentifier:
  'rule';

ValidID:
  'context' | 'currentColumn' | ID;

/**
 * Overwrite INT rule one more time (exactly as in Xbase.xtext) to avoid false-positive error.
 */
terminal INT returns ecore::EInt:
  '0'..'9' ('0'..'9'|'_')*;

