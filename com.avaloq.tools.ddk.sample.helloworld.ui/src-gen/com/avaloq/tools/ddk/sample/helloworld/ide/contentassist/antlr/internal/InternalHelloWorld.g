/*
 * generated by Xtext 2.14.0
 */
grammar InternalHelloWorld;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package com.avaloq.tools.ddk.sample.helloworld.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package com.avaloq.tools.ddk.sample.helloworld.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import com.avaloq.tools.ddk.sample.helloworld.services.HelloWorldGrammarAccess;

}
@parser::members {
	private HelloWorldGrammarAccess grammarAccess;

	public void setGrammarAccess(HelloWorldGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getGroup()); }
		(rule__Model__Group__0)
		{ after(grammarAccess.getModelAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleGreeting
entryRuleGreeting
:
{ before(grammarAccess.getGreetingRule()); }
	 ruleGreeting
{ after(grammarAccess.getGreetingRule()); } 
	 EOF 
;

// Rule Greeting
ruleGreeting 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getGreetingAccess().getGroup()); }
		(rule__Greeting__Group__0)
		{ after(grammarAccess.getGreetingAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleKeywordsExample
entryRuleKeywordsExample
:
{ before(grammarAccess.getKeywordsExampleRule()); }
	 ruleKeywordsExample
{ after(grammarAccess.getKeywordsExampleRule()); } 
	 EOF 
;

// Rule KeywordsExample
ruleKeywordsExample 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getKeywordsExampleAccess().getAlternatives()); }
		(rule__KeywordsExample__Alternatives)
		{ after(grammarAccess.getKeywordsExampleAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOptionOne
entryRuleOptionOne
:
{ before(grammarAccess.getOptionOneRule()); }
	 ruleOptionOne
{ after(grammarAccess.getOptionOneRule()); } 
	 EOF 
;

// Rule OptionOne
ruleOptionOne 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOptionOneAccess().getKeyOneParserRuleCall()); }
		ruleKeyOne
		{ after(grammarAccess.getOptionOneAccess().getKeyOneParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOptionTwo
entryRuleOptionTwo
:
{ before(grammarAccess.getOptionTwoRule()); }
	 ruleOptionTwo
{ after(grammarAccess.getOptionTwoRule()); } 
	 EOF 
;

// Rule OptionTwo
ruleOptionTwo 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOptionTwoAccess().getGroup()); }
		(rule__OptionTwo__Group__0)
		{ after(grammarAccess.getOptionTwoAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleKeyOne
entryRuleKeyOne
:
{ before(grammarAccess.getKeyOneRule()); }
	 ruleKeyOne
{ after(grammarAccess.getKeyOneRule()); } 
	 EOF 
;

// Rule KeyOne
ruleKeyOne 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getKeyOneAccess().getIDTerminalRuleCall()); }
		RULE_ID
		{ after(grammarAccess.getKeyOneAccess().getIDTerminalRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleKeyTwo
entryRuleKeyTwo
:
{ before(grammarAccess.getKeyTwoRule()); }
	 ruleKeyTwo
{ after(grammarAccess.getKeyTwoRule()); } 
	 EOF 
;

// Rule KeyTwo
ruleKeyTwo 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getKeyTwoAccess().getIDTerminalRuleCall()); }
		RULE_ID
		{ after(grammarAccess.getKeyTwoAccess().getIDTerminalRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleKeyOther
entryRuleKeyOther
:
{ before(grammarAccess.getKeyOtherRule()); }
	 ruleKeyOther
{ after(grammarAccess.getKeyOtherRule()); } 
	 EOF 
;

// Rule KeyOther
ruleKeyOther 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getKeyOtherAccess().getIDTerminalRuleCall()); }
		RULE_ID
		{ after(grammarAccess.getKeyOtherAccess().getIDTerminalRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__KeywordsExample__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getKeywordsExampleAccess().getOptionAssignment_0()); }
		(rule__KeywordsExample__OptionAssignment_0)
		{ after(grammarAccess.getKeywordsExampleAccess().getOptionAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getKeywordsExampleAccess().getOptionAssignment_1()); }
		(rule__KeywordsExample__OptionAssignment_1)
		{ after(grammarAccess.getKeywordsExampleAccess().getOptionAssignment_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__0__Impl
	rule__Model__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getGreetingsAssignment_0()); }
	(rule__Model__GreetingsAssignment_0)*
	{ after(grammarAccess.getModelAccess().getGreetingsAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getKeywordsExampleAssignment_1()); }
	(rule__Model__KeywordsExampleAssignment_1)?
	{ after(grammarAccess.getModelAccess().getKeywordsExampleAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Greeting__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Greeting__Group__0__Impl
	rule__Greeting__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Greeting__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGreetingAccess().getHelloKeyword_0()); }
	'Hello'
	{ after(grammarAccess.getGreetingAccess().getHelloKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Greeting__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Greeting__Group__1__Impl
	rule__Greeting__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Greeting__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGreetingAccess().getNameAssignment_1()); }
	(rule__Greeting__NameAssignment_1)
	{ after(grammarAccess.getGreetingAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Greeting__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Greeting__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Greeting__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGreetingAccess().getExclamationMarkKeyword_2()); }
	'!'
	{ after(grammarAccess.getGreetingAccess().getExclamationMarkKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OptionTwo__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OptionTwo__Group__0__Impl
	rule__OptionTwo__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OptionTwo__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOptionTwoAccess().getKeyTwoParserRuleCall_0()); }
	ruleKeyTwo
	{ after(grammarAccess.getOptionTwoAccess().getKeyTwoParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OptionTwo__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OptionTwo__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OptionTwo__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOptionTwoAccess().getKeyOtherParserRuleCall_1()); }
	ruleKeyOther
	{ after(grammarAccess.getOptionTwoAccess().getKeyOtherParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__GreetingsAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getGreetingsGreetingParserRuleCall_0_0()); }
		ruleGreeting
		{ after(grammarAccess.getModelAccess().getGreetingsGreetingParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__KeywordsExampleAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getKeywordsExampleKeywordsExampleParserRuleCall_1_0()); }
		ruleKeywordsExample
		{ after(grammarAccess.getModelAccess().getKeywordsExampleKeywordsExampleParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Greeting__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGreetingAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getGreetingAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__KeywordsExample__OptionAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getKeywordsExampleAccess().getOptionOptionOneParserRuleCall_0_0()); }
		ruleOptionOne
		{ after(grammarAccess.getKeywordsExampleAccess().getOptionOptionOneParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__KeywordsExample__OptionAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getKeywordsExampleAccess().getOptionOptionTwoParserRuleCall_1_0()); }
		ruleOptionTwo
		{ after(grammarAccess.getKeywordsExampleAccess().getOptionOptionTwoParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
