/*
 * generated by Xtext
 */
package com.avaloq.tools.ddk.checkcfg.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.xbase.services.XbaseGrammarAccess;
import org.eclipse.xtext.xbase.services.XtypeGrammarAccess;

@Singleton
public class CheckCfgGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class CheckConfigurationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.avaloq.tools.ddk.checkcfg.CheckCfg.CheckConfiguration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCheckKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cConfigurationKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameValidIDParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cParameterConfigurationsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cParameterConfigurationsConfiguredParameterParserRuleCall_3_0 = (RuleCall)cParameterConfigurationsAssignment_3.eContents().get(0);
		private final Assignment cLanguageValidatorConfigurationsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cLanguageValidatorConfigurationsConfiguredLanguageValidatorParserRuleCall_4_0 = (RuleCall)cLanguageValidatorConfigurationsAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cLeftCurlyBracketKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cLegacyCatalogConfigurationsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cLegacyCatalogConfigurationsConfiguredCatalogParserRuleCall_5_1_0 = (RuleCall)cLegacyCatalogConfigurationsAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		
		//CheckConfiguration:
		//	'check' 'configuration' name=ValidID parameterConfigurations+=ConfiguredParameter*
		//	languageValidatorConfigurations+=ConfiguredLanguageValidator* ('{' legacyCatalogConfigurations+=ConfiguredCatalog*
		//	'}')?;
		@Override public ParserRule getRule() { return rule; }

		//'check' 'configuration' name=ValidID parameterConfigurations+=ConfiguredParameter*
		//languageValidatorConfigurations+=ConfiguredLanguageValidator* ('{' legacyCatalogConfigurations+=ConfiguredCatalog*
		//'}')?
		public Group getGroup() { return cGroup; }

		//'check'
		public Keyword getCheckKeyword_0() { return cCheckKeyword_0; }

		//'configuration'
		public Keyword getConfigurationKeyword_1() { return cConfigurationKeyword_1; }

		//name=ValidID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_0() { return cNameValidIDParserRuleCall_2_0; }

		//parameterConfigurations+=ConfiguredParameter*
		public Assignment getParameterConfigurationsAssignment_3() { return cParameterConfigurationsAssignment_3; }

		//ConfiguredParameter
		public RuleCall getParameterConfigurationsConfiguredParameterParserRuleCall_3_0() { return cParameterConfigurationsConfiguredParameterParserRuleCall_3_0; }

		//languageValidatorConfigurations+=ConfiguredLanguageValidator*
		public Assignment getLanguageValidatorConfigurationsAssignment_4() { return cLanguageValidatorConfigurationsAssignment_4; }

		//ConfiguredLanguageValidator
		public RuleCall getLanguageValidatorConfigurationsConfiguredLanguageValidatorParserRuleCall_4_0() { return cLanguageValidatorConfigurationsConfiguredLanguageValidatorParserRuleCall_4_0; }

		//('{' legacyCatalogConfigurations+=ConfiguredCatalog* '}')?
		public Group getGroup_5() { return cGroup_5; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_5_0() { return cLeftCurlyBracketKeyword_5_0; }

		//legacyCatalogConfigurations+=ConfiguredCatalog*
		public Assignment getLegacyCatalogConfigurationsAssignment_5_1() { return cLegacyCatalogConfigurationsAssignment_5_1; }

		//ConfiguredCatalog
		public RuleCall getLegacyCatalogConfigurationsConfiguredCatalogParserRuleCall_5_1_0() { return cLegacyCatalogConfigurationsConfiguredCatalogParserRuleCall_5_1_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_5_2() { return cRightCurlyBracketKeyword_5_2; }
	}

	public class ConfiguredLanguageValidatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.avaloq.tools.ddk.checkcfg.CheckCfg.ConfiguredLanguageValidator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLanguageAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLanguageQualifiedNameParserRuleCall_1_0 = (RuleCall)cLanguageAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cParameterConfigurationsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cParameterConfigurationsConfiguredParameterParserRuleCall_3_0 = (RuleCall)cParameterConfigurationsAssignment_3.eContents().get(0);
		private final Assignment cCatalogConfigurationsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cCatalogConfigurationsConfiguredCatalogParserRuleCall_4_0 = (RuleCall)cCatalogConfigurationsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ConfiguredLanguageValidator:
		//	'for' language=QualifiedName '{' parameterConfigurations+=ConfiguredParameter*
		//	catalogConfigurations+=ConfiguredCatalog* '}';
		@Override public ParserRule getRule() { return rule; }

		//'for' language=QualifiedName '{' parameterConfigurations+=ConfiguredParameter* catalogConfigurations+=ConfiguredCatalog*
		//'}'
		public Group getGroup() { return cGroup; }

		//'for'
		public Keyword getForKeyword_0() { return cForKeyword_0; }

		//language=QualifiedName
		public Assignment getLanguageAssignment_1() { return cLanguageAssignment_1; }

		//QualifiedName
		public RuleCall getLanguageQualifiedNameParserRuleCall_1_0() { return cLanguageQualifiedNameParserRuleCall_1_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//parameterConfigurations+=ConfiguredParameter*
		public Assignment getParameterConfigurationsAssignment_3() { return cParameterConfigurationsAssignment_3; }

		//ConfiguredParameter
		public RuleCall getParameterConfigurationsConfiguredParameterParserRuleCall_3_0() { return cParameterConfigurationsConfiguredParameterParserRuleCall_3_0; }

		//catalogConfigurations+=ConfiguredCatalog*
		public Assignment getCatalogConfigurationsAssignment_4() { return cCatalogConfigurationsAssignment_4; }

		//ConfiguredCatalog
		public RuleCall getCatalogConfigurationsConfiguredCatalogParserRuleCall_4_0() { return cCatalogConfigurationsConfiguredCatalogParserRuleCall_4_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class ConfiguredCatalogElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.avaloq.tools.ddk.checkcfg.CheckCfg.ConfiguredCatalog");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConfiguredCatalogAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCatalogKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCatalogAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cCatalogCheckCatalogCrossReference_2_0 = (CrossReference)cCatalogAssignment_2.eContents().get(0);
		private final RuleCall cCatalogCheckCatalogQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cCatalogCheckCatalogCrossReference_2_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cParameterConfigurationsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cParameterConfigurationsConfiguredParameterParserRuleCall_4_0 = (RuleCall)cParameterConfigurationsAssignment_4.eContents().get(0);
		private final Assignment cCheckConfigurationsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cCheckConfigurationsConfiguredCheckParserRuleCall_5_0 = (RuleCall)cCheckConfigurationsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//ConfiguredCatalog:
		//	{ConfiguredCatalog} 'catalog' catalog=[check::CheckCatalog|QualifiedName] '{'
		//	parameterConfigurations+=ConfiguredParameter* checkConfigurations+=ConfiguredCheck* '}';
		@Override public ParserRule getRule() { return rule; }

		//{ConfiguredCatalog} 'catalog' catalog=[check::CheckCatalog|QualifiedName] '{'
		//parameterConfigurations+=ConfiguredParameter* checkConfigurations+=ConfiguredCheck* '}'
		public Group getGroup() { return cGroup; }

		//{ConfiguredCatalog}
		public Action getConfiguredCatalogAction_0() { return cConfiguredCatalogAction_0; }

		//'catalog'
		public Keyword getCatalogKeyword_1() { return cCatalogKeyword_1; }

		//catalog=[check::CheckCatalog|QualifiedName]
		public Assignment getCatalogAssignment_2() { return cCatalogAssignment_2; }

		//[check::CheckCatalog|QualifiedName]
		public CrossReference getCatalogCheckCatalogCrossReference_2_0() { return cCatalogCheckCatalogCrossReference_2_0; }

		//QualifiedName
		public RuleCall getCatalogCheckCatalogQualifiedNameParserRuleCall_2_0_1() { return cCatalogCheckCatalogQualifiedNameParserRuleCall_2_0_1; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//parameterConfigurations+=ConfiguredParameter*
		public Assignment getParameterConfigurationsAssignment_4() { return cParameterConfigurationsAssignment_4; }

		//ConfiguredParameter
		public RuleCall getParameterConfigurationsConfiguredParameterParserRuleCall_4_0() { return cParameterConfigurationsConfiguredParameterParserRuleCall_4_0; }

		//checkConfigurations+=ConfiguredCheck*
		public Assignment getCheckConfigurationsAssignment_5() { return cCheckConfigurationsAssignment_5; }

		//ConfiguredCheck
		public RuleCall getCheckConfigurationsConfiguredCheckParserRuleCall_5_0() { return cCheckConfigurationsConfiguredCheckParserRuleCall_5_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class ConfiguredCheckElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.avaloq.tools.ddk.checkcfg.CheckCfg.ConfiguredCheck");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConfiguredCheckAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cSeverityAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSeveritySeverityKindEnumRuleCall_1_0 = (RuleCall)cSeverityAssignment_1.eContents().get(0);
		private final Assignment cCheckAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cCheckCheckCrossReference_2_0 = (CrossReference)cCheckAssignment_2.eContents().get(0);
		private final RuleCall cCheckCheckQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cCheckCheckCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cParameterConfigurationsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cParameterConfigurationsConfiguredParameterParserRuleCall_3_1_0 = (RuleCall)cParameterConfigurationsAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cParameterConfigurationsAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cParameterConfigurationsConfiguredParameterParserRuleCall_3_2_1_0 = (RuleCall)cParameterConfigurationsAssignment_3_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		
		//ConfiguredCheck:
		//	{ConfiguredCheck} severity=SeverityKind check=[check::Check|QualifiedName] ('('
		//	parameterConfigurations+=ConfiguredParameter (',' parameterConfigurations+=ConfiguredParameter)* ')')?;
		@Override public ParserRule getRule() { return rule; }

		//{ConfiguredCheck} severity=SeverityKind check=[check::Check|QualifiedName] ('('
		//parameterConfigurations+=ConfiguredParameter (',' parameterConfigurations+=ConfiguredParameter)* ')')?
		public Group getGroup() { return cGroup; }

		//{ConfiguredCheck}
		public Action getConfiguredCheckAction_0() { return cConfiguredCheckAction_0; }

		///* TODO configure severity? would require modifying the run-time so that not the severity of the annotation is used */
		//severity=SeverityKind
		public Assignment getSeverityAssignment_1() { return cSeverityAssignment_1; }

		//SeverityKind
		public RuleCall getSeveritySeverityKindEnumRuleCall_1_0() { return cSeveritySeverityKindEnumRuleCall_1_0; }

		//check=[check::Check|QualifiedName]
		public Assignment getCheckAssignment_2() { return cCheckAssignment_2; }

		//[check::Check|QualifiedName]
		public CrossReference getCheckCheckCrossReference_2_0() { return cCheckCheckCrossReference_2_0; }

		//QualifiedName
		public RuleCall getCheckCheckQualifiedNameParserRuleCall_2_0_1() { return cCheckCheckQualifiedNameParserRuleCall_2_0_1; }

		//('(' parameterConfigurations+=ConfiguredParameter (',' parameterConfigurations+=ConfiguredParameter)* ')')?
		public Group getGroup_3() { return cGroup_3; }

		//'('
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }

		//parameterConfigurations+=ConfiguredParameter
		public Assignment getParameterConfigurationsAssignment_3_1() { return cParameterConfigurationsAssignment_3_1; }

		//ConfiguredParameter
		public RuleCall getParameterConfigurationsConfiguredParameterParserRuleCall_3_1_0() { return cParameterConfigurationsConfiguredParameterParserRuleCall_3_1_0; }

		//(',' parameterConfigurations+=ConfiguredParameter)*
		public Group getGroup_3_2() { return cGroup_3_2; }

		//','
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }

		//parameterConfigurations+=ConfiguredParameter
		public Assignment getParameterConfigurationsAssignment_3_2_1() { return cParameterConfigurationsAssignment_3_2_1; }

		//ConfiguredParameter
		public RuleCall getParameterConfigurationsConfiguredParameterParserRuleCall_3_2_1_0() { return cParameterConfigurationsConfiguredParameterParserRuleCall_3_2_1_0; }

		//')'
		public Keyword getRightParenthesisKeyword_3_3() { return cRightParenthesisKeyword_3_3; }
	}

	public class ConfiguredParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.avaloq.tools.ddk.checkcfg.CheckCfg.ConfiguredParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConfiguredParameterAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cParameterAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cParameterFormalParameterCrossReference_1_0 = (CrossReference)cParameterAssignment_1.eContents().get(0);
		private final RuleCall cParameterFormalParameterValidIDParserRuleCall_1_0_1 = (RuleCall)cParameterFormalParameterCrossReference_1_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNewValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNewValueXFormalParameterDefaultValueLiteralParserRuleCall_3_0 = (RuleCall)cNewValueAssignment_3.eContents().get(0);
		
		//ConfiguredParameter:
		//	{ConfiguredParameter} parameter=[check::FormalParameter|ValidID] '=' newValue=XFormalParameterDefaultValueLiteral;
		@Override public ParserRule getRule() { return rule; }

		//{ConfiguredParameter} parameter=[check::FormalParameter|ValidID] '=' newValue=XFormalParameterDefaultValueLiteral
		public Group getGroup() { return cGroup; }

		//{ConfiguredParameter}
		public Action getConfiguredParameterAction_0() { return cConfiguredParameterAction_0; }

		//parameter=[check::FormalParameter|ValidID]
		public Assignment getParameterAssignment_1() { return cParameterAssignment_1; }

		//[check::FormalParameter|ValidID]
		public CrossReference getParameterFormalParameterCrossReference_1_0() { return cParameterFormalParameterCrossReference_1_0; }

		//ValidID
		public RuleCall getParameterFormalParameterValidIDParserRuleCall_1_0_1() { return cParameterFormalParameterValidIDParserRuleCall_1_0_1; }

		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//newValue=XFormalParameterDefaultValueLiteral
		public Assignment getNewValueAssignment_3() { return cNewValueAssignment_3; }

		//XFormalParameterDefaultValueLiteral
		public RuleCall getNewValueXFormalParameterDefaultValueLiteralParserRuleCall_3_0() { return cNewValueXFormalParameterDefaultValueLiteralParserRuleCall_3_0; }
	}

	public class XSimpleFormalParameterDefaultValueLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.avaloq.tools.ddk.checkcfg.CheckCfg.XSimpleFormalParameterDefaultValueLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cXBooleanLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cXNumberLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cXStringLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//// defines restriction of supported parameter types. Copied from check
		// XSimpleFormalParameterDefaultValueLiteral
		//xbase::XExpression:
		//	XBooleanLiteral | XNumberLiteral | XStringLiteral;
		@Override public ParserRule getRule() { return rule; }

		//XBooleanLiteral | XNumberLiteral | XStringLiteral
		public Alternatives getAlternatives() { return cAlternatives; }

		//XBooleanLiteral
		public RuleCall getXBooleanLiteralParserRuleCall_0() { return cXBooleanLiteralParserRuleCall_0; }

		//XNumberLiteral
		public RuleCall getXNumberLiteralParserRuleCall_1() { return cXNumberLiteralParserRuleCall_1; }

		//XStringLiteral
		public RuleCall getXStringLiteralParserRuleCall_2() { return cXStringLiteralParserRuleCall_2; }
	}

	public class XConstantUnaryOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.avaloq.tools.ddk.checkcfg.CheckCfg.XConstantUnaryOperation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cXUnaryOperationAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cFeatureAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final CrossReference cFeatureJvmIdentifiableElementCrossReference_0_1_0 = (CrossReference)cFeatureAssignment_0_1.eContents().get(0);
		private final RuleCall cFeatureJvmIdentifiableElementOpUnaryParserRuleCall_0_1_0_1 = (RuleCall)cFeatureJvmIdentifiableElementCrossReference_0_1_0.eContents().get(1);
		private final Assignment cOperandAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cOperandXConstantUnaryOperationParserRuleCall_0_2_0 = (RuleCall)cOperandAssignment_0_2.eContents().get(0);
		private final RuleCall cXSimpleFormalParameterDefaultValueLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//XConstantUnaryOperation xbase::XExpression:
		//	{xbase::XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XConstantUnaryOperation |
		//	XSimpleFormalParameterDefaultValueLiteral;
		@Override public ParserRule getRule() { return rule; }

		//{xbase::XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XConstantUnaryOperation |
		//XSimpleFormalParameterDefaultValueLiteral
		public Alternatives getAlternatives() { return cAlternatives; }

		//{xbase::XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XConstantUnaryOperation
		public Group getGroup_0() { return cGroup_0; }

		//{xbase::XUnaryOperation}
		public Action getXUnaryOperationAction_0_0() { return cXUnaryOperationAction_0_0; }

		//feature=[types::JvmIdentifiableElement|OpUnary]
		public Assignment getFeatureAssignment_0_1() { return cFeatureAssignment_0_1; }

		//[types::JvmIdentifiableElement|OpUnary]
		public CrossReference getFeatureJvmIdentifiableElementCrossReference_0_1_0() { return cFeatureJvmIdentifiableElementCrossReference_0_1_0; }

		//OpUnary
		public RuleCall getFeatureJvmIdentifiableElementOpUnaryParserRuleCall_0_1_0_1() { return cFeatureJvmIdentifiableElementOpUnaryParserRuleCall_0_1_0_1; }

		//operand=XConstantUnaryOperation
		public Assignment getOperandAssignment_0_2() { return cOperandAssignment_0_2; }

		//XConstantUnaryOperation
		public RuleCall getOperandXConstantUnaryOperationParserRuleCall_0_2_0() { return cOperandXConstantUnaryOperationParserRuleCall_0_2_0; }

		//XSimpleFormalParameterDefaultValueLiteral
		public RuleCall getXSimpleFormalParameterDefaultValueLiteralParserRuleCall_1() { return cXSimpleFormalParameterDefaultValueLiteralParserRuleCall_1; }
	}

	public class XFormalParameterDefaultValueLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.avaloq.tools.ddk.checkcfg.CheckCfg.XFormalParameterDefaultValueLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cXConstantUnaryOperationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cXConstantListLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//XFormalParameterDefaultValueLiteral xbase::XExpression:
		//	XConstantUnaryOperation | XConstantListLiteral // todo add support for enumerations
		//;
		@Override public ParserRule getRule() { return rule; }

		//XConstantUnaryOperation | XConstantListLiteral
		public Alternatives getAlternatives() { return cAlternatives; }

		//XConstantUnaryOperation
		public RuleCall getXConstantUnaryOperationParserRuleCall_0() { return cXConstantUnaryOperationParserRuleCall_0; }

		//XConstantListLiteral
		public RuleCall getXConstantListLiteralParserRuleCall_1() { return cXConstantListLiteralParserRuleCall_1; }
	}

	public class XConstantListLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.avaloq.tools.ddk.checkcfg.CheckCfg.XConstantListLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXListLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNumberSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cElementsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cElementsXConstantUnaryOperationParserRuleCall_3_0_0 = (RuleCall)cElementsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cElementsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cElementsXConstantUnaryOperationParserRuleCall_3_1_1_0 = (RuleCall)cElementsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//XConstantListLiteral xbase::XListLiteral:
		//	{xbase::XListLiteral} '#' '[' (elements+=XConstantUnaryOperation (',' elements+=XConstantUnaryOperation)*)? ']';
		@Override public ParserRule getRule() { return rule; }

		//{xbase::XListLiteral} '#' '[' (elements+=XConstantUnaryOperation (',' elements+=XConstantUnaryOperation)*)? ']'
		public Group getGroup() { return cGroup; }

		//{xbase::XListLiteral}
		public Action getXListLiteralAction_0() { return cXListLiteralAction_0; }

		//'#'
		public Keyword getNumberSignKeyword_1() { return cNumberSignKeyword_1; }

		//'['
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }

		//(elements+=XConstantUnaryOperation (',' elements+=XConstantUnaryOperation)*)?
		public Group getGroup_3() { return cGroup_3; }

		//elements+=XConstantUnaryOperation
		public Assignment getElementsAssignment_3_0() { return cElementsAssignment_3_0; }

		//XConstantUnaryOperation
		public RuleCall getElementsXConstantUnaryOperationParserRuleCall_3_0_0() { return cElementsXConstantUnaryOperationParserRuleCall_3_0_0; }

		//(',' elements+=XConstantUnaryOperation)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//','
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//elements+=XConstantUnaryOperation
		public Assignment getElementsAssignment_3_1_1() { return cElementsAssignment_3_1_1; }

		//XConstantUnaryOperation
		public RuleCall getElementsXConstantUnaryOperationParserRuleCall_3_1_1_0() { return cElementsXConstantUnaryOperationParserRuleCall_3_1_1_0; }

		//']'
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}
	
	
	public class SeverityKindElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "com.avaloq.tools.ddk.checkcfg.CheckCfg.SeverityKind");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cDefaultEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cDefaultDefaultKeyword_0_0 = (Keyword)cDefaultEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cErrorEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cErrorErrorKeyword_1_0 = (Keyword)cErrorEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cWarningEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cWarningWarningKeyword_2_0 = (Keyword)cWarningEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cInfoEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cInfoInfoKeyword_3_0 = (Keyword)cInfoEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cIgnoreEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cIgnoreIgnoreKeyword_4_0 = (Keyword)cIgnoreEnumLiteralDeclaration_4.eContents().get(0);
		
		//enum SeverityKind:
		//	default | error | warning | info | ignore;
		public EnumRule getRule() { return rule; }

		//default | error | warning | info | ignore
		public Alternatives getAlternatives() { return cAlternatives; }

		//default
		public EnumLiteralDeclaration getDefaultEnumLiteralDeclaration_0() { return cDefaultEnumLiteralDeclaration_0; }

		//'default'
		public Keyword getDefaultDefaultKeyword_0_0() { return cDefaultDefaultKeyword_0_0; }

		//error
		public EnumLiteralDeclaration getErrorEnumLiteralDeclaration_1() { return cErrorEnumLiteralDeclaration_1; }

		//'error'
		public Keyword getErrorErrorKeyword_1_0() { return cErrorErrorKeyword_1_0; }

		//warning
		public EnumLiteralDeclaration getWarningEnumLiteralDeclaration_2() { return cWarningEnumLiteralDeclaration_2; }

		//'warning'
		public Keyword getWarningWarningKeyword_2_0() { return cWarningWarningKeyword_2_0; }

		//info
		public EnumLiteralDeclaration getInfoEnumLiteralDeclaration_3() { return cInfoEnumLiteralDeclaration_3; }

		//'info'
		public Keyword getInfoInfoKeyword_3_0() { return cInfoInfoKeyword_3_0; }

		//ignore
		public EnumLiteralDeclaration getIgnoreEnumLiteralDeclaration_4() { return cIgnoreEnumLiteralDeclaration_4; }

		//'ignore'
		public Keyword getIgnoreIgnoreKeyword_4_0() { return cIgnoreIgnoreKeyword_4_0; }
	}
	
	private final CheckConfigurationElements pCheckConfiguration;
	private final ConfiguredLanguageValidatorElements pConfiguredLanguageValidator;
	private final ConfiguredCatalogElements pConfiguredCatalog;
	private final ConfiguredCheckElements pConfiguredCheck;
	private final ConfiguredParameterElements pConfiguredParameter;
	private final XSimpleFormalParameterDefaultValueLiteralElements pXSimpleFormalParameterDefaultValueLiteral;
	private final XConstantUnaryOperationElements pXConstantUnaryOperation;
	private final XFormalParameterDefaultValueLiteralElements pXFormalParameterDefaultValueLiteral;
	private final XConstantListLiteralElements pXConstantListLiteral;
	private final SeverityKindElements eSeverityKind;
	
	private final Grammar grammar;

	private final XbaseGrammarAccess gaXbase;

	private final XtypeGrammarAccess gaXtype;

	@Inject
	public CheckCfgGrammarAccess(GrammarProvider grammarProvider,
		XbaseGrammarAccess gaXbase,
		XtypeGrammarAccess gaXtype) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaXbase = gaXbase;
		this.gaXtype = gaXtype;
		this.pCheckConfiguration = new CheckConfigurationElements();
		this.pConfiguredLanguageValidator = new ConfiguredLanguageValidatorElements();
		this.pConfiguredCatalog = new ConfiguredCatalogElements();
		this.pConfiguredCheck = new ConfiguredCheckElements();
		this.pConfiguredParameter = new ConfiguredParameterElements();
		this.pXSimpleFormalParameterDefaultValueLiteral = new XSimpleFormalParameterDefaultValueLiteralElements();
		this.pXConstantUnaryOperation = new XConstantUnaryOperationElements();
		this.pXFormalParameterDefaultValueLiteral = new XFormalParameterDefaultValueLiteralElements();
		this.pXConstantListLiteral = new XConstantListLiteralElements();
		this.eSeverityKind = new SeverityKindElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.avaloq.tools.ddk.checkcfg.CheckCfg".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public XbaseGrammarAccess getXbaseGrammarAccess() {
		return gaXbase;
	}

	public XtypeGrammarAccess getXtypeGrammarAccess() {
		return gaXtype;
	}

	
	//CheckConfiguration:
	//	'check' 'configuration' name=ValidID parameterConfigurations+=ConfiguredParameter*
	//	languageValidatorConfigurations+=ConfiguredLanguageValidator* ('{' legacyCatalogConfigurations+=ConfiguredCatalog*
	//	'}')?;
	public CheckConfigurationElements getCheckConfigurationAccess() {
		return pCheckConfiguration;
	}
	
	public ParserRule getCheckConfigurationRule() {
		return getCheckConfigurationAccess().getRule();
	}

	//ConfiguredLanguageValidator:
	//	'for' language=QualifiedName '{' parameterConfigurations+=ConfiguredParameter*
	//	catalogConfigurations+=ConfiguredCatalog* '}';
	public ConfiguredLanguageValidatorElements getConfiguredLanguageValidatorAccess() {
		return pConfiguredLanguageValidator;
	}
	
	public ParserRule getConfiguredLanguageValidatorRule() {
		return getConfiguredLanguageValidatorAccess().getRule();
	}

	//ConfiguredCatalog:
	//	{ConfiguredCatalog} 'catalog' catalog=[check::CheckCatalog|QualifiedName] '{'
	//	parameterConfigurations+=ConfiguredParameter* checkConfigurations+=ConfiguredCheck* '}';
	public ConfiguredCatalogElements getConfiguredCatalogAccess() {
		return pConfiguredCatalog;
	}
	
	public ParserRule getConfiguredCatalogRule() {
		return getConfiguredCatalogAccess().getRule();
	}

	//ConfiguredCheck:
	//	{ConfiguredCheck} severity=SeverityKind check=[check::Check|QualifiedName] ('('
	//	parameterConfigurations+=ConfiguredParameter (',' parameterConfigurations+=ConfiguredParameter)* ')')?;
	public ConfiguredCheckElements getConfiguredCheckAccess() {
		return pConfiguredCheck;
	}
	
	public ParserRule getConfiguredCheckRule() {
		return getConfiguredCheckAccess().getRule();
	}

	//ConfiguredParameter:
	//	{ConfiguredParameter} parameter=[check::FormalParameter|ValidID] '=' newValue=XFormalParameterDefaultValueLiteral;
	public ConfiguredParameterElements getConfiguredParameterAccess() {
		return pConfiguredParameter;
	}
	
	public ParserRule getConfiguredParameterRule() {
		return getConfiguredParameterAccess().getRule();
	}

	//// defines restriction of supported parameter types. Copied from check
	// XSimpleFormalParameterDefaultValueLiteral
	//xbase::XExpression:
	//	XBooleanLiteral | XNumberLiteral | XStringLiteral;
	public XSimpleFormalParameterDefaultValueLiteralElements getXSimpleFormalParameterDefaultValueLiteralAccess() {
		return pXSimpleFormalParameterDefaultValueLiteral;
	}
	
	public ParserRule getXSimpleFormalParameterDefaultValueLiteralRule() {
		return getXSimpleFormalParameterDefaultValueLiteralAccess().getRule();
	}

	//XConstantUnaryOperation xbase::XExpression:
	//	{xbase::XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XConstantUnaryOperation |
	//	XSimpleFormalParameterDefaultValueLiteral;
	public XConstantUnaryOperationElements getXConstantUnaryOperationAccess() {
		return pXConstantUnaryOperation;
	}
	
	public ParserRule getXConstantUnaryOperationRule() {
		return getXConstantUnaryOperationAccess().getRule();
	}

	//XFormalParameterDefaultValueLiteral xbase::XExpression:
	//	XConstantUnaryOperation | XConstantListLiteral // todo add support for enumerations
	//;
	public XFormalParameterDefaultValueLiteralElements getXFormalParameterDefaultValueLiteralAccess() {
		return pXFormalParameterDefaultValueLiteral;
	}
	
	public ParserRule getXFormalParameterDefaultValueLiteralRule() {
		return getXFormalParameterDefaultValueLiteralAccess().getRule();
	}

	//XConstantListLiteral xbase::XListLiteral:
	//	{xbase::XListLiteral} '#' '[' (elements+=XConstantUnaryOperation (',' elements+=XConstantUnaryOperation)*)? ']';
	public XConstantListLiteralElements getXConstantListLiteralAccess() {
		return pXConstantListLiteral;
	}
	
	public ParserRule getXConstantListLiteralRule() {
		return getXConstantListLiteralAccess().getRule();
	}

	//enum SeverityKind:
	//	default | error | warning | info | ignore;
	public SeverityKindElements getSeverityKindAccess() {
		return eSeverityKind;
	}
	
	public EnumRule getSeverityKindRule() {
		return getSeverityKindAccess().getRule();
	}

	//XExpression:
	//	XAssignment;
	public XbaseGrammarAccess.XExpressionElements getXExpressionAccess() {
		return gaXbase.getXExpressionAccess();
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}

	//XAssignment XExpression:
	//	{XAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign value=XAssignment | XOrExpression
	//	(=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMultiAssign])
	//	rightOperand=XAssignment)?;
	public XbaseGrammarAccess.XAssignmentElements getXAssignmentAccess() {
		return gaXbase.getXAssignmentAccess();
	}
	
	public ParserRule getXAssignmentRule() {
		return getXAssignmentAccess().getRule();
	}

	//OpSingleAssign:
	//	'=';
	public XbaseGrammarAccess.OpSingleAssignElements getOpSingleAssignAccess() {
		return gaXbase.getOpSingleAssignAccess();
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}

	//OpMultiAssign:
	//	'+=' | '-=' | '*=' | '/=' | '%=' | '<' '<' '=' | '>' '>'? '>=';
	public XbaseGrammarAccess.OpMultiAssignElements getOpMultiAssignAccess() {
		return gaXbase.getOpMultiAssignAccess();
	}
	
	public ParserRule getOpMultiAssignRule() {
		return getOpMultiAssignAccess().getRule();
	}

	//XOrExpression XExpression:
	//	XAndExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr])
	//	rightOperand=XAndExpression)*;
	public XbaseGrammarAccess.XOrExpressionElements getXOrExpressionAccess() {
		return gaXbase.getXOrExpressionAccess();
	}
	
	public ParserRule getXOrExpressionRule() {
		return getXOrExpressionAccess().getRule();
	}

	//OpOr:
	//	'||';
	public XbaseGrammarAccess.OpOrElements getOpOrAccess() {
		return gaXbase.getOpOrAccess();
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}

	//XAndExpression XExpression:
	//	XEqualityExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd])
	//	rightOperand=XEqualityExpression)*;
	public XbaseGrammarAccess.XAndExpressionElements getXAndExpressionAccess() {
		return gaXbase.getXAndExpressionAccess();
	}
	
	public ParserRule getXAndExpressionRule() {
		return getXAndExpressionAccess().getRule();
	}

	//OpAnd:
	//	'&&';
	public XbaseGrammarAccess.OpAndElements getOpAndAccess() {
		return gaXbase.getOpAndAccess();
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}

	//XEqualityExpression XExpression:
	//	XRelationalExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
	//	rightOperand=XRelationalExpression)*;
	public XbaseGrammarAccess.XEqualityExpressionElements getXEqualityExpressionAccess() {
		return gaXbase.getXEqualityExpressionAccess();
	}
	
	public ParserRule getXEqualityExpressionRule() {
		return getXEqualityExpressionAccess().getRule();
	}

	//OpEquality:
	//	'==' | '!=' | '===' | '!==';
	public XbaseGrammarAccess.OpEqualityElements getOpEqualityAccess() {
		return gaXbase.getOpEqualityAccess();
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}

	//XRelationalExpression XExpression:
	//	XOtherOperatorExpression (=> ({XInstanceOfExpression.expression=current} 'instanceof') type=JvmTypeReference | =>
	//	({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare])
	//	rightOperand=XOtherOperatorExpression)*;
	public XbaseGrammarAccess.XRelationalExpressionElements getXRelationalExpressionAccess() {
		return gaXbase.getXRelationalExpressionAccess();
	}
	
	public ParserRule getXRelationalExpressionRule() {
		return getXRelationalExpressionAccess().getRule();
	}

	//OpCompare:
	//	'>=' | '<' '=' | '>' | '<';
	public XbaseGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaXbase.getOpCompareAccess();
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}

	//XOtherOperatorExpression XExpression:
	//	XAdditiveExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOther])
	//	rightOperand=XAdditiveExpression)*;
	public XbaseGrammarAccess.XOtherOperatorExpressionElements getXOtherOperatorExpressionAccess() {
		return gaXbase.getXOtherOperatorExpressionAccess();
	}
	
	public ParserRule getXOtherOperatorExpressionRule() {
		return getXOtherOperatorExpressionAccess().getRule();
	}

	//OpOther:
	//	'->' | '..<' | '>' '..' | '..' | '=>' | '>' (=> ('>' '>') | '>') | '<' (=> ('<' '<') | '<' | '=>') | '<>' | '?:';
	public XbaseGrammarAccess.OpOtherElements getOpOtherAccess() {
		return gaXbase.getOpOtherAccess();
	}
	
	public ParserRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}

	//XAdditiveExpression XExpression:
	//	XMultiplicativeExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd])
	//	rightOperand=XMultiplicativeExpression)*;
	public XbaseGrammarAccess.XAdditiveExpressionElements getXAdditiveExpressionAccess() {
		return gaXbase.getXAdditiveExpressionAccess();
	}
	
	public ParserRule getXAdditiveExpressionRule() {
		return getXAdditiveExpressionAccess().getRule();
	}

	//OpAdd:
	//	'+' | '-';
	public XbaseGrammarAccess.OpAddElements getOpAddAccess() {
		return gaXbase.getOpAddAccess();
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}

	//XMultiplicativeExpression XExpression:
	//	XUnaryOperation (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti])
	//	rightOperand=XUnaryOperation)*;
	public XbaseGrammarAccess.XMultiplicativeExpressionElements getXMultiplicativeExpressionAccess() {
		return gaXbase.getXMultiplicativeExpressionAccess();
	}
	
	public ParserRule getXMultiplicativeExpressionRule() {
		return getXMultiplicativeExpressionAccess().getRule();
	}

	//OpMulti:
	//	'*' | '**' | '/' | '%';
	public XbaseGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaXbase.getOpMultiAccess();
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}

	//XUnaryOperation XExpression:
	//	{XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XUnaryOperation | XCastedExpression;
	public XbaseGrammarAccess.XUnaryOperationElements getXUnaryOperationAccess() {
		return gaXbase.getXUnaryOperationAccess();
	}
	
	public ParserRule getXUnaryOperationRule() {
		return getXUnaryOperationAccess().getRule();
	}

	//OpUnary:
	//	"!" | "-" | "+";
	public XbaseGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaXbase.getOpUnaryAccess();
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}

	//XCastedExpression XExpression:
	//	XPostfixOperation (=> ({XCastedExpression.target=current} 'as') type=JvmTypeReference)*;
	public XbaseGrammarAccess.XCastedExpressionElements getXCastedExpressionAccess() {
		return gaXbase.getXCastedExpressionAccess();
	}
	
	public ParserRule getXCastedExpressionRule() {
		return getXCastedExpressionAccess().getRule();
	}

	//XPostfixOperation XExpression:
	//	XMemberFeatureCall => ({XPostfixOperation.operand=current} feature=[types::JvmIdentifiableElement|OpPostfix])?;
	public XbaseGrammarAccess.XPostfixOperationElements getXPostfixOperationAccess() {
		return gaXbase.getXPostfixOperationAccess();
	}
	
	public ParserRule getXPostfixOperationRule() {
		return getXPostfixOperationAccess().getRule();
	}

	//OpPostfix:
	//	"++" | "--";
	public XbaseGrammarAccess.OpPostfixElements getOpPostfixAccess() {
		return gaXbase.getOpPostfixAccess();
	}
	
	public ParserRule getOpPostfixRule() {
		return getOpPostfixAccess().getRule();
	}

	//XMemberFeatureCall XExpression:
	//	XPrimaryExpression (=> ({XAssignment.assignable=current} ('.' | explicitStatic?="::")
	//	feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment | =>
	//	({XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." | explicitStatic?="::")) ('<'
	//	typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?='(' (memberCallArguments+=XShortClosure
	//	| memberCallArguments+=XExpression (',' memberCallArguments+=XExpression)*)? ')')? memberCallArguments+=XClosure?)*;
	public XbaseGrammarAccess.XMemberFeatureCallElements getXMemberFeatureCallAccess() {
		return gaXbase.getXMemberFeatureCallAccess();
	}
	
	public ParserRule getXMemberFeatureCallRule() {
		return getXMemberFeatureCallAccess().getRule();
	}

	//XPrimaryExpression XExpression:
	//	XConstructorCall | XBlockExpression | XSwitchExpression | XSynchronizedExpression | XFeatureCall | XLiteral |
	//	XIfExpression | XForLoopExpression | XBasicForLoopExpression | XWhileExpression | XDoWhileExpression |
	//	XThrowExpression | XReturnExpression | XTryCatchFinallyExpression | XParenthesizedExpression;
	public XbaseGrammarAccess.XPrimaryExpressionElements getXPrimaryExpressionAccess() {
		return gaXbase.getXPrimaryExpressionAccess();
	}
	
	public ParserRule getXPrimaryExpressionRule() {
		return getXPrimaryExpressionAccess().getRule();
	}

	//XLiteral XExpression:
	//	XCollectionLiteral | XClosure | XBooleanLiteral | XNumberLiteral | XNullLiteral | XStringLiteral | XTypeLiteral;
	public XbaseGrammarAccess.XLiteralElements getXLiteralAccess() {
		return gaXbase.getXLiteralAccess();
	}
	
	public ParserRule getXLiteralRule() {
		return getXLiteralAccess().getRule();
	}

	//XCollectionLiteral:
	//	XSetLiteral | XListLiteral;
	public XbaseGrammarAccess.XCollectionLiteralElements getXCollectionLiteralAccess() {
		return gaXbase.getXCollectionLiteralAccess();
	}
	
	public ParserRule getXCollectionLiteralRule() {
		return getXCollectionLiteralAccess().getRule();
	}

	//XSetLiteral:
	//	{XSetLiteral} '#' '{' (elements+=XExpression (',' elements+=XExpression)*)? '}';
	public XbaseGrammarAccess.XSetLiteralElements getXSetLiteralAccess() {
		return gaXbase.getXSetLiteralAccess();
	}
	
	public ParserRule getXSetLiteralRule() {
		return getXSetLiteralAccess().getRule();
	}

	//XListLiteral:
	//	{XListLiteral} '#' '[' (elements+=XExpression (',' elements+=XExpression)*)? ']';
	public XbaseGrammarAccess.XListLiteralElements getXListLiteralAccess() {
		return gaXbase.getXListLiteralAccess();
	}
	
	public ParserRule getXListLiteralRule() {
		return getXListLiteralAccess().getRule();
	}

	//XClosure XExpression:
	//	=> ({XClosure} '[') => ((declaredFormalParameters+=JvmFormalParameter (','
	//	declaredFormalParameters+=JvmFormalParameter)*)? explicitSyntax?='|')? expression=XExpressionInClosure ']';
	public XbaseGrammarAccess.XClosureElements getXClosureAccess() {
		return gaXbase.getXClosureAccess();
	}
	
	public ParserRule getXClosureRule() {
		return getXClosureAccess().getRule();
	}

	//XExpressionInClosure XExpression:
	//	{XBlockExpression} (expressions+=XExpressionOrVarDeclaration ';'?)*;
	public XbaseGrammarAccess.XExpressionInClosureElements getXExpressionInClosureAccess() {
		return gaXbase.getXExpressionInClosureAccess();
	}
	
	public ParserRule getXExpressionInClosureRule() {
		return getXExpressionInClosureAccess().getRule();
	}

	//XShortClosure XExpression:
	//	=> ({XClosure} (declaredFormalParameters+=JvmFormalParameter (',' declaredFormalParameters+=JvmFormalParameter)*)?
	//	explicitSyntax?='|') expression=XExpression;
	public XbaseGrammarAccess.XShortClosureElements getXShortClosureAccess() {
		return gaXbase.getXShortClosureAccess();
	}
	
	public ParserRule getXShortClosureRule() {
		return getXShortClosureAccess().getRule();
	}

	//XParenthesizedExpression XExpression:
	//	'(' XExpression ')';
	public XbaseGrammarAccess.XParenthesizedExpressionElements getXParenthesizedExpressionAccess() {
		return gaXbase.getXParenthesizedExpressionAccess();
	}
	
	public ParserRule getXParenthesizedExpressionRule() {
		return getXParenthesizedExpressionAccess().getRule();
	}

	//XIfExpression XExpression:
	//	{XIfExpression} 'if' '(' if=XExpression ')' then=XExpression (=> 'else' else=XExpression)?;
	public XbaseGrammarAccess.XIfExpressionElements getXIfExpressionAccess() {
		return gaXbase.getXIfExpressionAccess();
	}
	
	public ParserRule getXIfExpressionRule() {
		return getXIfExpressionAccess().getRule();
	}

	//XSwitchExpression XExpression:
	//	{XSwitchExpression} 'switch' (=> ('(' declaredParam=JvmFormalParameter ':') switch=XExpression ')' | =>
	//	(declaredParam=JvmFormalParameter ':')? switch=XExpression) '{' cases+=XCasePart* ('default' ':'
	//	default=XExpression)? '}';
	public XbaseGrammarAccess.XSwitchExpressionElements getXSwitchExpressionAccess() {
		return gaXbase.getXSwitchExpressionAccess();
	}
	
	public ParserRule getXSwitchExpressionRule() {
		return getXSwitchExpressionAccess().getRule();
	}

	//XCasePart:
	//	{XCasePart} typeGuard=JvmTypeReference? ('case' case=XExpression)? (':' then=XExpression | fallThrough?=',');
	public XbaseGrammarAccess.XCasePartElements getXCasePartAccess() {
		return gaXbase.getXCasePartAccess();
	}
	
	public ParserRule getXCasePartRule() {
		return getXCasePartAccess().getRule();
	}

	//XForLoopExpression XExpression:
	//	=> ({XForLoopExpression} 'for' '(' declaredParam=JvmFormalParameter ':') forExpression=XExpression ')'
	//	eachExpression=XExpression;
	public XbaseGrammarAccess.XForLoopExpressionElements getXForLoopExpressionAccess() {
		return gaXbase.getXForLoopExpressionAccess();
	}
	
	public ParserRule getXForLoopExpressionRule() {
		return getXForLoopExpressionAccess().getRule();
	}

	//XBasicForLoopExpression XExpression:
	//	{XBasicForLoopExpression} 'for' '(' (initExpressions+=XExpressionOrVarDeclaration (','
	//	initExpressions+=XExpressionOrVarDeclaration)*)? ';' expression=XExpression? ';' (updateExpressions+=XExpression (','
	//	updateExpressions+=XExpression)*)? ')' eachExpression=XExpression;
	public XbaseGrammarAccess.XBasicForLoopExpressionElements getXBasicForLoopExpressionAccess() {
		return gaXbase.getXBasicForLoopExpressionAccess();
	}
	
	public ParserRule getXBasicForLoopExpressionRule() {
		return getXBasicForLoopExpressionAccess().getRule();
	}

	//XWhileExpression XExpression:
	//	{XWhileExpression} 'while' '(' predicate=XExpression ')' body=XExpression;
	public XbaseGrammarAccess.XWhileExpressionElements getXWhileExpressionAccess() {
		return gaXbase.getXWhileExpressionAccess();
	}
	
	public ParserRule getXWhileExpressionRule() {
		return getXWhileExpressionAccess().getRule();
	}

	//XDoWhileExpression XExpression:
	//	{XDoWhileExpression} 'do' body=XExpression 'while' '(' predicate=XExpression ')';
	public XbaseGrammarAccess.XDoWhileExpressionElements getXDoWhileExpressionAccess() {
		return gaXbase.getXDoWhileExpressionAccess();
	}
	
	public ParserRule getXDoWhileExpressionRule() {
		return getXDoWhileExpressionAccess().getRule();
	}

	//XBlockExpression XExpression:
	//	{XBlockExpression} '{' (expressions+=XExpressionOrVarDeclaration ';'?)* '}';
	public XbaseGrammarAccess.XBlockExpressionElements getXBlockExpressionAccess() {
		return gaXbase.getXBlockExpressionAccess();
	}
	
	public ParserRule getXBlockExpressionRule() {
		return getXBlockExpressionAccess().getRule();
	}

	//XExpressionOrVarDeclaration XExpression:
	//	XVariableDeclaration | XExpression;
	public XbaseGrammarAccess.XExpressionOrVarDeclarationElements getXExpressionOrVarDeclarationAccess() {
		return gaXbase.getXExpressionOrVarDeclarationAccess();
	}
	
	public ParserRule getXExpressionOrVarDeclarationRule() {
		return getXExpressionOrVarDeclarationAccess().getRule();
	}

	//XVariableDeclaration XExpression:
	//	{XVariableDeclaration} (writeable?='var' | 'val') (=> (type=JvmTypeReference name=ValidID) | name=ValidID) ('='
	//	right=XExpression)?;
	public XbaseGrammarAccess.XVariableDeclarationElements getXVariableDeclarationAccess() {
		return gaXbase.getXVariableDeclarationAccess();
	}
	
	public ParserRule getXVariableDeclarationRule() {
		return getXVariableDeclarationAccess().getRule();
	}

	//JvmFormalParameter types::JvmFormalParameter:
	//	parameterType=JvmTypeReference? name=ValidID;
	public XbaseGrammarAccess.JvmFormalParameterElements getJvmFormalParameterAccess() {
		return gaXbase.getJvmFormalParameterAccess();
	}
	
	public ParserRule getJvmFormalParameterRule() {
		return getJvmFormalParameterAccess().getRule();
	}

	//FullJvmFormalParameter types::JvmFormalParameter:
	//	parameterType=JvmTypeReference name=ValidID;
	public XbaseGrammarAccess.FullJvmFormalParameterElements getFullJvmFormalParameterAccess() {
		return gaXbase.getFullJvmFormalParameterAccess();
	}
	
	public ParserRule getFullJvmFormalParameterRule() {
		return getFullJvmFormalParameterAccess().getRule();
	}

	//XFeatureCall XExpression:
	//	{XFeatureCall} ('<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?='(' (featureCallArguments+=XShortClosure
	//	| featureCallArguments+=XExpression (',' featureCallArguments+=XExpression)*)? ')')? featureCallArguments+=XClosure?;
	public XbaseGrammarAccess.XFeatureCallElements getXFeatureCallAccess() {
		return gaXbase.getXFeatureCallAccess();
	}
	
	public ParserRule getXFeatureCallRule() {
		return getXFeatureCallAccess().getRule();
	}

	//FeatureCallID:
	//	ValidID | 'extends' | 'static' | 'import' | 'extension';
	public XbaseGrammarAccess.FeatureCallIDElements getFeatureCallIDAccess() {
		return gaXbase.getFeatureCallIDAccess();
	}
	
	public ParserRule getFeatureCallIDRule() {
		return getFeatureCallIDAccess().getRule();
	}

	//IdOrSuper:
	//	FeatureCallID | 'super';
	public XbaseGrammarAccess.IdOrSuperElements getIdOrSuperAccess() {
		return gaXbase.getIdOrSuperAccess();
	}
	
	public ParserRule getIdOrSuperRule() {
		return getIdOrSuperAccess().getRule();
	}

	//XConstructorCall XExpression:
	//	{XConstructorCall} 'new' constructor=[types::JvmConstructor|QualifiedName] (=> '<'
	//	typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')? (=>
	//	explicitConstructorCall?='(' (arguments+=XShortClosure | arguments+=XExpression (',' arguments+=XExpression)*)? ')')?
	//	arguments+=XClosure?;
	public XbaseGrammarAccess.XConstructorCallElements getXConstructorCallAccess() {
		return gaXbase.getXConstructorCallAccess();
	}
	
	public ParserRule getXConstructorCallRule() {
		return getXConstructorCallAccess().getRule();
	}

	//XBooleanLiteral XExpression:
	//	{XBooleanLiteral} ('false' | isTrue?='true');
	public XbaseGrammarAccess.XBooleanLiteralElements getXBooleanLiteralAccess() {
		return gaXbase.getXBooleanLiteralAccess();
	}
	
	public ParserRule getXBooleanLiteralRule() {
		return getXBooleanLiteralAccess().getRule();
	}

	//XNullLiteral XExpression:
	//	{XNullLiteral} 'null';
	public XbaseGrammarAccess.XNullLiteralElements getXNullLiteralAccess() {
		return gaXbase.getXNullLiteralAccess();
	}
	
	public ParserRule getXNullLiteralRule() {
		return getXNullLiteralAccess().getRule();
	}

	//XNumberLiteral XExpression:
	//	{XNumberLiteral} value=Number;
	public XbaseGrammarAccess.XNumberLiteralElements getXNumberLiteralAccess() {
		return gaXbase.getXNumberLiteralAccess();
	}
	
	public ParserRule getXNumberLiteralRule() {
		return getXNumberLiteralAccess().getRule();
	}

	//XStringLiteral XExpression:
	//	{XStringLiteral} value=STRING;
	public XbaseGrammarAccess.XStringLiteralElements getXStringLiteralAccess() {
		return gaXbase.getXStringLiteralAccess();
	}
	
	public ParserRule getXStringLiteralRule() {
		return getXStringLiteralAccess().getRule();
	}

	//XTypeLiteral XExpression:
	//	{XTypeLiteral} 'typeof' '(' type=[types::JvmType|QualifiedName] arrayDimensions+=ArrayBrackets* ')';
	public XbaseGrammarAccess.XTypeLiteralElements getXTypeLiteralAccess() {
		return gaXbase.getXTypeLiteralAccess();
	}
	
	public ParserRule getXTypeLiteralRule() {
		return getXTypeLiteralAccess().getRule();
	}

	//XThrowExpression XExpression:
	//	{XThrowExpression} 'throw' expression=XExpression;
	public XbaseGrammarAccess.XThrowExpressionElements getXThrowExpressionAccess() {
		return gaXbase.getXThrowExpressionAccess();
	}
	
	public ParserRule getXThrowExpressionRule() {
		return getXThrowExpressionAccess().getRule();
	}

	//XReturnExpression XExpression:
	//	{XReturnExpression} 'return' -> expression=XExpression?;
	public XbaseGrammarAccess.XReturnExpressionElements getXReturnExpressionAccess() {
		return gaXbase.getXReturnExpressionAccess();
	}
	
	public ParserRule getXReturnExpressionRule() {
		return getXReturnExpressionAccess().getRule();
	}

	//XTryCatchFinallyExpression XExpression:
	//	{XTryCatchFinallyExpression} 'try' expression=XExpression (catchClauses+=XCatchClause+ (=> 'finally'
	//	finallyExpression=XExpression)? | 'finally' finallyExpression=XExpression);
	public XbaseGrammarAccess.XTryCatchFinallyExpressionElements getXTryCatchFinallyExpressionAccess() {
		return gaXbase.getXTryCatchFinallyExpressionAccess();
	}
	
	public ParserRule getXTryCatchFinallyExpressionRule() {
		return getXTryCatchFinallyExpressionAccess().getRule();
	}

	//XSynchronizedExpression XExpression:
	//	=> ({XSynchronizedExpression} 'synchronized' '(') param=XExpression ')' expression=XExpression;
	public XbaseGrammarAccess.XSynchronizedExpressionElements getXSynchronizedExpressionAccess() {
		return gaXbase.getXSynchronizedExpressionAccess();
	}
	
	public ParserRule getXSynchronizedExpressionRule() {
		return getXSynchronizedExpressionAccess().getRule();
	}

	//XCatchClause:
	//	=> 'catch' '(' declaredParam=FullJvmFormalParameter ')' expression=XExpression;
	public XbaseGrammarAccess.XCatchClauseElements getXCatchClauseAccess() {
		return gaXbase.getXCatchClauseAccess();
	}
	
	public ParserRule getXCatchClauseRule() {
		return getXCatchClauseAccess().getRule();
	}

	//@Override
	//QualifiedName:
	//	ValidID (=> '.' ValidID)*;
	public XbaseGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaXbase.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//Number hidden():
	//	HEX | (INT | DECIMAL) ('.' (INT | DECIMAL))?;
	public XbaseGrammarAccess.NumberElements getNumberAccess() {
		return gaXbase.getNumberAccess();
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}

	///**
	// * Dummy rule, for "better" downwards compatibility, since GrammarAccess generates non-static inner classes,
	// * which makes downstream grammars break on classloading, when a rule is removed.
	// */
	//StaticQualifier:
	//	(ValidID '::')+;
	public XbaseGrammarAccess.StaticQualifierElements getStaticQualifierAccess() {
		return gaXbase.getStaticQualifierAccess();
	}
	
	public ParserRule getStaticQualifierRule() {
		return getStaticQualifierAccess().getRule();
	}

	//terminal HEX:
	//	('0x' | '0X') ('0'..'9' | 'a'..'f' | 'A'..'F' | '_')+ ('#' (('b' | 'B') ('i' | 'I') | ('l' | 'L')))?;
	public TerminalRule getHEXRule() {
		return gaXbase.getHEXRule();
	} 

	//terminal INT returns ecore::EInt:
	//	'0'..'9' ('0'..'9' | '_')*;
	public TerminalRule getINTRule() {
		return gaXbase.getINTRule();
	} 

	//terminal DECIMAL:
	//	INT (('e' | 'E') ('+' | '-')? INT)? (('b' | 'B') ('i' | 'I' | 'd' | 'D') | ('l' | 'L' | 'd' | 'D' | 'f' | 'F'))?;
	public TerminalRule getDECIMALRule() {
		return gaXbase.getDECIMALRule();
	} 

	//JvmTypeReference:
	//	JvmParameterizedTypeReference => ({JvmGenericArrayTypeReference.componentType=current} ArrayBrackets)* |
	//	XFunctionTypeRef;
	public XtypeGrammarAccess.JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return gaXtype.getJvmTypeReferenceAccess();
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}

	//ArrayBrackets:
	//	'[' ']';
	public XtypeGrammarAccess.ArrayBracketsElements getArrayBracketsAccess() {
		return gaXtype.getArrayBracketsAccess();
	}
	
	public ParserRule getArrayBracketsRule() {
		return getArrayBracketsAccess().getRule();
	}

	//XFunctionTypeRef:
	//	('(' (paramTypes+=JvmTypeReference (',' paramTypes+=JvmTypeReference)*)? ')')? '=>' returnType=JvmTypeReference;
	public XtypeGrammarAccess.XFunctionTypeRefElements getXFunctionTypeRefAccess() {
		return gaXtype.getXFunctionTypeRefAccess();
	}
	
	public ParserRule getXFunctionTypeRefRule() {
		return getXFunctionTypeRefAccess().getRule();
	}

	//JvmParameterizedTypeReference:
	//	type=[JvmType|super::QualifiedName] (=> '<' arguments+=JvmArgumentTypeReference (','
	//	arguments+=JvmArgumentTypeReference)* '>' (=> ({JvmInnerTypeReference.outer=current} '.') type=[JvmType|ValidID] (=>
	//	'<' arguments+=JvmArgumentTypeReference (',' arguments+=JvmArgumentTypeReference)* '>')?)*)?;
	public XtypeGrammarAccess.JvmParameterizedTypeReferenceElements getJvmParameterizedTypeReferenceAccess() {
		return gaXtype.getJvmParameterizedTypeReferenceAccess();
	}
	
	public ParserRule getJvmParameterizedTypeReferenceRule() {
		return getJvmParameterizedTypeReferenceAccess().getRule();
	}

	//JvmArgumentTypeReference JvmTypeReference:
	//	JvmTypeReference | JvmWildcardTypeReference;
	public XtypeGrammarAccess.JvmArgumentTypeReferenceElements getJvmArgumentTypeReferenceAccess() {
		return gaXtype.getJvmArgumentTypeReferenceAccess();
	}
	
	public ParserRule getJvmArgumentTypeReferenceRule() {
		return getJvmArgumentTypeReferenceAccess().getRule();
	}

	//JvmWildcardTypeReference:
	//	{JvmWildcardTypeReference} '?' (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded* |
	//	constraints+=JvmLowerBound constraints+=JvmLowerBoundAnded*)?;
	public XtypeGrammarAccess.JvmWildcardTypeReferenceElements getJvmWildcardTypeReferenceAccess() {
		return gaXtype.getJvmWildcardTypeReferenceAccess();
	}
	
	public ParserRule getJvmWildcardTypeReferenceRule() {
		return getJvmWildcardTypeReferenceAccess().getRule();
	}

	//JvmUpperBound:
	//	'extends' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundElements getJvmUpperBoundAccess() {
		return gaXtype.getJvmUpperBoundAccess();
	}
	
	public ParserRule getJvmUpperBoundRule() {
		return getJvmUpperBoundAccess().getRule();
	}

	//JvmUpperBoundAnded JvmUpperBound:
	//	'&' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundAndedElements getJvmUpperBoundAndedAccess() {
		return gaXtype.getJvmUpperBoundAndedAccess();
	}
	
	public ParserRule getJvmUpperBoundAndedRule() {
		return getJvmUpperBoundAndedAccess().getRule();
	}

	//JvmLowerBound:
	//	'super' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundElements getJvmLowerBoundAccess() {
		return gaXtype.getJvmLowerBoundAccess();
	}
	
	public ParserRule getJvmLowerBoundRule() {
		return getJvmLowerBoundAccess().getRule();
	}

	//JvmLowerBoundAnded JvmLowerBound:
	//	'&' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundAndedElements getJvmLowerBoundAndedAccess() {
		return gaXtype.getJvmLowerBoundAndedAccess();
	}
	
	public ParserRule getJvmLowerBoundAndedRule() {
		return getJvmLowerBoundAndedAccess().getRule();
	}

	//JvmTypeParameter:
	//	name=ValidID (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded*)?;
	public XtypeGrammarAccess.JvmTypeParameterElements getJvmTypeParameterAccess() {
		return gaXtype.getJvmTypeParameterAccess();
	}
	
	public ParserRule getJvmTypeParameterRule() {
		return getJvmTypeParameterAccess().getRule();
	}

	//QualifiedNameWithWildcard:
	//	super::QualifiedName '.' '*';
	public XtypeGrammarAccess.QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return gaXtype.getQualifiedNameWithWildcardAccess();
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}

	//ValidID:
	//	ID;
	public XtypeGrammarAccess.ValidIDElements getValidIDAccess() {
		return gaXtype.getValidIDAccess();
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}

	//XImportSection:
	//	importDeclarations+=XImportDeclaration+;
	public XtypeGrammarAccess.XImportSectionElements getXImportSectionAccess() {
		return gaXtype.getXImportSectionAccess();
	}
	
	public ParserRule getXImportSectionRule() {
		return getXImportSectionAccess().getRule();
	}

	//XImportDeclaration:
	//	'import' (static?='static' extension?='extension'? importedType=[JvmDeclaredType|QualifiedNameInStaticImport]
	//	(wildcard?='*' | memberName=ValidID) | importedType=[JvmDeclaredType|super::QualifiedName] |
	//	importedNamespace=QualifiedNameWithWildcard) ';'?;
	public XtypeGrammarAccess.XImportDeclarationElements getXImportDeclarationAccess() {
		return gaXtype.getXImportDeclarationAccess();
	}
	
	public ParserRule getXImportDeclarationRule() {
		return getXImportDeclarationAccess().getRule();
	}

	//QualifiedNameInStaticImport:
	//	(ValidID '.')+;
	public XtypeGrammarAccess.QualifiedNameInStaticImportElements getQualifiedNameInStaticImportAccess() {
		return gaXtype.getQualifiedNameInStaticImportAccess();
	}
	
	public ParserRule getQualifiedNameInStaticImportRule() {
		return getQualifiedNameInStaticImportAccess().getRule();
	}

	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '$' | '_') ('a'..'z' | 'A'..'Z' | '$' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaXtype.getIDRule();
	} 

	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"'? | "'" ('\\' . | !('\\' | "'"))* "'"?;
	public TerminalRule getSTRINGRule() {
		return gaXtype.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaXtype.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaXtype.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaXtype.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaXtype.getANY_OTHERRule();
	} 
}
