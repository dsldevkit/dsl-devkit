/*******************************************************************************
 * Copyright (c) 2016 Avaloq Evolution AG and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Avaloq Evolution AG - initial API and implementation
 *******************************************************************************/
grammar com.avaloq.tools.ddk.xtext.export.Export with com.avaloq.tools.ddk.xtext.expression.Expression

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.eclipse.org/2008/Xtext" as xtext
generate export "http://www.avaloq.com/tools/ddk/xtext/export/Export"

ExportModel:
    ('export' (extension?='extension')? name=ID 'for' targetGrammar=[xtext::Grammar | QualifiedID])?
    (imports+=Import)+
    (extensions+=Extension)*
    ('interface' '{'
    (interfaces+=Interface)+
    '}')?
    (exports+=Export)+
;

Import:
    'import' package=[ecore::EPackage|STRING] ('as' name=ID)? // Use nsURIs
;

Extension:
    'extension' extension=QualifiedID // Alas, we can't link xtend files. Maybe simply as EResources?
;

DeclarationForType:
    Interface | Export
;

Interface:
    type=[ecore::EClass|QualifiedID] ('[' guard=Expression ']')? ('=' items+=InterfaceItem (',' items+=InterfaceItem)*)*
    ';'
;

InterfaceItem:
    InterfaceField | InterfaceNavigation | InterfaceExpression
;

InterfaceField:
    (unordered?='+')? field=[ecore::EStructuralFeature|ID]
;

InterfaceNavigation:
    '@' (unordered?='+')? ref=[ecore::EReference|ID]
;

InterfaceExpression:
    'eval' (ref?='@')? (unordered?='+')? '(' expr=Expression ')'
;

Export:
    'export'
    (lookup?='lookup' ('[' lookupPredicate=Expression ']')?)?
    type=[ecore::EClass|QualifiedID]
    ('as' qualifiedName?='qualified'? naming=Expression)? // Only one name for now
    ('[' guard=Expression ']')?
    '{'
    ('uri-fragment' '=' fragmentUnique?='unique'? 'attribute' '(' fragmentAttribute=[ecore::EAttribute|ID] ')' ';')?
    ((fingerprint?='object-fingerprint' | resourceFingerprint?='resource-fingerprint') ';')?
    (('field' attributes+=Attribute (',' attributes+=Attribute)* ';')
    |('data' userData+=UserData (',' userData+=UserData)* ';')
    )*
    '}'
;

UserData:
    name=ID '=' expr=Expression
;

Attribute:
    attribute=[ecore::EAttribute|ID]
;

QualifiedID returns ecore::EString:
    ID ('::' ID)*
;
