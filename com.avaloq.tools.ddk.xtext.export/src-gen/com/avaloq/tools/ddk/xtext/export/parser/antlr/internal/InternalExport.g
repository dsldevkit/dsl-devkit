/*
 * generated by Xtext
 */
grammar InternalExport;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package com.avaloq.tools.ddk.xtext.export.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package com.avaloq.tools.ddk.xtext.export.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import com.avaloq.tools.ddk.xtext.export.services.ExportGrammarAccess;

}

@parser::members {

 	private ExportGrammarAccess grammarAccess;
 	
    public InternalExportParser(TokenStream input, ExportGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "ExportModel";	
   	}
   	
   	@Override
   	protected ExportGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleExportModel
entryRuleExportModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExportModelRule()); }
	 iv_ruleExportModel=ruleExportModel 
	 { $current=$iv_ruleExportModel.current; } 
	 EOF 
;

// Rule ExportModel
ruleExportModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='export' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getExportModelAccess().getExportKeyword_0_0());
    }
(
(
		lv_extension_1_0=	'extension' 
    {
        newLeafNode(lv_extension_1_0, grammarAccess.getExportModelAccess().getExtensionExtensionKeyword_0_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExportModelRule());
	        }
       		setWithLastConsumed($current, "extension", true, "extension");
	    }

)
)?(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getExportModelAccess().getNameIDTerminalRuleCall_0_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExportModelRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
)	otherlv_3='for' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getExportModelAccess().getForKeyword_0_3());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getExportModelRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getExportModelAccess().getTargetGrammarGrammarCrossReference_0_4_0()); 
	    }
		ruleQualifiedID		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))?(
(
		{ 
	        newCompositeNode(grammarAccess.getExportModelAccess().getImportsImportParserRuleCall_1_0()); 
	    }
		lv_imports_5_0=ruleImport		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExportModelRule());
	        }
       		add(
       			$current, 
       			"imports",
        		lv_imports_5_0, 
        		"com.avaloq.tools.ddk.xtext.export.Export.Import");
	        afterParserOrEnumRuleCall();
	    }

)
)+(
(
		{ 
	        newCompositeNode(grammarAccess.getExportModelAccess().getExtensionsExtensionParserRuleCall_2_0()); 
	    }
		lv_extensions_6_0=ruleExtension		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExportModelRule());
	        }
       		add(
       			$current, 
       			"extensions",
        		lv_extensions_6_0, 
        		"com.avaloq.tools.ddk.xtext.export.Export.Extension");
	        afterParserOrEnumRuleCall();
	    }

)
)*(	otherlv_7='interface' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getExportModelAccess().getInterfaceKeyword_3_0());
    }
	otherlv_8='{' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getExportModelAccess().getLeftCurlyBracketKeyword_3_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExportModelAccess().getInterfacesInterfaceParserRuleCall_3_2_0()); 
	    }
		lv_interfaces_9_0=ruleInterface		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExportModelRule());
	        }
       		add(
       			$current, 
       			"interfaces",
        		lv_interfaces_9_0, 
        		"com.avaloq.tools.ddk.xtext.export.Export.Interface");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_10='}' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getExportModelAccess().getRightCurlyBracketKeyword_3_3());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getExportModelAccess().getExportsExportParserRuleCall_4_0()); 
	    }
		lv_exports_11_0=ruleExport		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExportModelRule());
	        }
       		add(
       			$current, 
       			"exports",
        		lv_exports_11_0, 
        		"com.avaloq.tools.ddk.xtext.export.Export.Export");
	        afterParserOrEnumRuleCall();
	    }

)
)+)
;





// Entry rule entryRuleImport
entryRuleImport returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getImportRule()); }
	 iv_ruleImport=ruleImport 
	 { $current=$iv_ruleImport.current; } 
	 EOF 
;

// Rule Import
ruleImport returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='import' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getImportAccess().getImportKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getImportRule());
	        }
        }
	otherlv_1=RULE_STRING
	{
		newLeafNode(otherlv_1, grammarAccess.getImportAccess().getPackageEPackageCrossReference_1_0()); 
	}

)
)(	otherlv_2='as' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getImportAccess().getAsKeyword_2_0());
    }
(
(
		lv_name_3_0=RULE_ID
		{
			newLeafNode(lv_name_3_0, grammarAccess.getImportAccess().getNameIDTerminalRuleCall_2_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getImportRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
))?)
;





// Entry rule entryRuleExtension
entryRuleExtension returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExtensionRule()); }
	 iv_ruleExtension=ruleExtension 
	 { $current=$iv_ruleExtension.current; } 
	 EOF 
;

// Rule Extension
ruleExtension returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='extension' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getExtensionAccess().getExtensionKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExtensionAccess().getExtensionQualifiedIDParserRuleCall_1_0()); 
	    }
		lv_extension_1_0=ruleQualifiedID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExtensionRule());
	        }
       		set(
       			$current, 
       			"extension",
        		lv_extension_1_0, 
        		"com.avaloq.tools.ddk.xtext.export.Export.QualifiedID");
	        afterParserOrEnumRuleCall();
	    }

)
))
;







// Entry rule entryRuleInterface
entryRuleInterface returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInterfaceRule()); }
	 iv_ruleInterface=ruleInterface 
	 { $current=$iv_ruleInterface.current; } 
	 EOF 
;

// Rule Interface
ruleInterface returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getInterfaceRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getInterfaceAccess().getTypeEClassCrossReference_0_0()); 
	    }
		ruleQualifiedID		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='[' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getInterfaceAccess().getLeftSquareBracketKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInterfaceAccess().getGuardExpressionParserRuleCall_1_1_0()); 
	    }
		lv_guard_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInterfaceRule());
	        }
       		set(
       			$current, 
       			"guard",
        		lv_guard_2_0, 
        		"com.avaloq.tools.ddk.xtext.expression.Expression.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=']' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getInterfaceAccess().getRightSquareBracketKeyword_1_2());
    }
)?(	otherlv_4='=' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getInterfaceAccess().getEqualsSignKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInterfaceAccess().getItemsInterfaceItemParserRuleCall_2_1_0()); 
	    }
		lv_items_5_0=ruleInterfaceItem		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInterfaceRule());
	        }
       		add(
       			$current, 
       			"items",
        		lv_items_5_0, 
        		"com.avaloq.tools.ddk.xtext.export.Export.InterfaceItem");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_6=',' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getInterfaceAccess().getCommaKeyword_2_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInterfaceAccess().getItemsInterfaceItemParserRuleCall_2_2_1_0()); 
	    }
		lv_items_7_0=ruleInterfaceItem		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInterfaceRule());
	        }
       		add(
       			$current, 
       			"items",
        		lv_items_7_0, 
        		"com.avaloq.tools.ddk.xtext.export.Export.InterfaceItem");
	        afterParserOrEnumRuleCall();
	    }

)
))*)*	otherlv_8=';' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getInterfaceAccess().getSemicolonKeyword_3());
    }
)
;





// Entry rule entryRuleInterfaceItem
entryRuleInterfaceItem returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInterfaceItemRule()); }
	 iv_ruleInterfaceItem=ruleInterfaceItem 
	 { $current=$iv_ruleInterfaceItem.current; } 
	 EOF 
;

// Rule InterfaceItem
ruleInterfaceItem returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getInterfaceItemAccess().getInterfaceFieldParserRuleCall_0()); 
    }
    this_InterfaceField_0=ruleInterfaceField
    { 
        $current = $this_InterfaceField_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getInterfaceItemAccess().getInterfaceNavigationParserRuleCall_1()); 
    }
    this_InterfaceNavigation_1=ruleInterfaceNavigation
    { 
        $current = $this_InterfaceNavigation_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getInterfaceItemAccess().getInterfaceExpressionParserRuleCall_2()); 
    }
    this_InterfaceExpression_2=ruleInterfaceExpression
    { 
        $current = $this_InterfaceExpression_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleInterfaceField
entryRuleInterfaceField returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInterfaceFieldRule()); }
	 iv_ruleInterfaceField=ruleInterfaceField 
	 { $current=$iv_ruleInterfaceField.current; } 
	 EOF 
;

// Rule InterfaceField
ruleInterfaceField returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_unordered_0_0=	'+' 
    {
        newLeafNode(lv_unordered_0_0, grammarAccess.getInterfaceFieldAccess().getUnorderedPlusSignKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getInterfaceFieldRule());
	        }
       		setWithLastConsumed($current, "unordered", true, "+");
	    }

)
)?(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getInterfaceFieldRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getInterfaceFieldAccess().getFieldEStructuralFeatureCrossReference_1_0()); 
	}

)
))
;





// Entry rule entryRuleInterfaceNavigation
entryRuleInterfaceNavigation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInterfaceNavigationRule()); }
	 iv_ruleInterfaceNavigation=ruleInterfaceNavigation 
	 { $current=$iv_ruleInterfaceNavigation.current; } 
	 EOF 
;

// Rule InterfaceNavigation
ruleInterfaceNavigation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='@' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getInterfaceNavigationAccess().getCommercialAtKeyword_0());
    }
(
(
		lv_unordered_1_0=	'+' 
    {
        newLeafNode(lv_unordered_1_0, grammarAccess.getInterfaceNavigationAccess().getUnorderedPlusSignKeyword_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getInterfaceNavigationRule());
	        }
       		setWithLastConsumed($current, "unordered", true, "+");
	    }

)
)?(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getInterfaceNavigationRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getInterfaceNavigationAccess().getRefEReferenceCrossReference_2_0()); 
	}

)
))
;





// Entry rule entryRuleInterfaceExpression
entryRuleInterfaceExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInterfaceExpressionRule()); }
	 iv_ruleInterfaceExpression=ruleInterfaceExpression 
	 { $current=$iv_ruleInterfaceExpression.current; } 
	 EOF 
;

// Rule InterfaceExpression
ruleInterfaceExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='eval' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getInterfaceExpressionAccess().getEvalKeyword_0());
    }
(
(
		lv_ref_1_0=	'@' 
    {
        newLeafNode(lv_ref_1_0, grammarAccess.getInterfaceExpressionAccess().getRefCommercialAtKeyword_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getInterfaceExpressionRule());
	        }
       		setWithLastConsumed($current, "ref", true, "@");
	    }

)
)?(
(
		lv_unordered_2_0=	'+' 
    {
        newLeafNode(lv_unordered_2_0, grammarAccess.getInterfaceExpressionAccess().getUnorderedPlusSignKeyword_2_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getInterfaceExpressionRule());
	        }
       		setWithLastConsumed($current, "unordered", true, "+");
	    }

)
)?	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getInterfaceExpressionAccess().getLeftParenthesisKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInterfaceExpressionAccess().getExprExpressionParserRuleCall_4_0()); 
	    }
		lv_expr_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInterfaceExpressionRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_4_0, 
        		"com.avaloq.tools.ddk.xtext.expression.Expression.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getInterfaceExpressionAccess().getRightParenthesisKeyword_5());
    }
)
;





// Entry rule entryRuleExport
entryRuleExport returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExportRule()); }
	 iv_ruleExport=ruleExport 
	 { $current=$iv_ruleExport.current; } 
	 EOF 
;

// Rule Export
ruleExport returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='export' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getExportAccess().getExportKeyword_0());
    }
((
(
		lv_lookup_1_0=	'lookup' 
    {
        newLeafNode(lv_lookup_1_0, grammarAccess.getExportAccess().getLookupLookupKeyword_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExportRule());
	        }
       		setWithLastConsumed($current, "lookup", true, "lookup");
	    }

)
)(	otherlv_2='[' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getExportAccess().getLeftSquareBracketKeyword_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExportAccess().getLookupPredicateExpressionParserRuleCall_1_1_1_0()); 
	    }
		lv_lookupPredicate_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExportRule());
	        }
       		set(
       			$current, 
       			"lookupPredicate",
        		lv_lookupPredicate_3_0, 
        		"com.avaloq.tools.ddk.xtext.expression.Expression.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=']' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getExportAccess().getRightSquareBracketKeyword_1_1_2());
    }
)?)?(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getExportRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getExportAccess().getTypeEClassCrossReference_2_0()); 
	    }
		ruleQualifiedID		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_6='as' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getExportAccess().getAsKeyword_3_0());
    }
(
(
		lv_qualifiedName_7_0=	'qualified' 
    {
        newLeafNode(lv_qualifiedName_7_0, grammarAccess.getExportAccess().getQualifiedNameQualifiedKeyword_3_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExportRule());
	        }
       		setWithLastConsumed($current, "qualifiedName", true, "qualified");
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getExportAccess().getNamingExpressionParserRuleCall_3_2_0()); 
	    }
		lv_naming_8_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExportRule());
	        }
       		set(
       			$current, 
       			"naming",
        		lv_naming_8_0, 
        		"com.avaloq.tools.ddk.xtext.expression.Expression.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_9='[' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getExportAccess().getLeftSquareBracketKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExportAccess().getGuardExpressionParserRuleCall_4_1_0()); 
	    }
		lv_guard_10_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExportRule());
	        }
       		set(
       			$current, 
       			"guard",
        		lv_guard_10_0, 
        		"com.avaloq.tools.ddk.xtext.expression.Expression.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_11=']' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getExportAccess().getRightSquareBracketKeyword_4_2());
    }
)?	otherlv_12='{' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getExportAccess().getLeftCurlyBracketKeyword_5());
    }
(	otherlv_13='uri-fragment' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getExportAccess().getUriFragmentKeyword_6_0());
    }
	otherlv_14='=' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getExportAccess().getEqualsSignKeyword_6_1());
    }
(
(
		lv_fragmentUnique_15_0=	'unique' 
    {
        newLeafNode(lv_fragmentUnique_15_0, grammarAccess.getExportAccess().getFragmentUniqueUniqueKeyword_6_2_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExportRule());
	        }
       		setWithLastConsumed($current, "fragmentUnique", true, "unique");
	    }

)
)?	otherlv_16='attribute' 
    {
    	newLeafNode(otherlv_16, grammarAccess.getExportAccess().getAttributeKeyword_6_3());
    }
	otherlv_17='(' 
    {
    	newLeafNode(otherlv_17, grammarAccess.getExportAccess().getLeftParenthesisKeyword_6_4());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getExportRule());
	        }
        }
	otherlv_18=RULE_ID
	{
		newLeafNode(otherlv_18, grammarAccess.getExportAccess().getFragmentAttributeEAttributeCrossReference_6_5_0()); 
	}

)
)	otherlv_19=')' 
    {
    	newLeafNode(otherlv_19, grammarAccess.getExportAccess().getRightParenthesisKeyword_6_6());
    }
	otherlv_20=';' 
    {
    	newLeafNode(otherlv_20, grammarAccess.getExportAccess().getSemicolonKeyword_6_7());
    }
)?(((
(
		lv_fingerprint_21_0=	'object-fingerprint' 
    {
        newLeafNode(lv_fingerprint_21_0, grammarAccess.getExportAccess().getFingerprintObjectFingerprintKeyword_7_0_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExportRule());
	        }
       		setWithLastConsumed($current, "fingerprint", true, "object-fingerprint");
	    }

)
)
    |(
(
		lv_resourceFingerprint_22_0=	'resource-fingerprint' 
    {
        newLeafNode(lv_resourceFingerprint_22_0, grammarAccess.getExportAccess().getResourceFingerprintResourceFingerprintKeyword_7_0_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExportRule());
	        }
       		setWithLastConsumed($current, "resourceFingerprint", true, "resource-fingerprint");
	    }

)
))	otherlv_23=';' 
    {
    	newLeafNode(otherlv_23, grammarAccess.getExportAccess().getSemicolonKeyword_7_1());
    }
)?((	otherlv_24='field' 
    {
    	newLeafNode(otherlv_24, grammarAccess.getExportAccess().getFieldKeyword_8_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExportAccess().getAttributesAttributeParserRuleCall_8_0_1_0()); 
	    }
		lv_attributes_25_0=ruleAttribute		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExportRule());
	        }
       		add(
       			$current, 
       			"attributes",
        		lv_attributes_25_0, 
        		"com.avaloq.tools.ddk.xtext.export.Export.Attribute");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_26=',' 
    {
    	newLeafNode(otherlv_26, grammarAccess.getExportAccess().getCommaKeyword_8_0_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExportAccess().getAttributesAttributeParserRuleCall_8_0_2_1_0()); 
	    }
		lv_attributes_27_0=ruleAttribute		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExportRule());
	        }
       		add(
       			$current, 
       			"attributes",
        		lv_attributes_27_0, 
        		"com.avaloq.tools.ddk.xtext.export.Export.Attribute");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_28=';' 
    {
    	newLeafNode(otherlv_28, grammarAccess.getExportAccess().getSemicolonKeyword_8_0_3());
    }
)
    |(	otherlv_29='data' 
    {
    	newLeafNode(otherlv_29, grammarAccess.getExportAccess().getDataKeyword_8_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExportAccess().getUserDataUserDataParserRuleCall_8_1_1_0()); 
	    }
		lv_userData_30_0=ruleUserData		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExportRule());
	        }
       		add(
       			$current, 
       			"userData",
        		lv_userData_30_0, 
        		"com.avaloq.tools.ddk.xtext.export.Export.UserData");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_31=',' 
    {
    	newLeafNode(otherlv_31, grammarAccess.getExportAccess().getCommaKeyword_8_1_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExportAccess().getUserDataUserDataParserRuleCall_8_1_2_1_0()); 
	    }
		lv_userData_32_0=ruleUserData		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExportRule());
	        }
       		add(
       			$current, 
       			"userData",
        		lv_userData_32_0, 
        		"com.avaloq.tools.ddk.xtext.export.Export.UserData");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_33=';' 
    {
    	newLeafNode(otherlv_33, grammarAccess.getExportAccess().getSemicolonKeyword_8_1_3());
    }
))*	otherlv_34='}' 
    {
    	newLeafNode(otherlv_34, grammarAccess.getExportAccess().getRightCurlyBracketKeyword_9());
    }
)
;





// Entry rule entryRuleUserData
entryRuleUserData returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUserDataRule()); }
	 iv_ruleUserData=ruleUserData 
	 { $current=$iv_ruleUserData.current; } 
	 EOF 
;

// Rule UserData
ruleUserData returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getUserDataAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getUserDataRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
)	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getUserDataAccess().getEqualsSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUserDataAccess().getExprExpressionParserRuleCall_2_0()); 
	    }
		lv_expr_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUserDataRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_2_0, 
        		"com.avaloq.tools.ddk.xtext.expression.Expression.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleAttribute
entryRuleAttribute returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAttributeRule()); }
	 iv_ruleAttribute=ruleAttribute 
	 { $current=$iv_ruleAttribute.current; } 
	 EOF 
;

// Rule Attribute
ruleAttribute returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getAttributeRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getAttributeAccess().getAttributeEAttributeCrossReference_0()); 
	}

)
)
;





// Entry rule entryRuleQualifiedID
entryRuleQualifiedID returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getQualifiedIDRule()); } 
	 iv_ruleQualifiedID=ruleQualifiedID 
	 { $current=$iv_ruleQualifiedID.current.getText(); }  
	 EOF 
;

// Rule QualifiedID
ruleQualifiedID returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getQualifiedIDAccess().getIDTerminalRuleCall_0()); 
    }
(
	kw='::' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQualifiedIDAccess().getColonColonKeyword_1_0()); 
    }
    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getQualifiedIDAccess().getIDTerminalRuleCall_1_1()); 
    }
)*)
    ;





// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	 iv_ruleExpression=ruleExpression 
	 { $current=$iv_ruleExpression.current; } 
	 EOF 
;

// Rule Expression
ruleExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getLetExpressionParserRuleCall_0()); 
    }
    this_LetExpression_0=ruleLetExpression
    { 
        $current = $this_LetExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

    |((	ruleCastedExpression)=>
    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getCastedExpressionParserRuleCall_1()); 
    }
    this_CastedExpression_1=ruleCastedExpression
    { 
        $current = $this_CastedExpression_1.current; 
        afterParserOrEnumRuleCall();
    }
)
    |
    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getChainExpressionParserRuleCall_2()); 
    }
    this_ChainExpression_2=ruleChainExpression
    { 
        $current = $this_ChainExpression_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;







// Entry rule entryRuleLetExpression
entryRuleLetExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLetExpressionRule()); }
	 iv_ruleLetExpression=ruleLetExpression 
	 { $current=$iv_ruleLetExpression.current; } 
	 EOF 
;

// Rule LetExpression
ruleLetExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='let' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getLetExpressionAccess().getLetKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLetExpressionAccess().getIdentifierIdentifierParserRuleCall_1_0()); 
	    }
		lv_identifier_1_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLetExpressionRule());
	        }
       		set(
       			$current, 
       			"identifier",
        		lv_identifier_1_0, 
        		"com.avaloq.tools.ddk.xtext.expression.Expression.Identifier");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getLetExpressionAccess().getEqualsSignKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLetExpressionAccess().getVarExprExpressionParserRuleCall_3_0()); 
	    }
		lv_varExpr_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLetExpressionRule());
	        }
       		set(
       			$current, 
       			"varExpr",
        		lv_varExpr_3_0, 
        		"com.avaloq.tools.ddk.xtext.expression.Expression.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=':' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getLetExpressionAccess().getColonKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLetExpressionAccess().getTargetExpressionParserRuleCall_5_0()); 
	    }
		lv_target_5_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLetExpressionRule());
	        }
       		set(
       			$current, 
       			"target",
        		lv_target_5_0, 
        		"com.avaloq.tools.ddk.xtext.expression.Expression.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleCastedExpression
entryRuleCastedExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCastedExpressionRule()); }
	 iv_ruleCastedExpression=ruleCastedExpression 
	 { $current=$iv_ruleCastedExpression.current; } 
	 EOF 
;

// Rule CastedExpression
ruleCastedExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getCastedExpressionAccess().getLeftParenthesisKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCastedExpressionAccess().getTypeTypeParserRuleCall_1_0()); 
	    }
		lv_type_1_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCastedExpressionRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_1_0, 
        		"com.avaloq.tools.ddk.xtext.expression.Expression.Type");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=')' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getCastedExpressionAccess().getRightParenthesisKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCastedExpressionAccess().getTargetExpressionParserRuleCall_3_0()); 
	    }
		lv_target_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCastedExpressionRule());
	        }
       		set(
       			$current, 
       			"target",
        		lv_target_3_0, 
        		"com.avaloq.tools.ddk.xtext.expression.Expression.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleChainExpression
entryRuleChainExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getChainExpressionRule()); }
	 iv_ruleChainExpression=ruleChainExpression 
	 { $current=$iv_ruleChainExpression.current; } 
	 EOF 
;

// Rule ChainExpression
ruleChainExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getChainExpressionAccess().getChainedExpressionParserRuleCall_0()); 
    }
    this_ChainedExpression_0=ruleChainedExpression
    { 
        $current = $this_ChainedExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getChainExpressionAccess().getChainExpressionFirstAction_1_0(),
            $current);
    }
)	otherlv_2='->' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getChainExpressionAccess().getHyphenMinusGreaterThanSignKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getChainExpressionAccess().getNextChainedExpressionParserRuleCall_1_2_0()); 
	    }
		lv_next_3_0=ruleChainedExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getChainExpressionRule());
	        }
       		set(
       			$current, 
       			"next",
        		lv_next_3_0, 
        		"com.avaloq.tools.ddk.xtext.expression.Expression.ChainedExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleChainedExpression
entryRuleChainedExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getChainedExpressionRule()); }
	 iv_ruleChainedExpression=ruleChainedExpression 
	 { $current=$iv_ruleChainedExpression.current; } 
	 EOF 
;

// Rule ChainedExpression
ruleChainedExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getChainedExpressionAccess().getIfExpressionKwParserRuleCall_0()); 
    }
    this_IfExpressionKw_0=ruleIfExpressionKw
    { 
        $current = $this_IfExpressionKw_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getChainedExpressionAccess().getIfExpressionTriParserRuleCall_1()); 
    }
    this_IfExpressionTri_1=ruleIfExpressionTri
    { 
        $current = $this_IfExpressionTri_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getChainedExpressionAccess().getSwitchExpressionParserRuleCall_2()); 
    }
    this_SwitchExpression_2=ruleSwitchExpression
    { 
        $current = $this_SwitchExpression_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleIfExpressionTri
entryRuleIfExpressionTri returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIfExpressionTriRule()); }
	 iv_ruleIfExpressionTri=ruleIfExpressionTri 
	 { $current=$iv_ruleIfExpressionTri.current; } 
	 EOF 
;

// Rule IfExpressionTri
ruleIfExpressionTri returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getIfExpressionTriAccess().getOrExpressionParserRuleCall_0()); 
    }
    this_OrExpression_0=ruleOrExpression
    { 
        $current = $this_OrExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getIfExpressionTriAccess().getIfExpressionConditionAction_1_0(),
            $current);
    }
)	otherlv_2='?' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getIfExpressionTriAccess().getQuestionMarkKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfExpressionTriAccess().getThenPartChainedExpressionParserRuleCall_1_2_0()); 
	    }
		lv_thenPart_3_0=ruleChainedExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfExpressionTriRule());
	        }
       		set(
       			$current, 
       			"thenPart",
        		lv_thenPart_3_0, 
        		"com.avaloq.tools.ddk.xtext.expression.Expression.ChainedExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=':' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getIfExpressionTriAccess().getColonKeyword_1_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfExpressionTriAccess().getElsePartChainedExpressionParserRuleCall_1_4_0()); 
	    }
		lv_elsePart_5_0=ruleChainedExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfExpressionTriRule());
	        }
       		set(
       			$current, 
       			"elsePart",
        		lv_elsePart_5_0, 
        		"com.avaloq.tools.ddk.xtext.expression.Expression.ChainedExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleIfExpressionKw
entryRuleIfExpressionKw returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIfExpressionKwRule()); }
	 iv_ruleIfExpressionKw=ruleIfExpressionKw 
	 { $current=$iv_ruleIfExpressionKw.current; } 
	 EOF 
;

// Rule IfExpressionKw
ruleIfExpressionKw returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='if' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getIfExpressionKwAccess().getIfKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfExpressionKwAccess().getConditionChainedExpressionParserRuleCall_1_0()); 
	    }
		lv_condition_1_0=ruleChainedExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfExpressionKwRule());
	        }
       		set(
       			$current, 
       			"condition",
        		lv_condition_1_0, 
        		"com.avaloq.tools.ddk.xtext.expression.Expression.ChainedExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='then' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getIfExpressionKwAccess().getThenKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfExpressionKwAccess().getThenPartChainedExpressionParserRuleCall_3_0()); 
	    }
		lv_thenPart_3_0=ruleChainedExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfExpressionKwRule());
	        }
       		set(
       			$current, 
       			"thenPart",
        		lv_thenPart_3_0, 
        		"com.avaloq.tools.ddk.xtext.expression.Expression.ChainedExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)((	'else' 
)=>(	otherlv_4='else' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getIfExpressionKwAccess().getElseKeyword_4_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfExpressionKwAccess().getElsePartChainedExpressionParserRuleCall_4_0_1_0()); 
	    }
		lv_elsePart_5_0=ruleChainedExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfExpressionKwRule());
	        }
       		set(
       			$current, 
       			"elsePart",
        		lv_elsePart_5_0, 
        		"com.avaloq.tools.ddk.xtext.expression.Expression.ChainedExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)))?)
;





// Entry rule entryRuleSwitchExpression
entryRuleSwitchExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSwitchExpressionRule()); }
	 iv_ruleSwitchExpression=ruleSwitchExpression 
	 { $current=$iv_ruleSwitchExpression.current; } 
	 EOF 
;

// Rule SwitchExpression
ruleSwitchExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='switch' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSwitchExpressionAccess().getSwitchKeyword_0());
    }
(	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSwitchExpressionAccess().getLeftParenthesisKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSwitchExpressionAccess().getSwitchExprOrExpressionParserRuleCall_1_1_0()); 
	    }
		lv_switchExpr_2_0=ruleOrExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSwitchExpressionRule());
	        }
       		set(
       			$current, 
       			"switchExpr",
        		lv_switchExpr_2_0, 
        		"com.avaloq.tools.ddk.xtext.expression.Expression.OrExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getSwitchExpressionAccess().getRightParenthesisKeyword_1_2());
    }
)?	otherlv_4='{' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getSwitchExpressionAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSwitchExpressionAccess().getCaseCaseParserRuleCall_3_0()); 
	    }
		lv_case_5_0=ruleCase		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSwitchExpressionRule());
	        }
       		add(
       			$current, 
       			"case",
        		lv_case_5_0, 
        		"com.avaloq.tools.ddk.xtext.expression.Expression.Case");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_6='default' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getSwitchExpressionAccess().getDefaultKeyword_4());
    }
	otherlv_7=':' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getSwitchExpressionAccess().getColonKeyword_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSwitchExpressionAccess().getDefaultExprOrExpressionParserRuleCall_6_0()); 
	    }
		lv_defaultExpr_8_0=ruleOrExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSwitchExpressionRule());
	        }
       		set(
       			$current, 
       			"defaultExpr",
        		lv_defaultExpr_8_0, 
        		"com.avaloq.tools.ddk.xtext.expression.Expression.OrExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_9='}' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getSwitchExpressionAccess().getRightCurlyBracketKeyword_7());
    }
)
;





// Entry rule entryRuleCase
entryRuleCase returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCaseRule()); }
	 iv_ruleCase=ruleCase 
	 { $current=$iv_ruleCase.current; } 
	 EOF 
;

// Rule Case
ruleCase returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='case' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getCaseAccess().getCaseKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCaseAccess().getConditionOrExpressionParserRuleCall_1_0()); 
	    }
		lv_condition_1_0=ruleOrExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCaseRule());
	        }
       		set(
       			$current, 
       			"condition",
        		lv_condition_1_0, 
        		"com.avaloq.tools.ddk.xtext.expression.Expression.OrExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getCaseAccess().getColonKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCaseAccess().getThenParOrExpressionParserRuleCall_3_0()); 
	    }
		lv_thenPar_3_0=ruleOrExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCaseRule());
	        }
       		set(
       			$current, 
       			"thenPar",
        		lv_thenPar_3_0, 
        		"com.avaloq.tools.ddk.xtext.expression.Expression.OrExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleOrExpression
entryRuleOrExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOrExpressionRule()); }
	 iv_ruleOrExpression=ruleOrExpression 
	 { $current=$iv_ruleOrExpression.current; } 
	 EOF 
;

// Rule OrExpression
ruleOrExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getOrExpressionAccess().getAndExpressionParserRuleCall_0()); 
    }
    this_AndExpression_0=ruleAndExpression
    { 
        $current = $this_AndExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getOrExpressionAccess().getBooleanOperationLeftAction_1_0(),
            $current);
    }
)(
(
		lv_operator_2_0=	'||' 
    {
        newLeafNode(lv_operator_2_0, grammarAccess.getOrExpressionAccess().getOperatorVerticalLineVerticalLineKeyword_1_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOrExpressionRule());
	        }
       		setWithLastConsumed($current, "operator", lv_operator_2_0, "||");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getOrExpressionAccess().getRightAndExpressionParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleAndExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOrExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"com.avaloq.tools.ddk.xtext.expression.Expression.AndExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleAndExpression
entryRuleAndExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAndExpressionRule()); }
	 iv_ruleAndExpression=ruleAndExpression 
	 { $current=$iv_ruleAndExpression.current; } 
	 EOF 
;

// Rule AndExpression
ruleAndExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAndExpressionAccess().getImpliesExpressionParserRuleCall_0()); 
    }
    this_ImpliesExpression_0=ruleImpliesExpression
    { 
        $current = $this_ImpliesExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAndExpressionAccess().getBooleanOperationLeftAction_1_0(),
            $current);
    }
)(
(
		lv_operator_2_0=	'&&' 
    {
        newLeafNode(lv_operator_2_0, grammarAccess.getAndExpressionAccess().getOperatorAmpersandAmpersandKeyword_1_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAndExpressionRule());
	        }
       		setWithLastConsumed($current, "operator", lv_operator_2_0, "&&");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAndExpressionAccess().getRightImpliesExpressionParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleImpliesExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAndExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"com.avaloq.tools.ddk.xtext.expression.Expression.ImpliesExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleImpliesExpression
entryRuleImpliesExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getImpliesExpressionRule()); }
	 iv_ruleImpliesExpression=ruleImpliesExpression 
	 { $current=$iv_ruleImpliesExpression.current; } 
	 EOF 
;

// Rule ImpliesExpression
ruleImpliesExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getImpliesExpressionAccess().getRelationalExpressionParserRuleCall_0()); 
    }
    this_RelationalExpression_0=ruleRelationalExpression
    { 
        $current = $this_RelationalExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getImpliesExpressionAccess().getBooleanOperationLeftAction_1_0(),
            $current);
    }
)(
(
		lv_operator_2_0=	'implies' 
    {
        newLeafNode(lv_operator_2_0, grammarAccess.getImpliesExpressionAccess().getOperatorImpliesKeyword_1_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getImpliesExpressionRule());
	        }
       		setWithLastConsumed($current, "operator", lv_operator_2_0, "implies");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getImpliesExpressionAccess().getRightRelationalExpressionParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleRelationalExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getImpliesExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"com.avaloq.tools.ddk.xtext.expression.Expression.RelationalExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleRelationalExpression
entryRuleRelationalExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRelationalExpressionRule()); }
	 iv_ruleRelationalExpression=ruleRelationalExpression 
	 { $current=$iv_ruleRelationalExpression.current; } 
	 EOF 
;

// Rule RelationalExpression
ruleRelationalExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getRelationalExpressionAccess().getAdditiveExpressionParserRuleCall_0()); 
    }
    this_AdditiveExpression_0=ruleAdditiveExpression
    { 
        $current = $this_AdditiveExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getRelationalExpressionAccess().getBooleanOperationLeftAction_1_0(),
            $current);
    }
)(
(
(
		lv_operator_2_1=	'==' 
    {
        newLeafNode(lv_operator_2_1, grammarAccess.getRelationalExpressionAccess().getOperatorEqualsSignEqualsSignKeyword_1_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRelationalExpressionRule());
	        }
       		setWithLastConsumed($current, "operator", lv_operator_2_1, null);
	    }

    |		lv_operator_2_2=	'!=' 
    {
        newLeafNode(lv_operator_2_2, grammarAccess.getRelationalExpressionAccess().getOperatorExclamationMarkEqualsSignKeyword_1_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRelationalExpressionRule());
	        }
       		setWithLastConsumed($current, "operator", lv_operator_2_2, null);
	    }

    |		lv_operator_2_3=	'>=' 
    {
        newLeafNode(lv_operator_2_3, grammarAccess.getRelationalExpressionAccess().getOperatorGreaterThanSignEqualsSignKeyword_1_1_0_2());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRelationalExpressionRule());
	        }
       		setWithLastConsumed($current, "operator", lv_operator_2_3, null);
	    }

    |		lv_operator_2_4=	'<=' 
    {
        newLeafNode(lv_operator_2_4, grammarAccess.getRelationalExpressionAccess().getOperatorLessThanSignEqualsSignKeyword_1_1_0_3());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRelationalExpressionRule());
	        }
       		setWithLastConsumed($current, "operator", lv_operator_2_4, null);
	    }

    |		lv_operator_2_5=	'>' 
    {
        newLeafNode(lv_operator_2_5, grammarAccess.getRelationalExpressionAccess().getOperatorGreaterThanSignKeyword_1_1_0_4());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRelationalExpressionRule());
	        }
       		setWithLastConsumed($current, "operator", lv_operator_2_5, null);
	    }

    |		lv_operator_2_6=	'<' 
    {
        newLeafNode(lv_operator_2_6, grammarAccess.getRelationalExpressionAccess().getOperatorLessThanSignKeyword_1_1_0_5());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRelationalExpressionRule());
	        }
       		setWithLastConsumed($current, "operator", lv_operator_2_6, null);
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getRelationalExpressionAccess().getRightAdditiveExpressionParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleAdditiveExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelationalExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"com.avaloq.tools.ddk.xtext.expression.Expression.AdditiveExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleAdditiveExpression
entryRuleAdditiveExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAdditiveExpressionRule()); }
	 iv_ruleAdditiveExpression=ruleAdditiveExpression 
	 { $current=$iv_ruleAdditiveExpression.current; } 
	 EOF 
;

// Rule AdditiveExpression
ruleAdditiveExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAdditiveExpressionAccess().getMultiplicativeExpressionParserRuleCall_0()); 
    }
    this_MultiplicativeExpression_0=ruleMultiplicativeExpression
    { 
        $current = $this_MultiplicativeExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndAdd(
            grammarAccess.getAdditiveExpressionAccess().getOperationCallParamsAction_1_0(),
            $current);
    }
)(
(
(
		lv_name_2_1=	'+' 
    {
        newLeafNode(lv_name_2_1, grammarAccess.getAdditiveExpressionAccess().getNamePlusSignKeyword_1_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAdditiveExpressionRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_2_1, null);
	    }

    |		lv_name_2_2=	'-' 
    {
        newLeafNode(lv_name_2_2, grammarAccess.getAdditiveExpressionAccess().getNameHyphenMinusKeyword_1_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAdditiveExpressionRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_2_2, null);
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAdditiveExpressionAccess().getParamsMultiplicativeExpressionParserRuleCall_1_2_0()); 
	    }
		lv_params_3_0=ruleMultiplicativeExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAdditiveExpressionRule());
	        }
       		add(
       			$current, 
       			"params",
        		lv_params_3_0, 
        		"com.avaloq.tools.ddk.xtext.expression.Expression.MultiplicativeExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleMultiplicativeExpression
entryRuleMultiplicativeExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMultiplicativeExpressionRule()); }
	 iv_ruleMultiplicativeExpression=ruleMultiplicativeExpression 
	 { $current=$iv_ruleMultiplicativeExpression.current; } 
	 EOF 
;

// Rule MultiplicativeExpression
ruleMultiplicativeExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getUnaryOrInfixExpressionParserRuleCall_0()); 
    }
    this_UnaryOrInfixExpression_0=ruleUnaryOrInfixExpression
    { 
        $current = $this_UnaryOrInfixExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndAdd(
            grammarAccess.getMultiplicativeExpressionAccess().getOperationCallParamsAction_1_0(),
            $current);
    }
)(
(
(
		lv_name_2_1=	'*' 
    {
        newLeafNode(lv_name_2_1, grammarAccess.getMultiplicativeExpressionAccess().getNameAsteriskKeyword_1_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMultiplicativeExpressionRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_2_1, null);
	    }

    |		lv_name_2_2=	'/' 
    {
        newLeafNode(lv_name_2_2, grammarAccess.getMultiplicativeExpressionAccess().getNameSolidusKeyword_1_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMultiplicativeExpressionRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_2_2, null);
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getParamsUnaryOrInfixExpressionParserRuleCall_1_2_0()); 
	    }
		lv_params_3_0=ruleUnaryOrInfixExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultiplicativeExpressionRule());
	        }
       		add(
       			$current, 
       			"params",
        		lv_params_3_0, 
        		"com.avaloq.tools.ddk.xtext.expression.Expression.UnaryOrInfixExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleUnaryOrInfixExpression
entryRuleUnaryOrInfixExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnaryOrInfixExpressionRule()); }
	 iv_ruleUnaryOrInfixExpression=ruleUnaryOrInfixExpression 
	 { $current=$iv_ruleUnaryOrInfixExpression.current; } 
	 EOF 
;

// Rule UnaryOrInfixExpression
ruleUnaryOrInfixExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getUnaryOrInfixExpressionAccess().getUnaryExpressionParserRuleCall_0()); 
    }
    this_UnaryExpression_0=ruleUnaryExpression
    { 
        $current = $this_UnaryExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getUnaryOrInfixExpressionAccess().getInfixExpressionParserRuleCall_1()); 
    }
    this_InfixExpression_1=ruleInfixExpression
    { 
        $current = $this_InfixExpression_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleUnaryExpression
entryRuleUnaryExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnaryExpressionRule()); }
	 iv_ruleUnaryExpression=ruleUnaryExpression 
	 { $current=$iv_ruleUnaryExpression.current; } 
	 EOF 
;

// Rule UnaryExpression
ruleUnaryExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
(
		lv_name_0_1=	'!' 
    {
        newLeafNode(lv_name_0_1, grammarAccess.getUnaryExpressionAccess().getNameExclamationMarkKeyword_0_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getUnaryExpressionRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_0_1, null);
	    }

    |		lv_name_0_2=	'-' 
    {
        newLeafNode(lv_name_0_2, grammarAccess.getUnaryExpressionAccess().getNameHyphenMinusKeyword_0_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getUnaryExpressionRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_0_2, null);
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getUnaryExpressionAccess().getParamsInfixExpressionParserRuleCall_1_0()); 
	    }
		lv_params_1_0=ruleInfixExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnaryExpressionRule());
	        }
       		add(
       			$current, 
       			"params",
        		lv_params_1_0, 
        		"com.avaloq.tools.ddk.xtext.expression.Expression.InfixExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleInfixExpression
entryRuleInfixExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInfixExpressionRule()); }
	 iv_ruleInfixExpression=ruleInfixExpression 
	 { $current=$iv_ruleInfixExpression.current; } 
	 EOF 
;

// Rule InfixExpression
ruleInfixExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getInfixExpressionAccess().getPrimaryExpressionParserRuleCall_0()); 
    }
    this_PrimaryExpression_0=rulePrimaryExpression
    { 
        $current = $this_PrimaryExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
(((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getInfixExpressionAccess().getOperationCallTargetAction_1_0_0(),
            $current);
    }
)	otherlv_2='.' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getInfixExpressionAccess().getFullStopKeyword_1_0_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInfixExpressionAccess().getNameIdentifierParserRuleCall_1_0_2_0()); 
	    }
		lv_name_3_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInfixExpressionRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"com.avaloq.tools.ddk.xtext.expression.Expression.Identifier");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='(' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getInfixExpressionAccess().getLeftParenthesisKeyword_1_0_3());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getInfixExpressionAccess().getParamsExpressionParserRuleCall_1_0_4_0_0()); 
	    }
		lv_params_5_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInfixExpressionRule());
	        }
       		add(
       			$current, 
       			"params",
        		lv_params_5_0, 
        		"com.avaloq.tools.ddk.xtext.expression.Expression.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_6=',' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getInfixExpressionAccess().getCommaKeyword_1_0_4_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInfixExpressionAccess().getParamsExpressionParserRuleCall_1_0_4_1_1_0()); 
	    }
		lv_params_7_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInfixExpressionRule());
	        }
       		add(
       			$current, 
       			"params",
        		lv_params_7_0, 
        		"com.avaloq.tools.ddk.xtext.expression.Expression.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_8=')' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getInfixExpressionAccess().getRightParenthesisKeyword_1_0_5());
    }
)
    |((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getInfixExpressionAccess().getFeatureCallTargetAction_1_1_0(),
            $current);
    }
)	otherlv_10='.' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getInfixExpressionAccess().getFullStopKeyword_1_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInfixExpressionAccess().getTypeTypeParserRuleCall_1_1_2_0()); 
	    }
		lv_type_11_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInfixExpressionRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_11_0, 
        		"com.avaloq.tools.ddk.xtext.expression.Expression.Type");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getInfixExpressionAccess().getTypeSelectExpressionTargetAction_1_2_0(),
            $current);
    }
)	otherlv_13='.' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getInfixExpressionAccess().getFullStopKeyword_1_2_1());
    }
(
(
		lv_name_14_0=	'typeSelect' 
    {
        newLeafNode(lv_name_14_0, grammarAccess.getInfixExpressionAccess().getNameTypeSelectKeyword_1_2_2_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getInfixExpressionRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_14_0, "typeSelect");
	    }

)
)	otherlv_15='(' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getInfixExpressionAccess().getLeftParenthesisKeyword_1_2_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInfixExpressionAccess().getTypeTypeParserRuleCall_1_2_4_0()); 
	    }
		lv_type_16_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInfixExpressionRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_16_0, 
        		"com.avaloq.tools.ddk.xtext.expression.Expression.Type");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_17=')' 
    {
    	newLeafNode(otherlv_17, grammarAccess.getInfixExpressionAccess().getRightParenthesisKeyword_1_2_5());
    }
)
    |((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getInfixExpressionAccess().getCollectionExpressionTargetAction_1_3_0(),
            $current);
    }
)	otherlv_19='.' 
    {
    	newLeafNode(otherlv_19, grammarAccess.getInfixExpressionAccess().getFullStopKeyword_1_3_1());
    }
(
(
(
		lv_name_20_1=	'collect' 
    {
        newLeafNode(lv_name_20_1, grammarAccess.getInfixExpressionAccess().getNameCollectKeyword_1_3_2_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getInfixExpressionRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_20_1, null);
	    }

    |		lv_name_20_2=	'select' 
    {
        newLeafNode(lv_name_20_2, grammarAccess.getInfixExpressionAccess().getNameSelectKeyword_1_3_2_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getInfixExpressionRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_20_2, null);
	    }

    |		lv_name_20_3=	'selectFirst' 
    {
        newLeafNode(lv_name_20_3, grammarAccess.getInfixExpressionAccess().getNameSelectFirstKeyword_1_3_2_0_2());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getInfixExpressionRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_20_3, null);
	    }

    |		lv_name_20_4=	'reject' 
    {
        newLeafNode(lv_name_20_4, grammarAccess.getInfixExpressionAccess().getNameRejectKeyword_1_3_2_0_3());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getInfixExpressionRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_20_4, null);
	    }

    |		lv_name_20_5=	'exists' 
    {
        newLeafNode(lv_name_20_5, grammarAccess.getInfixExpressionAccess().getNameExistsKeyword_1_3_2_0_4());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getInfixExpressionRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_20_5, null);
	    }

    |		lv_name_20_6=	'notExists' 
    {
        newLeafNode(lv_name_20_6, grammarAccess.getInfixExpressionAccess().getNameNotExistsKeyword_1_3_2_0_5());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getInfixExpressionRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_20_6, null);
	    }

    |		lv_name_20_7=	'sortBy' 
    {
        newLeafNode(lv_name_20_7, grammarAccess.getInfixExpressionAccess().getNameSortByKeyword_1_3_2_0_6());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getInfixExpressionRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_20_7, null);
	    }

    |		lv_name_20_8=	'forAll' 
    {
        newLeafNode(lv_name_20_8, grammarAccess.getInfixExpressionAccess().getNameForAllKeyword_1_3_2_0_7());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getInfixExpressionRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_20_8, null);
	    }

)

)
)	otherlv_21='(' 
    {
    	newLeafNode(otherlv_21, grammarAccess.getInfixExpressionAccess().getLeftParenthesisKeyword_1_3_3());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getInfixExpressionAccess().getVarIdentifierParserRuleCall_1_3_4_0_0()); 
	    }
		lv_var_22_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInfixExpressionRule());
	        }
       		set(
       			$current, 
       			"var",
        		lv_var_22_0, 
        		"com.avaloq.tools.ddk.xtext.expression.Expression.Identifier");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_23='|' 
    {
    	newLeafNode(otherlv_23, grammarAccess.getInfixExpressionAccess().getVerticalLineKeyword_1_3_4_1());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getInfixExpressionAccess().getExpExpressionParserRuleCall_1_3_5_0()); 
	    }
		lv_exp_24_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInfixExpressionRule());
	        }
       		set(
       			$current, 
       			"exp",
        		lv_exp_24_0, 
        		"com.avaloq.tools.ddk.xtext.expression.Expression.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_25=')' 
    {
    	newLeafNode(otherlv_25, grammarAccess.getInfixExpressionAccess().getRightParenthesisKeyword_1_3_6());
    }
))*)
;





// Entry rule entryRulePrimaryExpression
entryRulePrimaryExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrimaryExpressionRule()); }
	 iv_rulePrimaryExpression=rulePrimaryExpression 
	 { $current=$iv_rulePrimaryExpression.current; } 
	 EOF 
;

// Rule PrimaryExpression
rulePrimaryExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getLiteralParserRuleCall_0()); 
    }
    this_Literal_0=ruleLiteral
    { 
        $current = $this_Literal_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getFeatureCallParserRuleCall_1()); 
    }
    this_FeatureCall_1=ruleFeatureCall
    { 
        $current = $this_FeatureCall_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getListLiteralParserRuleCall_2()); 
    }
    this_ListLiteral_2=ruleListLiteral
    { 
        $current = $this_ListLiteral_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getConstructorCallExpressionParserRuleCall_3()); 
    }
    this_ConstructorCallExpression_3=ruleConstructorCallExpression
    { 
        $current = $this_ConstructorCallExpression_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getGlobalVarExpressionParserRuleCall_4()); 
    }
    this_GlobalVarExpression_4=ruleGlobalVarExpression
    { 
        $current = $this_GlobalVarExpression_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getParanthesizedExpressionParserRuleCall_5()); 
    }
    this_ParanthesizedExpression_5=ruleParanthesizedExpression
    { 
        $current = $this_ParanthesizedExpression_5.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleLiteral
entryRuleLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLiteralRule()); }
	 iv_ruleLiteral=ruleLiteral 
	 { $current=$iv_ruleLiteral.current; } 
	 EOF 
;

// Rule Literal
ruleLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getLiteralAccess().getBooleanLiteralParserRuleCall_0()); 
    }
    this_BooleanLiteral_0=ruleBooleanLiteral
    { 
        $current = $this_BooleanLiteral_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getLiteralAccess().getIntegerLiteralParserRuleCall_1()); 
    }
    this_IntegerLiteral_1=ruleIntegerLiteral
    { 
        $current = $this_IntegerLiteral_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getLiteralAccess().getNullLiteralParserRuleCall_2()); 
    }
    this_NullLiteral_2=ruleNullLiteral
    { 
        $current = $this_NullLiteral_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getLiteralAccess().getRealLiteralParserRuleCall_3()); 
    }
    this_RealLiteral_3=ruleRealLiteral
    { 
        $current = $this_RealLiteral_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getLiteralAccess().getStringLiteralParserRuleCall_4()); 
    }
    this_StringLiteral_4=ruleStringLiteral
    { 
        $current = $this_StringLiteral_4.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleBooleanLiteral
entryRuleBooleanLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBooleanLiteralRule()); }
	 iv_ruleBooleanLiteral=ruleBooleanLiteral 
	 { $current=$iv_ruleBooleanLiteral.current; } 
	 EOF 
;

// Rule BooleanLiteral
ruleBooleanLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
(
		lv_val_0_1=	'true' 
    {
        newLeafNode(lv_val_0_1, grammarAccess.getBooleanLiteralAccess().getValTrueKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBooleanLiteralRule());
	        }
       		setWithLastConsumed($current, "val", lv_val_0_1, null);
	    }

    |		lv_val_0_2=	'false' 
    {
        newLeafNode(lv_val_0_2, grammarAccess.getBooleanLiteralAccess().getValFalseKeyword_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBooleanLiteralRule());
	        }
       		setWithLastConsumed($current, "val", lv_val_0_2, null);
	    }

)

)
)
;





// Entry rule entryRuleIntegerLiteral
entryRuleIntegerLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIntegerLiteralRule()); }
	 iv_ruleIntegerLiteral=ruleIntegerLiteral 
	 { $current=$iv_ruleIntegerLiteral.current; } 
	 EOF 
;

// Rule IntegerLiteral
ruleIntegerLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_val_0_0=RULE_INT
		{
			newLeafNode(lv_val_0_0, grammarAccess.getIntegerLiteralAccess().getValINTTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIntegerLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"val",
        		lv_val_0_0, 
        		"org.eclipse.xtext.common.Terminals.INT");
	    }

)
)
;





// Entry rule entryRuleNullLiteral
entryRuleNullLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNullLiteralRule()); }
	 iv_ruleNullLiteral=ruleNullLiteral 
	 { $current=$iv_ruleNullLiteral.current; } 
	 EOF 
;

// Rule NullLiteral
ruleNullLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_val_0_0=	'null' 
    {
        newLeafNode(lv_val_0_0, grammarAccess.getNullLiteralAccess().getValNullKeyword_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNullLiteralRule());
	        }
       		setWithLastConsumed($current, "val", lv_val_0_0, "null");
	    }

)
)
;





// Entry rule entryRuleRealLiteral
entryRuleRealLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRealLiteralRule()); }
	 iv_ruleRealLiteral=ruleRealLiteral 
	 { $current=$iv_ruleRealLiteral.current; } 
	 EOF 
;

// Rule RealLiteral
ruleRealLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_val_0_0=RULE_REAL
		{
			newLeafNode(lv_val_0_0, grammarAccess.getRealLiteralAccess().getValREALTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRealLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"val",
        		lv_val_0_0, 
        		"com.avaloq.tools.ddk.xtext.expression.Expression.REAL");
	    }

)
)
;





// Entry rule entryRuleStringLiteral
entryRuleStringLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStringLiteralRule()); }
	 iv_ruleStringLiteral=ruleStringLiteral 
	 { $current=$iv_ruleStringLiteral.current; } 
	 EOF 
;

// Rule StringLiteral
ruleStringLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_val_0_0=RULE_STRING
		{
			newLeafNode(lv_val_0_0, grammarAccess.getStringLiteralAccess().getValSTRINGTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStringLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"val",
        		lv_val_0_0, 
        		"org.eclipse.xtext.common.Terminals.STRING");
	    }

)
)
;





// Entry rule entryRuleParanthesizedExpression
entryRuleParanthesizedExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParanthesizedExpressionRule()); }
	 iv_ruleParanthesizedExpression=ruleParanthesizedExpression 
	 { $current=$iv_ruleParanthesizedExpression.current; } 
	 EOF 
;

// Rule ParanthesizedExpression
ruleParanthesizedExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getParanthesizedExpressionAccess().getLeftParenthesisKeyword_0());
    }

    { 
        newCompositeNode(grammarAccess.getParanthesizedExpressionAccess().getExpressionParserRuleCall_1()); 
    }
    this_Expression_1=ruleExpression
    { 
        $current = $this_Expression_1.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_2=')' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getParanthesizedExpressionAccess().getRightParenthesisKeyword_2());
    }
)
;





// Entry rule entryRuleGlobalVarExpression
entryRuleGlobalVarExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGlobalVarExpressionRule()); }
	 iv_ruleGlobalVarExpression=ruleGlobalVarExpression 
	 { $current=$iv_ruleGlobalVarExpression.current; } 
	 EOF 
;

// Rule GlobalVarExpression
ruleGlobalVarExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='GLOBALVAR' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getGlobalVarExpressionAccess().getGLOBALVARKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getGlobalVarExpressionAccess().getNameIdentifierParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGlobalVarExpressionRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"com.avaloq.tools.ddk.xtext.expression.Expression.Identifier");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleFeatureCall
entryRuleFeatureCall returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFeatureCallRule()); }
	 iv_ruleFeatureCall=ruleFeatureCall 
	 { $current=$iv_ruleFeatureCall.current; } 
	 EOF 
;

// Rule FeatureCall
ruleFeatureCall returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getFeatureCallAccess().getOperationCallParserRuleCall_0()); 
    }
    this_OperationCall_0=ruleOperationCall
    { 
        $current = $this_OperationCall_0.current; 
        afterParserOrEnumRuleCall();
    }

    |(
(
		{ 
	        newCompositeNode(grammarAccess.getFeatureCallAccess().getTypeTypeParserRuleCall_1_0()); 
	    }
		lv_type_1_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFeatureCallRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_1_0, 
        		"com.avaloq.tools.ddk.xtext.expression.Expression.Type");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |
    { 
        newCompositeNode(grammarAccess.getFeatureCallAccess().getCollectionExpressionParserRuleCall_2()); 
    }
    this_CollectionExpression_2=ruleCollectionExpression
    { 
        $current = $this_CollectionExpression_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getFeatureCallAccess().getTypeSelectExpressionParserRuleCall_3()); 
    }
    this_TypeSelectExpression_3=ruleTypeSelectExpression
    { 
        $current = $this_TypeSelectExpression_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleOperationCall
entryRuleOperationCall returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOperationCallRule()); }
	 iv_ruleOperationCall=ruleOperationCall 
	 { $current=$iv_ruleOperationCall.current; } 
	 EOF 
;

// Rule OperationCall
ruleOperationCall returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getOperationCallAccess().getNameIdentifierParserRuleCall_0_0()); 
	    }
		lv_name_0_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOperationCallRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"com.avaloq.tools.ddk.xtext.expression.Expression.Identifier");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getOperationCallAccess().getLeftParenthesisKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getOperationCallAccess().getParamsExpressionParserRuleCall_2_0_0()); 
	    }
		lv_params_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOperationCallRule());
	        }
       		add(
       			$current, 
       			"params",
        		lv_params_2_0, 
        		"com.avaloq.tools.ddk.xtext.expression.Expression.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getOperationCallAccess().getCommaKeyword_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOperationCallAccess().getParamsExpressionParserRuleCall_2_1_1_0()); 
	    }
		lv_params_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOperationCallRule());
	        }
       		add(
       			$current, 
       			"params",
        		lv_params_4_0, 
        		"com.avaloq.tools.ddk.xtext.expression.Expression.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getOperationCallAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleListLiteral
entryRuleListLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getListLiteralRule()); }
	 iv_ruleListLiteral=ruleListLiteral 
	 { $current=$iv_ruleListLiteral.current; } 
	 EOF 
;

// Rule ListLiteral
ruleListLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getListLiteralAccess().getListLiteralAction_0(),
            $current);
    }
)	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getListLiteralAccess().getLeftCurlyBracketKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getListLiteralAccess().getElementsExpressionParserRuleCall_2_0_0()); 
	    }
		lv_elements_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getListLiteralRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_2_0, 
        		"com.avaloq.tools.ddk.xtext.expression.Expression.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getListLiteralAccess().getCommaKeyword_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getListLiteralAccess().getElementsExpressionParserRuleCall_2_1_1_0()); 
	    }
		lv_elements_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getListLiteralRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_4_0, 
        		"com.avaloq.tools.ddk.xtext.expression.Expression.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getListLiteralAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRuleConstructorCallExpression
entryRuleConstructorCallExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstructorCallExpressionRule()); }
	 iv_ruleConstructorCallExpression=ruleConstructorCallExpression 
	 { $current=$iv_ruleConstructorCallExpression.current; } 
	 EOF 
;

// Rule ConstructorCallExpression
ruleConstructorCallExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='new' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getConstructorCallExpressionAccess().getNewKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConstructorCallExpressionAccess().getTypeSimpleTypeParserRuleCall_1_0()); 
	    }
		lv_type_1_0=ruleSimpleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstructorCallExpressionRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_1_0, 
        		"com.avaloq.tools.ddk.xtext.expression.Expression.SimpleType");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleTypeSelectExpression
entryRuleTypeSelectExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeSelectExpressionRule()); }
	 iv_ruleTypeSelectExpression=ruleTypeSelectExpression 
	 { $current=$iv_ruleTypeSelectExpression.current; } 
	 EOF 
;

// Rule TypeSelectExpression
ruleTypeSelectExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=	'typeSelect' 
    {
        newLeafNode(lv_name_0_0, grammarAccess.getTypeSelectExpressionAccess().getNameTypeSelectKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeSelectExpressionRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_0_0, "typeSelect");
	    }

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTypeSelectExpressionAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeSelectExpressionAccess().getTypeTypeParserRuleCall_2_0()); 
	    }
		lv_type_2_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeSelectExpressionRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"com.avaloq.tools.ddk.xtext.expression.Expression.Type");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTypeSelectExpressionAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleCollectionExpression
entryRuleCollectionExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCollectionExpressionRule()); }
	 iv_ruleCollectionExpression=ruleCollectionExpression 
	 { $current=$iv_ruleCollectionExpression.current; } 
	 EOF 
;

// Rule CollectionExpression
ruleCollectionExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
(
		lv_name_0_1=	'collect' 
    {
        newLeafNode(lv_name_0_1, grammarAccess.getCollectionExpressionAccess().getNameCollectKeyword_0_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCollectionExpressionRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_0_1, null);
	    }

    |		lv_name_0_2=	'select' 
    {
        newLeafNode(lv_name_0_2, grammarAccess.getCollectionExpressionAccess().getNameSelectKeyword_0_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCollectionExpressionRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_0_2, null);
	    }

    |		lv_name_0_3=	'selectFirst' 
    {
        newLeafNode(lv_name_0_3, grammarAccess.getCollectionExpressionAccess().getNameSelectFirstKeyword_0_0_2());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCollectionExpressionRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_0_3, null);
	    }

    |		lv_name_0_4=	'reject' 
    {
        newLeafNode(lv_name_0_4, grammarAccess.getCollectionExpressionAccess().getNameRejectKeyword_0_0_3());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCollectionExpressionRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_0_4, null);
	    }

    |		lv_name_0_5=	'exists' 
    {
        newLeafNode(lv_name_0_5, grammarAccess.getCollectionExpressionAccess().getNameExistsKeyword_0_0_4());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCollectionExpressionRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_0_5, null);
	    }

    |		lv_name_0_6=	'notExists' 
    {
        newLeafNode(lv_name_0_6, grammarAccess.getCollectionExpressionAccess().getNameNotExistsKeyword_0_0_5());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCollectionExpressionRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_0_6, null);
	    }

    |		lv_name_0_7=	'sortBy' 
    {
        newLeafNode(lv_name_0_7, grammarAccess.getCollectionExpressionAccess().getNameSortByKeyword_0_0_6());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCollectionExpressionRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_0_7, null);
	    }

    |		lv_name_0_8=	'forAll' 
    {
        newLeafNode(lv_name_0_8, grammarAccess.getCollectionExpressionAccess().getNameForAllKeyword_0_0_7());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCollectionExpressionRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_0_8, null);
	    }

)

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getCollectionExpressionAccess().getLeftParenthesisKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getCollectionExpressionAccess().getVarIdentifierParserRuleCall_2_0_0()); 
	    }
		lv_var_2_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCollectionExpressionRule());
	        }
       		set(
       			$current, 
       			"var",
        		lv_var_2_0, 
        		"com.avaloq.tools.ddk.xtext.expression.Expression.Identifier");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='|' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getCollectionExpressionAccess().getVerticalLineKeyword_2_1());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getCollectionExpressionAccess().getExpExpressionParserRuleCall_3_0()); 
	    }
		lv_exp_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCollectionExpressionRule());
	        }
       		set(
       			$current, 
       			"exp",
        		lv_exp_4_0, 
        		"com.avaloq.tools.ddk.xtext.expression.Expression.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getCollectionExpressionAccess().getRightParenthesisKeyword_4());
    }
)
;





// Entry rule entryRuleType
entryRuleType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	 iv_ruleType=ruleType 
	 { $current=$iv_ruleType.current; } 
	 EOF 
;

// Rule Type
ruleType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getTypeAccess().getCollectionTypeParserRuleCall_0()); 
    }
    this_CollectionType_0=ruleCollectionType
    { 
        $current = $this_CollectionType_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTypeAccess().getSimpleTypeParserRuleCall_1()); 
    }
    this_SimpleType_1=ruleSimpleType
    { 
        $current = $this_SimpleType_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleCollectionType
entryRuleCollectionType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCollectionTypeRule()); }
	 iv_ruleCollectionType=ruleCollectionType 
	 { $current=$iv_ruleCollectionType.current; } 
	 EOF 
;

// Rule CollectionType
ruleCollectionType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
(
		lv_cl_0_1=	'Collection' 
    {
        newLeafNode(lv_cl_0_1, grammarAccess.getCollectionTypeAccess().getClCollectionKeyword_0_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCollectionTypeRule());
	        }
       		setWithLastConsumed($current, "cl", lv_cl_0_1, null);
	    }

    |		lv_cl_0_2=	'List' 
    {
        newLeafNode(lv_cl_0_2, grammarAccess.getCollectionTypeAccess().getClListKeyword_0_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCollectionTypeRule());
	        }
       		setWithLastConsumed($current, "cl", lv_cl_0_2, null);
	    }

    |		lv_cl_0_3=	'Set' 
    {
        newLeafNode(lv_cl_0_3, grammarAccess.getCollectionTypeAccess().getClSetKeyword_0_0_2());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCollectionTypeRule());
	        }
       		setWithLastConsumed($current, "cl", lv_cl_0_3, null);
	    }

)

)
)	otherlv_1='[' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getCollectionTypeAccess().getLeftSquareBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCollectionTypeAccess().getId1SimpleTypeParserRuleCall_2_0()); 
	    }
		lv_id1_2_0=ruleSimpleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCollectionTypeRule());
	        }
       		set(
       			$current, 
       			"id1",
        		lv_id1_2_0, 
        		"com.avaloq.tools.ddk.xtext.expression.Expression.SimpleType");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=']' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getCollectionTypeAccess().getRightSquareBracketKeyword_3());
    }
)
;





// Entry rule entryRuleSimpleType
entryRuleSimpleType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSimpleTypeRule()); }
	 iv_ruleSimpleType=ruleSimpleType 
	 { $current=$iv_ruleSimpleType.current; } 
	 EOF 
;

// Rule SimpleType
ruleSimpleType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getSimpleTypeAccess().getIdIdentifierParserRuleCall_0_0()); 
	    }
		lv_id_0_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSimpleTypeRule());
	        }
       		add(
       			$current, 
       			"id",
        		lv_id_0_0, 
        		"com.avaloq.tools.ddk.xtext.expression.Expression.Identifier");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='::' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSimpleTypeAccess().getColonColonKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSimpleTypeAccess().getIdIdentifierParserRuleCall_1_1_0()); 
	    }
		lv_id_2_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSimpleTypeRule());
	        }
       		add(
       			$current, 
       			"id",
        		lv_id_2_0, 
        		"com.avaloq.tools.ddk.xtext.expression.Expression.Identifier");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleIdentifier
entryRuleIdentifier returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getIdentifierRule()); } 
	 iv_ruleIdentifier=ruleIdentifier 
	 { $current=$iv_ruleIdentifier.current.getText(); }  
	 EOF 
;

// Rule Identifier
ruleIdentifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getIdentifierAccess().getIDTerminalRuleCall()); 
    }

    ;





RULE_REAL : ('0'..'9')* '.' ('0'..'9')*;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


