/*
 * generated by Xtext
 */
package com.avaloq.tools.ddk.xtext.export.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import com.avaloq.tools.ddk.xtext.expression.services.ExpressionGrammarAccess;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class ExportGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ExportModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.avaloq.tools.ddk.xtext.export.Export.ExportModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cExportKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cExtensionAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Keyword cExtensionExtensionKeyword_0_1_0 = (Keyword)cExtensionAssignment_0_1.eContents().get(0);
		private final Assignment cNameAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_0_2_0 = (RuleCall)cNameAssignment_0_2.eContents().get(0);
		private final Keyword cForKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Assignment cTargetGrammarAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final CrossReference cTargetGrammarGrammarCrossReference_0_4_0 = (CrossReference)cTargetGrammarAssignment_0_4.eContents().get(0);
		private final RuleCall cTargetGrammarGrammarQualifiedIDParserRuleCall_0_4_0_1 = (RuleCall)cTargetGrammarGrammarCrossReference_0_4_0.eContents().get(1);
		private final Assignment cImportsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportsImportParserRuleCall_1_0 = (RuleCall)cImportsAssignment_1.eContents().get(0);
		private final Assignment cExtensionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExtensionsExtensionParserRuleCall_2_0 = (RuleCall)cExtensionsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cInterfaceKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cInterfacesAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cInterfacesInterfaceParserRuleCall_3_2_0 = (RuleCall)cInterfacesAssignment_3_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Assignment cExportsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExportsExportParserRuleCall_4_0 = (RuleCall)cExportsAssignment_4.eContents().get(0);
		
		//ExportModel:
		//	('export' extension?='extension'? name=ID 'for' targetGrammar=[xtext::Grammar|QualifiedID])? imports+=Import+
		//	extensions+=Extension* ('interface' '{' interfaces+=Interface+ '}')? exports+=Export+;
		@Override public ParserRule getRule() { return rule; }

		//('export' extension?='extension'? name=ID 'for' targetGrammar=[xtext::Grammar|QualifiedID])? imports+=Import+
		//extensions+=Extension* ('interface' '{' interfaces+=Interface+ '}')? exports+=Export+
		public Group getGroup() { return cGroup; }

		//('export' extension?='extension'? name=ID 'for' targetGrammar=[xtext::Grammar|QualifiedID])?
		public Group getGroup_0() { return cGroup_0; }

		//'export'
		public Keyword getExportKeyword_0_0() { return cExportKeyword_0_0; }

		//extension?='extension'?
		public Assignment getExtensionAssignment_0_1() { return cExtensionAssignment_0_1; }

		//'extension'
		public Keyword getExtensionExtensionKeyword_0_1_0() { return cExtensionExtensionKeyword_0_1_0; }

		//name=ID
		public Assignment getNameAssignment_0_2() { return cNameAssignment_0_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_2_0() { return cNameIDTerminalRuleCall_0_2_0; }

		//'for'
		public Keyword getForKeyword_0_3() { return cForKeyword_0_3; }

		//targetGrammar=[xtext::Grammar|QualifiedID]
		public Assignment getTargetGrammarAssignment_0_4() { return cTargetGrammarAssignment_0_4; }

		//[xtext::Grammar|QualifiedID]
		public CrossReference getTargetGrammarGrammarCrossReference_0_4_0() { return cTargetGrammarGrammarCrossReference_0_4_0; }

		//QualifiedID
		public RuleCall getTargetGrammarGrammarQualifiedIDParserRuleCall_0_4_0_1() { return cTargetGrammarGrammarQualifiedIDParserRuleCall_0_4_0_1; }

		//imports+=Import+
		public Assignment getImportsAssignment_1() { return cImportsAssignment_1; }

		//Import
		public RuleCall getImportsImportParserRuleCall_1_0() { return cImportsImportParserRuleCall_1_0; }

		//extensions+=Extension*
		public Assignment getExtensionsAssignment_2() { return cExtensionsAssignment_2; }

		//Extension
		public RuleCall getExtensionsExtensionParserRuleCall_2_0() { return cExtensionsExtensionParserRuleCall_2_0; }

		//('interface' '{' interfaces+=Interface+ '}')?
		public Group getGroup_3() { return cGroup_3; }

		//'interface'
		public Keyword getInterfaceKeyword_3_0() { return cInterfaceKeyword_3_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_1() { return cLeftCurlyBracketKeyword_3_1; }

		//interfaces+=Interface+
		public Assignment getInterfacesAssignment_3_2() { return cInterfacesAssignment_3_2; }

		//Interface
		public RuleCall getInterfacesInterfaceParserRuleCall_3_2_0() { return cInterfacesInterfaceParserRuleCall_3_2_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_3_3() { return cRightCurlyBracketKeyword_3_3; }

		//exports+=Export+
		public Assignment getExportsAssignment_4() { return cExportsAssignment_4; }

		//Export
		public RuleCall getExportsExportParserRuleCall_4_0() { return cExportsExportParserRuleCall_4_0; }
	}

	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.avaloq.tools.ddk.xtext.export.Export.Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPackageAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cPackageEPackageCrossReference_1_0 = (CrossReference)cPackageAssignment_1.eContents().get(0);
		private final RuleCall cPackageEPackageSTRINGTerminalRuleCall_1_0_1 = (RuleCall)cPackageEPackageCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cAsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cNameAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_2_1_0 = (RuleCall)cNameAssignment_2_1.eContents().get(0);
		
		//Import:
		//	'import' package=[ecore::EPackage|STRING] ('as' name=ID)? // Use nsURIs
		//;
		@Override public ParserRule getRule() { return rule; }

		//'import' package=[ecore::EPackage|STRING] ('as' name=ID)?
		public Group getGroup() { return cGroup; }

		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//package=[ecore::EPackage|STRING]
		public Assignment getPackageAssignment_1() { return cPackageAssignment_1; }

		//[ecore::EPackage|STRING]
		public CrossReference getPackageEPackageCrossReference_1_0() { return cPackageEPackageCrossReference_1_0; }

		//STRING
		public RuleCall getPackageEPackageSTRINGTerminalRuleCall_1_0_1() { return cPackageEPackageSTRINGTerminalRuleCall_1_0_1; }

		//('as' name=ID)?
		public Group getGroup_2() { return cGroup_2; }

		//'as'
		public Keyword getAsKeyword_2_0() { return cAsKeyword_2_0; }

		//name=ID
		public Assignment getNameAssignment_2_1() { return cNameAssignment_2_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_1_0() { return cNameIDTerminalRuleCall_2_1_0; }
	}

	public class ExtensionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.avaloq.tools.ddk.xtext.export.Export.Extension");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExtensionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExtensionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExtensionQualifiedIDParserRuleCall_1_0 = (RuleCall)cExtensionAssignment_1.eContents().get(0);
		
		//Extension:
		//	'extension' extension=QualifiedID // Alas, we can't link xtend files. Maybe simply as EResources?
		//;
		@Override public ParserRule getRule() { return rule; }

		//'extension' extension=QualifiedID
		public Group getGroup() { return cGroup; }

		//'extension'
		public Keyword getExtensionKeyword_0() { return cExtensionKeyword_0; }

		//extension=QualifiedID
		public Assignment getExtensionAssignment_1() { return cExtensionAssignment_1; }

		//QualifiedID
		public RuleCall getExtensionQualifiedIDParserRuleCall_1_0() { return cExtensionQualifiedIDParserRuleCall_1_0; }
	}

	public class DeclarationForTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.avaloq.tools.ddk.xtext.export.Export.DeclarationForType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInterfaceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExportParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//DeclarationForType:
		//	Interface | Export;
		@Override public ParserRule getRule() { return rule; }

		//Interface | Export
		public Alternatives getAlternatives() { return cAlternatives; }

		//Interface
		public RuleCall getInterfaceParserRuleCall_0() { return cInterfaceParserRuleCall_0; }

		//Export
		public RuleCall getExportParserRuleCall_1() { return cExportParserRuleCall_1; }
	}

	public class InterfaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.avaloq.tools.ddk.xtext.export.Export.Interface");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTypeEClassCrossReference_0_0 = (CrossReference)cTypeAssignment_0.eContents().get(0);
		private final RuleCall cTypeEClassQualifiedIDParserRuleCall_0_0_1 = (RuleCall)cTypeEClassCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cGuardAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cGuardExpressionParserRuleCall_1_1_0 = (RuleCall)cGuardAssignment_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cItemsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cItemsInterfaceItemParserRuleCall_2_1_0 = (RuleCall)cItemsAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cItemsAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cItemsInterfaceItemParserRuleCall_2_2_1_0 = (RuleCall)cItemsAssignment_2_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Interface:
		//	type=[ecore::EClass|QualifiedID] ('[' guard=Expression ']')? ('=' items+=InterfaceItem (',' items+=InterfaceItem)*)*
		//	';';
		@Override public ParserRule getRule() { return rule; }

		//type=[ecore::EClass|QualifiedID] ('[' guard=Expression ']')? ('=' items+=InterfaceItem (',' items+=InterfaceItem)*)* ';'
		public Group getGroup() { return cGroup; }

		//type=[ecore::EClass|QualifiedID]
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//[ecore::EClass|QualifiedID]
		public CrossReference getTypeEClassCrossReference_0_0() { return cTypeEClassCrossReference_0_0; }

		//QualifiedID
		public RuleCall getTypeEClassQualifiedIDParserRuleCall_0_0_1() { return cTypeEClassQualifiedIDParserRuleCall_0_0_1; }

		//('[' guard=Expression ']')?
		public Group getGroup_1() { return cGroup_1; }

		//'['
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }

		//guard=Expression
		public Assignment getGuardAssignment_1_1() { return cGuardAssignment_1_1; }

		//Expression
		public RuleCall getGuardExpressionParserRuleCall_1_1_0() { return cGuardExpressionParserRuleCall_1_1_0; }

		//']'
		public Keyword getRightSquareBracketKeyword_1_2() { return cRightSquareBracketKeyword_1_2; }

		//('=' items+=InterfaceItem (',' items+=InterfaceItem)*)*
		public Group getGroup_2() { return cGroup_2; }

		//'='
		public Keyword getEqualsSignKeyword_2_0() { return cEqualsSignKeyword_2_0; }

		//items+=InterfaceItem
		public Assignment getItemsAssignment_2_1() { return cItemsAssignment_2_1; }

		//InterfaceItem
		public RuleCall getItemsInterfaceItemParserRuleCall_2_1_0() { return cItemsInterfaceItemParserRuleCall_2_1_0; }

		//(',' items+=InterfaceItem)*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//','
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }

		//items+=InterfaceItem
		public Assignment getItemsAssignment_2_2_1() { return cItemsAssignment_2_2_1; }

		//InterfaceItem
		public RuleCall getItemsInterfaceItemParserRuleCall_2_2_1_0() { return cItemsInterfaceItemParserRuleCall_2_2_1_0; }

		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class InterfaceItemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.avaloq.tools.ddk.xtext.export.Export.InterfaceItem");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInterfaceFieldParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cInterfaceNavigationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cInterfaceExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//InterfaceItem:
		//	InterfaceField | InterfaceNavigation | InterfaceExpression;
		@Override public ParserRule getRule() { return rule; }

		//InterfaceField | InterfaceNavigation | InterfaceExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//InterfaceField
		public RuleCall getInterfaceFieldParserRuleCall_0() { return cInterfaceFieldParserRuleCall_0; }

		//InterfaceNavigation
		public RuleCall getInterfaceNavigationParserRuleCall_1() { return cInterfaceNavigationParserRuleCall_1; }

		//InterfaceExpression
		public RuleCall getInterfaceExpressionParserRuleCall_2() { return cInterfaceExpressionParserRuleCall_2; }
	}

	public class InterfaceFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.avaloq.tools.ddk.xtext.export.Export.InterfaceField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cUnorderedAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cUnorderedPlusSignKeyword_0_0 = (Keyword)cUnorderedAssignment_0.eContents().get(0);
		private final Assignment cFieldAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cFieldEStructuralFeatureCrossReference_1_0 = (CrossReference)cFieldAssignment_1.eContents().get(0);
		private final RuleCall cFieldEStructuralFeatureIDTerminalRuleCall_1_0_1 = (RuleCall)cFieldEStructuralFeatureCrossReference_1_0.eContents().get(1);
		
		//InterfaceField:
		//	unordered?='+'? field=[ecore::EStructuralFeature];
		@Override public ParserRule getRule() { return rule; }

		//unordered?='+'? field=[ecore::EStructuralFeature]
		public Group getGroup() { return cGroup; }

		//unordered?='+'?
		public Assignment getUnorderedAssignment_0() { return cUnorderedAssignment_0; }

		//'+'
		public Keyword getUnorderedPlusSignKeyword_0_0() { return cUnorderedPlusSignKeyword_0_0; }

		//field=[ecore::EStructuralFeature]
		public Assignment getFieldAssignment_1() { return cFieldAssignment_1; }

		//[ecore::EStructuralFeature]
		public CrossReference getFieldEStructuralFeatureCrossReference_1_0() { return cFieldEStructuralFeatureCrossReference_1_0; }

		//ID
		public RuleCall getFieldEStructuralFeatureIDTerminalRuleCall_1_0_1() { return cFieldEStructuralFeatureIDTerminalRuleCall_1_0_1; }
	}

	public class InterfaceNavigationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.avaloq.tools.ddk.xtext.export.Export.InterfaceNavigation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommercialAtKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cUnorderedAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cUnorderedPlusSignKeyword_1_0 = (Keyword)cUnorderedAssignment_1.eContents().get(0);
		private final Assignment cRefAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cRefEReferenceCrossReference_2_0 = (CrossReference)cRefAssignment_2.eContents().get(0);
		private final RuleCall cRefEReferenceIDTerminalRuleCall_2_0_1 = (RuleCall)cRefEReferenceCrossReference_2_0.eContents().get(1);
		
		//InterfaceNavigation:
		//	'@' unordered?='+'? ref=[ecore::EReference];
		@Override public ParserRule getRule() { return rule; }

		//'@' unordered?='+'? ref=[ecore::EReference]
		public Group getGroup() { return cGroup; }

		//'@'
		public Keyword getCommercialAtKeyword_0() { return cCommercialAtKeyword_0; }

		//unordered?='+'?
		public Assignment getUnorderedAssignment_1() { return cUnorderedAssignment_1; }

		//'+'
		public Keyword getUnorderedPlusSignKeyword_1_0() { return cUnorderedPlusSignKeyword_1_0; }

		//ref=[ecore::EReference]
		public Assignment getRefAssignment_2() { return cRefAssignment_2; }

		//[ecore::EReference]
		public CrossReference getRefEReferenceCrossReference_2_0() { return cRefEReferenceCrossReference_2_0; }

		//ID
		public RuleCall getRefEReferenceIDTerminalRuleCall_2_0_1() { return cRefEReferenceIDTerminalRuleCall_2_0_1; }
	}

	public class InterfaceExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.avaloq.tools.ddk.xtext.export.Export.InterfaceExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEvalKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cRefCommercialAtKeyword_1_0 = (Keyword)cRefAssignment_1.eContents().get(0);
		private final Assignment cUnorderedAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cUnorderedPlusSignKeyword_2_0 = (Keyword)cUnorderedAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExprAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExprExpressionParserRuleCall_4_0 = (RuleCall)cExprAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//InterfaceExpression:
		//	'eval' ref?='@'? unordered?='+'? '(' expr=Expression ')';
		@Override public ParserRule getRule() { return rule; }

		//'eval' ref?='@'? unordered?='+'? '(' expr=Expression ')'
		public Group getGroup() { return cGroup; }

		//'eval'
		public Keyword getEvalKeyword_0() { return cEvalKeyword_0; }

		//ref?='@'?
		public Assignment getRefAssignment_1() { return cRefAssignment_1; }

		//'@'
		public Keyword getRefCommercialAtKeyword_1_0() { return cRefCommercialAtKeyword_1_0; }

		//unordered?='+'?
		public Assignment getUnorderedAssignment_2() { return cUnorderedAssignment_2; }

		//'+'
		public Keyword getUnorderedPlusSignKeyword_2_0() { return cUnorderedPlusSignKeyword_2_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//expr=Expression
		public Assignment getExprAssignment_4() { return cExprAssignment_4; }

		//Expression
		public RuleCall getExprExpressionParserRuleCall_4_0() { return cExprExpressionParserRuleCall_4_0; }

		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}

	public class ExportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.avaloq.tools.ddk.xtext.export.Export.Export");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cLookupAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cLookupLookupKeyword_1_0_0 = (Keyword)cLookupAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cLookupPredicateAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cLookupPredicateExpressionParserRuleCall_1_1_1_0 = (RuleCall)cLookupPredicateAssignment_1_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTypeEClassCrossReference_2_0 = (CrossReference)cTypeAssignment_2.eContents().get(0);
		private final RuleCall cTypeEClassQualifiedIDParserRuleCall_2_0_1 = (RuleCall)cTypeEClassCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cAsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cQualifiedNameAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final Keyword cQualifiedNameQualifiedKeyword_3_1_0 = (Keyword)cQualifiedNameAssignment_3_1.eContents().get(0);
		private final Assignment cNamingAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cNamingExpressionParserRuleCall_3_2_0 = (RuleCall)cNamingAssignment_3_2.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftSquareBracketKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cGuardAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cGuardExpressionParserRuleCall_4_1_0 = (RuleCall)cGuardAssignment_4_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cUriFragmentKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cEqualsSignKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cFragmentUniqueAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final Keyword cFragmentUniqueUniqueKeyword_6_2_0 = (Keyword)cFragmentUniqueAssignment_6_2.eContents().get(0);
		private final Keyword cAttributeKeyword_6_3 = (Keyword)cGroup_6.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_6_4 = (Keyword)cGroup_6.eContents().get(4);
		private final Assignment cFragmentAttributeAssignment_6_5 = (Assignment)cGroup_6.eContents().get(5);
		private final CrossReference cFragmentAttributeEAttributeCrossReference_6_5_0 = (CrossReference)cFragmentAttributeAssignment_6_5.eContents().get(0);
		private final RuleCall cFragmentAttributeEAttributeIDTerminalRuleCall_6_5_0_1 = (RuleCall)cFragmentAttributeEAttributeCrossReference_6_5_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_6_6 = (Keyword)cGroup_6.eContents().get(6);
		private final Keyword cSemicolonKeyword_6_7 = (Keyword)cGroup_6.eContents().get(7);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Alternatives cAlternatives_7_0 = (Alternatives)cGroup_7.eContents().get(0);
		private final Assignment cFingerprintAssignment_7_0_0 = (Assignment)cAlternatives_7_0.eContents().get(0);
		private final Keyword cFingerprintObjectFingerprintKeyword_7_0_0_0 = (Keyword)cFingerprintAssignment_7_0_0.eContents().get(0);
		private final Assignment cResourceFingerprintAssignment_7_0_1 = (Assignment)cAlternatives_7_0.eContents().get(1);
		private final Keyword cResourceFingerprintResourceFingerprintKeyword_7_0_1_0 = (Keyword)cResourceFingerprintAssignment_7_0_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Alternatives cAlternatives_8 = (Alternatives)cGroup.eContents().get(8);
		private final Group cGroup_8_0 = (Group)cAlternatives_8.eContents().get(0);
		private final Keyword cFieldKeyword_8_0_0 = (Keyword)cGroup_8_0.eContents().get(0);
		private final Assignment cAttributesAssignment_8_0_1 = (Assignment)cGroup_8_0.eContents().get(1);
		private final RuleCall cAttributesAttributeParserRuleCall_8_0_1_0 = (RuleCall)cAttributesAssignment_8_0_1.eContents().get(0);
		private final Group cGroup_8_0_2 = (Group)cGroup_8_0.eContents().get(2);
		private final Keyword cCommaKeyword_8_0_2_0 = (Keyword)cGroup_8_0_2.eContents().get(0);
		private final Assignment cAttributesAssignment_8_0_2_1 = (Assignment)cGroup_8_0_2.eContents().get(1);
		private final RuleCall cAttributesAttributeParserRuleCall_8_0_2_1_0 = (RuleCall)cAttributesAssignment_8_0_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_8_0_3 = (Keyword)cGroup_8_0.eContents().get(3);
		private final Group cGroup_8_1 = (Group)cAlternatives_8.eContents().get(1);
		private final Keyword cDataKeyword_8_1_0 = (Keyword)cGroup_8_1.eContents().get(0);
		private final Assignment cUserDataAssignment_8_1_1 = (Assignment)cGroup_8_1.eContents().get(1);
		private final RuleCall cUserDataUserDataParserRuleCall_8_1_1_0 = (RuleCall)cUserDataAssignment_8_1_1.eContents().get(0);
		private final Group cGroup_8_1_2 = (Group)cGroup_8_1.eContents().get(2);
		private final Keyword cCommaKeyword_8_1_2_0 = (Keyword)cGroup_8_1_2.eContents().get(0);
		private final Assignment cUserDataAssignment_8_1_2_1 = (Assignment)cGroup_8_1_2.eContents().get(1);
		private final RuleCall cUserDataUserDataParserRuleCall_8_1_2_1_0 = (RuleCall)cUserDataAssignment_8_1_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_8_1_3 = (Keyword)cGroup_8_1.eContents().get(3);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//Export:
		//	'export' (lookup?='lookup' ('[' lookupPredicate=Expression ']')?)? type=[ecore::EClass|QualifiedID] ('as'
		//	qualifiedName?='qualified'? naming=Expression)? ('[' guard=Expression ']')? '{' ('uri-fragment' '='
		//	fragmentUnique?='unique'? 'attribute' '(' fragmentAttribute=[ecore::EAttribute] ')' ';')?
		//	((fingerprint?='object-fingerprint' | resourceFingerprint?='resource-fingerprint') ';')? ('field'
		//	attributes+=Attribute (',' attributes+=Attribute)* ';' | 'data' userData+=UserData (',' userData+=UserData)* ';')*
		//	'}';
		@Override public ParserRule getRule() { return rule; }

		//'export' (lookup?='lookup' ('[' lookupPredicate=Expression ']')?)? type=[ecore::EClass|QualifiedID] ('as'
		//qualifiedName?='qualified'? naming=Expression)? ('[' guard=Expression ']')? '{' ('uri-fragment' '='
		//fragmentUnique?='unique'? 'attribute' '(' fragmentAttribute=[ecore::EAttribute] ')' ';')?
		//((fingerprint?='object-fingerprint' | resourceFingerprint?='resource-fingerprint') ';')? ('field'
		//attributes+=Attribute (',' attributes+=Attribute)* ';' | 'data' userData+=UserData (',' userData+=UserData)* ';')* '}'
		public Group getGroup() { return cGroup; }

		//'export'
		public Keyword getExportKeyword_0() { return cExportKeyword_0; }

		//(lookup?='lookup' ('[' lookupPredicate=Expression ']')?)?
		public Group getGroup_1() { return cGroup_1; }

		//lookup?='lookup'
		public Assignment getLookupAssignment_1_0() { return cLookupAssignment_1_0; }

		//'lookup'
		public Keyword getLookupLookupKeyword_1_0_0() { return cLookupLookupKeyword_1_0_0; }

		//('[' lookupPredicate=Expression ']')?
		public Group getGroup_1_1() { return cGroup_1_1; }

		//'['
		public Keyword getLeftSquareBracketKeyword_1_1_0() { return cLeftSquareBracketKeyword_1_1_0; }

		//lookupPredicate=Expression
		public Assignment getLookupPredicateAssignment_1_1_1() { return cLookupPredicateAssignment_1_1_1; }

		//Expression
		public RuleCall getLookupPredicateExpressionParserRuleCall_1_1_1_0() { return cLookupPredicateExpressionParserRuleCall_1_1_1_0; }

		//']'
		public Keyword getRightSquareBracketKeyword_1_1_2() { return cRightSquareBracketKeyword_1_1_2; }

		//type=[ecore::EClass|QualifiedID]
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//[ecore::EClass|QualifiedID]
		public CrossReference getTypeEClassCrossReference_2_0() { return cTypeEClassCrossReference_2_0; }

		//QualifiedID
		public RuleCall getTypeEClassQualifiedIDParserRuleCall_2_0_1() { return cTypeEClassQualifiedIDParserRuleCall_2_0_1; }

		//('as' qualifiedName?='qualified'? naming=Expression)?
		public Group getGroup_3() { return cGroup_3; }

		//'as'
		public Keyword getAsKeyword_3_0() { return cAsKeyword_3_0; }

		//qualifiedName?='qualified'?
		public Assignment getQualifiedNameAssignment_3_1() { return cQualifiedNameAssignment_3_1; }

		//'qualified'
		public Keyword getQualifiedNameQualifiedKeyword_3_1_0() { return cQualifiedNameQualifiedKeyword_3_1_0; }

		//naming=Expression
		public Assignment getNamingAssignment_3_2() { return cNamingAssignment_3_2; }

		//Expression
		public RuleCall getNamingExpressionParserRuleCall_3_2_0() { return cNamingExpressionParserRuleCall_3_2_0; }

		//('[' guard=Expression ']')?
		public Group getGroup_4() { return cGroup_4; }

		//'['
		public Keyword getLeftSquareBracketKeyword_4_0() { return cLeftSquareBracketKeyword_4_0; }

		//guard=Expression
		public Assignment getGuardAssignment_4_1() { return cGuardAssignment_4_1; }

		//Expression
		public RuleCall getGuardExpressionParserRuleCall_4_1_0() { return cGuardExpressionParserRuleCall_4_1_0; }

		//']'
		public Keyword getRightSquareBracketKeyword_4_2() { return cRightSquareBracketKeyword_4_2; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }

		//('uri-fragment' '=' fragmentUnique?='unique'? 'attribute' '(' fragmentAttribute=[ecore::EAttribute] ')' ';')?
		public Group getGroup_6() { return cGroup_6; }

		//'uri-fragment'
		public Keyword getUriFragmentKeyword_6_0() { return cUriFragmentKeyword_6_0; }

		//'='
		public Keyword getEqualsSignKeyword_6_1() { return cEqualsSignKeyword_6_1; }

		//fragmentUnique?='unique'?
		public Assignment getFragmentUniqueAssignment_6_2() { return cFragmentUniqueAssignment_6_2; }

		//'unique'
		public Keyword getFragmentUniqueUniqueKeyword_6_2_0() { return cFragmentUniqueUniqueKeyword_6_2_0; }

		//'attribute'
		public Keyword getAttributeKeyword_6_3() { return cAttributeKeyword_6_3; }

		//'('
		public Keyword getLeftParenthesisKeyword_6_4() { return cLeftParenthesisKeyword_6_4; }

		//fragmentAttribute=[ecore::EAttribute]
		public Assignment getFragmentAttributeAssignment_6_5() { return cFragmentAttributeAssignment_6_5; }

		//[ecore::EAttribute]
		public CrossReference getFragmentAttributeEAttributeCrossReference_6_5_0() { return cFragmentAttributeEAttributeCrossReference_6_5_0; }

		//ID
		public RuleCall getFragmentAttributeEAttributeIDTerminalRuleCall_6_5_0_1() { return cFragmentAttributeEAttributeIDTerminalRuleCall_6_5_0_1; }

		//')'
		public Keyword getRightParenthesisKeyword_6_6() { return cRightParenthesisKeyword_6_6; }

		//';'
		public Keyword getSemicolonKeyword_6_7() { return cSemicolonKeyword_6_7; }

		//((fingerprint?='object-fingerprint' | resourceFingerprint?='resource-fingerprint') ';')?
		public Group getGroup_7() { return cGroup_7; }

		//fingerprint?='object-fingerprint' | resourceFingerprint?='resource-fingerprint'
		public Alternatives getAlternatives_7_0() { return cAlternatives_7_0; }

		//fingerprint?='object-fingerprint'
		public Assignment getFingerprintAssignment_7_0_0() { return cFingerprintAssignment_7_0_0; }

		//'object-fingerprint'
		public Keyword getFingerprintObjectFingerprintKeyword_7_0_0_0() { return cFingerprintObjectFingerprintKeyword_7_0_0_0; }

		//resourceFingerprint?='resource-fingerprint'
		public Assignment getResourceFingerprintAssignment_7_0_1() { return cResourceFingerprintAssignment_7_0_1; }

		//'resource-fingerprint'
		public Keyword getResourceFingerprintResourceFingerprintKeyword_7_0_1_0() { return cResourceFingerprintResourceFingerprintKeyword_7_0_1_0; }

		//';'
		public Keyword getSemicolonKeyword_7_1() { return cSemicolonKeyword_7_1; }

		//('field' attributes+=Attribute (',' attributes+=Attribute)* ';' | 'data' userData+=UserData (',' userData+=UserData)*
		//';')*
		public Alternatives getAlternatives_8() { return cAlternatives_8; }

		//'field' attributes+=Attribute (',' attributes+=Attribute)* ';'
		public Group getGroup_8_0() { return cGroup_8_0; }

		//'field'
		public Keyword getFieldKeyword_8_0_0() { return cFieldKeyword_8_0_0; }

		//attributes+=Attribute
		public Assignment getAttributesAssignment_8_0_1() { return cAttributesAssignment_8_0_1; }

		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_8_0_1_0() { return cAttributesAttributeParserRuleCall_8_0_1_0; }

		//(',' attributes+=Attribute)*
		public Group getGroup_8_0_2() { return cGroup_8_0_2; }

		//','
		public Keyword getCommaKeyword_8_0_2_0() { return cCommaKeyword_8_0_2_0; }

		//attributes+=Attribute
		public Assignment getAttributesAssignment_8_0_2_1() { return cAttributesAssignment_8_0_2_1; }

		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_8_0_2_1_0() { return cAttributesAttributeParserRuleCall_8_0_2_1_0; }

		//';'
		public Keyword getSemicolonKeyword_8_0_3() { return cSemicolonKeyword_8_0_3; }

		//'data' userData+=UserData (',' userData+=UserData)* ';'
		public Group getGroup_8_1() { return cGroup_8_1; }

		//'data'
		public Keyword getDataKeyword_8_1_0() { return cDataKeyword_8_1_0; }

		//userData+=UserData
		public Assignment getUserDataAssignment_8_1_1() { return cUserDataAssignment_8_1_1; }

		//UserData
		public RuleCall getUserDataUserDataParserRuleCall_8_1_1_0() { return cUserDataUserDataParserRuleCall_8_1_1_0; }

		//(',' userData+=UserData)*
		public Group getGroup_8_1_2() { return cGroup_8_1_2; }

		//','
		public Keyword getCommaKeyword_8_1_2_0() { return cCommaKeyword_8_1_2_0; }

		//userData+=UserData
		public Assignment getUserDataAssignment_8_1_2_1() { return cUserDataAssignment_8_1_2_1; }

		//UserData
		public RuleCall getUserDataUserDataParserRuleCall_8_1_2_1_0() { return cUserDataUserDataParserRuleCall_8_1_2_1_0; }

		//';'
		public Keyword getSemicolonKeyword_8_1_3() { return cSemicolonKeyword_8_1_3; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}

	public class UserDataElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.avaloq.tools.ddk.xtext.export.Export.UserData");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExprExpressionParserRuleCall_2_0 = (RuleCall)cExprAssignment_2.eContents().get(0);
		
		//UserData:
		//	name=ID '=' expr=Expression;
		@Override public ParserRule getRule() { return rule; }

		//name=ID '=' expr=Expression
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//expr=Expression
		public Assignment getExprAssignment_2() { return cExprAssignment_2; }

		//Expression
		public RuleCall getExprExpressionParserRuleCall_2_0() { return cExprExpressionParserRuleCall_2_0; }
	}

	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.avaloq.tools.ddk.xtext.export.Export.Attribute");
		private final Assignment cAttributeAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cAttributeEAttributeCrossReference_0 = (CrossReference)cAttributeAssignment.eContents().get(0);
		private final RuleCall cAttributeEAttributeIDTerminalRuleCall_0_1 = (RuleCall)cAttributeEAttributeCrossReference_0.eContents().get(1);
		
		//Attribute:
		//	attribute=[ecore::EAttribute];
		@Override public ParserRule getRule() { return rule; }

		//attribute=[ecore::EAttribute]
		public Assignment getAttributeAssignment() { return cAttributeAssignment; }

		//[ecore::EAttribute]
		public CrossReference getAttributeEAttributeCrossReference_0() { return cAttributeEAttributeCrossReference_0; }

		//ID
		public RuleCall getAttributeEAttributeIDTerminalRuleCall_0_1() { return cAttributeEAttributeIDTerminalRuleCall_0_1; }
	}

	public class QualifiedIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.avaloq.tools.ddk.xtext.export.Export.QualifiedID");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cColonColonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedID:
		//	ID ('::' ID)*;
		@Override public ParserRule getRule() { return rule; }

		//ID ('::' ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//('::' ID)*
		public Group getGroup_1() { return cGroup_1; }

		//'::'
		public Keyword getColonColonKeyword_1_0() { return cColonColonKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	
	
	private final ExportModelElements pExportModel;
	private final ImportElements pImport;
	private final ExtensionElements pExtension;
	private final DeclarationForTypeElements pDeclarationForType;
	private final InterfaceElements pInterface;
	private final InterfaceItemElements pInterfaceItem;
	private final InterfaceFieldElements pInterfaceField;
	private final InterfaceNavigationElements pInterfaceNavigation;
	private final InterfaceExpressionElements pInterfaceExpression;
	private final ExportElements pExport;
	private final UserDataElements pUserData;
	private final AttributeElements pAttribute;
	private final QualifiedIDElements pQualifiedID;
	
	private final Grammar grammar;

	private final ExpressionGrammarAccess gaExpression;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public ExportGrammarAccess(GrammarProvider grammarProvider,
		ExpressionGrammarAccess gaExpression,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaExpression = gaExpression;
		this.gaTerminals = gaTerminals;
		this.pExportModel = new ExportModelElements();
		this.pImport = new ImportElements();
		this.pExtension = new ExtensionElements();
		this.pDeclarationForType = new DeclarationForTypeElements();
		this.pInterface = new InterfaceElements();
		this.pInterfaceItem = new InterfaceItemElements();
		this.pInterfaceField = new InterfaceFieldElements();
		this.pInterfaceNavigation = new InterfaceNavigationElements();
		this.pInterfaceExpression = new InterfaceExpressionElements();
		this.pExport = new ExportElements();
		this.pUserData = new UserDataElements();
		this.pAttribute = new AttributeElements();
		this.pQualifiedID = new QualifiedIDElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.avaloq.tools.ddk.xtext.export.Export".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public ExpressionGrammarAccess getExpressionGrammarAccess() {
		return gaExpression;
	}

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//ExportModel:
	//	('export' extension?='extension'? name=ID 'for' targetGrammar=[xtext::Grammar|QualifiedID])? imports+=Import+
	//	extensions+=Extension* ('interface' '{' interfaces+=Interface+ '}')? exports+=Export+;
	public ExportModelElements getExportModelAccess() {
		return pExportModel;
	}
	
	public ParserRule getExportModelRule() {
		return getExportModelAccess().getRule();
	}

	//Import:
	//	'import' package=[ecore::EPackage|STRING] ('as' name=ID)? // Use nsURIs
	//;
	public ImportElements getImportAccess() {
		return pImport;
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}

	//Extension:
	//	'extension' extension=QualifiedID // Alas, we can't link xtend files. Maybe simply as EResources?
	//;
	public ExtensionElements getExtensionAccess() {
		return pExtension;
	}
	
	public ParserRule getExtensionRule() {
		return getExtensionAccess().getRule();
	}

	//DeclarationForType:
	//	Interface | Export;
	public DeclarationForTypeElements getDeclarationForTypeAccess() {
		return pDeclarationForType;
	}
	
	public ParserRule getDeclarationForTypeRule() {
		return getDeclarationForTypeAccess().getRule();
	}

	//Interface:
	//	type=[ecore::EClass|QualifiedID] ('[' guard=Expression ']')? ('=' items+=InterfaceItem (',' items+=InterfaceItem)*)*
	//	';';
	public InterfaceElements getInterfaceAccess() {
		return pInterface;
	}
	
	public ParserRule getInterfaceRule() {
		return getInterfaceAccess().getRule();
	}

	//InterfaceItem:
	//	InterfaceField | InterfaceNavigation | InterfaceExpression;
	public InterfaceItemElements getInterfaceItemAccess() {
		return pInterfaceItem;
	}
	
	public ParserRule getInterfaceItemRule() {
		return getInterfaceItemAccess().getRule();
	}

	//InterfaceField:
	//	unordered?='+'? field=[ecore::EStructuralFeature];
	public InterfaceFieldElements getInterfaceFieldAccess() {
		return pInterfaceField;
	}
	
	public ParserRule getInterfaceFieldRule() {
		return getInterfaceFieldAccess().getRule();
	}

	//InterfaceNavigation:
	//	'@' unordered?='+'? ref=[ecore::EReference];
	public InterfaceNavigationElements getInterfaceNavigationAccess() {
		return pInterfaceNavigation;
	}
	
	public ParserRule getInterfaceNavigationRule() {
		return getInterfaceNavigationAccess().getRule();
	}

	//InterfaceExpression:
	//	'eval' ref?='@'? unordered?='+'? '(' expr=Expression ')';
	public InterfaceExpressionElements getInterfaceExpressionAccess() {
		return pInterfaceExpression;
	}
	
	public ParserRule getInterfaceExpressionRule() {
		return getInterfaceExpressionAccess().getRule();
	}

	//Export:
	//	'export' (lookup?='lookup' ('[' lookupPredicate=Expression ']')?)? type=[ecore::EClass|QualifiedID] ('as'
	//	qualifiedName?='qualified'? naming=Expression)? ('[' guard=Expression ']')? '{' ('uri-fragment' '='
	//	fragmentUnique?='unique'? 'attribute' '(' fragmentAttribute=[ecore::EAttribute] ')' ';')?
	//	((fingerprint?='object-fingerprint' | resourceFingerprint?='resource-fingerprint') ';')? ('field'
	//	attributes+=Attribute (',' attributes+=Attribute)* ';' | 'data' userData+=UserData (',' userData+=UserData)* ';')*
	//	'}';
	public ExportElements getExportAccess() {
		return pExport;
	}
	
	public ParserRule getExportRule() {
		return getExportAccess().getRule();
	}

	//UserData:
	//	name=ID '=' expr=Expression;
	public UserDataElements getUserDataAccess() {
		return pUserData;
	}
	
	public ParserRule getUserDataRule() {
		return getUserDataAccess().getRule();
	}

	//Attribute:
	//	attribute=[ecore::EAttribute];
	public AttributeElements getAttributeAccess() {
		return pAttribute;
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}

	//QualifiedID:
	//	ID ('::' ID)*;
	public QualifiedIDElements getQualifiedIDAccess() {
		return pQualifiedID;
	}
	
	public ParserRule getQualifiedIDRule() {
		return getQualifiedIDAccess().getRule();
	}

	//// this is a translation of the expression part of
	//
	//// /org.eclipse.xtend/src/org/eclipse/internal/xtend/xtend/parser/Xtend.g
	// // to Xtext
	//
	////expression returns [Expression e]:
	// //	x=letExpression {$e=x;};
	// Expression:
	//	LetExpression | => CastedExpression | ChainExpression;
	public ExpressionGrammarAccess.ExpressionElements getExpressionAccess() {
		return gaExpression.getExpressionAccess();
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//SyntaxElement:
	//	Expression | Case | Type;
	public ExpressionGrammarAccess.SyntaxElementElements getSyntaxElementAccess() {
		return gaExpression.getSyntaxElementAccess();
	}
	
	public ParserRule getSyntaxElementRule() {
		return getSyntaxElementAccess().getRule();
	}

	////letExpression  returns [Expression e] :
	// //   'let' v=identifier '=' varExpr=castedExpression ':' target=expression
	//
	////   {$e=factory.createLetExpression(v,varExpr,target);}
	// //|  x=castedExpression {$e=x;};
	// LetExpression:
	//	'let' identifier=Identifier '=' varExpr=Expression ':' target=Expression;
	public ExpressionGrammarAccess.LetExpressionElements getLetExpressionAccess() {
		return gaExpression.getLetExpressionAccess();
	}
	
	public ParserRule getLetExpressionRule() {
		return getLetExpressionAccess().getRule();
	}

	////castedExpression returns [Expression e] :
	// //   ('(' type ')' castedExpression)=>
	//
	////	'(' t=type ')' x=chainExpression {$e = factory.createCast(t,x);}
	// //	| x=chainExpression {$e=x;};
	//
	//CastedExpression:
	//	'(' type=Type ')' target=Expression;
	public ExpressionGrammarAccess.CastedExpressionElements getCastedExpressionAccess() {
		return gaExpression.getCastedExpressionAccess();
	}
	
	public ParserRule getCastedExpressionRule() {
		return getCastedExpressionAccess().getRule();
	}

	////chainExpression  returns [Expression e] :
	//
	////	x=ifExpression {$e=x;} ( '->' right=ifExpression {$e=factory.createChainExpression($e,right);})*;
	// ChainExpression
	//Expression:
	//	ChainedExpression ({ChainExpression.first=current} '->' next=ChainedExpression)*;
	public ExpressionGrammarAccess.ChainExpressionElements getChainExpressionAccess() {
		return gaExpression.getChainExpressionAccess();
	}
	
	public ParserRule getChainExpressionRule() {
		return getChainExpressionAccess().getRule();
	}

	//ChainedExpression Expression:
	//	IfExpressionKw | IfExpressionTri | SwitchExpression;
	public ExpressionGrammarAccess.ChainedExpressionElements getChainedExpressionAccess() {
		return gaExpression.getChainedExpressionAccess();
	}
	
	public ParserRule getChainedExpressionRule() {
		return getChainedExpressionAccess().getRule();
	}

	////ifExpression  returns [Expression e] :
	//
	////	x=switchExpression {$e=x;}('?' thenPart=switchExpression ':' elsePart=switchExpression {$e=factory.createIf($e,thenPart,elsePart);})?
	//
	////|	'if' condition=switchExpression 'then' thenPart=switchExpression ('else' elsePart=expression)? {$e=factory.createIf(condition,thenPart,elsePart);};
	//
	//IfExpressionTri Expression:
	//	OrExpression ({IfExpression.condition=current} '?' thenPart=ChainedExpression ':' elsePart=ChainedExpression)?;
	public ExpressionGrammarAccess.IfExpressionTriElements getIfExpressionTriAccess() {
		return gaExpression.getIfExpressionTriAccess();
	}
	
	public ParserRule getIfExpressionTriRule() {
		return getIfExpressionTriAccess().getRule();
	}

	//IfExpressionKw IfExpression:
	//	'if' condition=ChainedExpression 'then' thenPart=ChainedExpression -> ('else' elsePart=ChainedExpression)?;
	public ExpressionGrammarAccess.IfExpressionKwElements getIfExpressionKwAccess() {
		return gaExpression.getIfExpressionKwAccess();
	}
	
	public ParserRule getIfExpressionKwRule() {
		return getIfExpressionKwAccess().getRule();
	}

	////switchExpression  returns [Expression e=null] @init {List cases = new ArrayList();} :
	//
	////   'switch' ('(' pred = orExpression ')')?
	// //   '{'
	// //   (
	// //     'case' c=orExpression  ':'  v=orExpression
	//
	////     {cases.add(factory.createCase(c, v));}
	// //   )*
	// //   'default' ':' def = orExpression
	// //   '}'
	//
	////   {$e = factory.createSwitchExpression(pred,cases,def);}
	// //|  x=orExpression {$e=x;};
	// SwitchExpression:
	//	'switch' ('(' switchExpr=OrExpression ')')? '{' case+=Case* 'default' ':' defaultExpr=OrExpression '}';
	public ExpressionGrammarAccess.SwitchExpressionElements getSwitchExpressionAccess() {
		return gaExpression.getSwitchExpressionAccess();
	}
	
	public ParserRule getSwitchExpressionRule() {
		return getSwitchExpressionAccess().getRule();
	}

	//Case:
	//	'case' condition=OrExpression ':' thenPar=OrExpression;
	public ExpressionGrammarAccess.CaseElements getCaseAccess() {
		return gaExpression.getCaseAccess();
	}
	
	public ParserRule getCaseRule() {
		return getCaseAccess().getRule();
	}

	////orExpression returns [Expression e] :
	//
	////  	x=andExpression {$e=x;} (name='||' r=andExpression 	{$e = factory.createBooleanOperation(id(name),$e,r);})*;
	//
	//OrExpression Expression:
	//	AndExpression ({BooleanOperation.left=current} operator='||' right=AndExpression)*;
	public ExpressionGrammarAccess.OrExpressionElements getOrExpressionAccess() {
		return gaExpression.getOrExpressionAccess();
	}
	
	public ParserRule getOrExpressionRule() {
		return getOrExpressionAccess().getRule();
	}

	////andExpression 	returns [Expression e] :
	//
	////	x=impliesExpression {$e=x;} (name='&&' r=impliesExpression 	{$e = factory.createBooleanOperation(id(name),$e,r);})*;
	//
	//AndExpression Expression:
	//	ImpliesExpression ({BooleanOperation.left=current} operator='&&' right=ImpliesExpression)*;
	public ExpressionGrammarAccess.AndExpressionElements getAndExpressionAccess() {
		return gaExpression.getAndExpressionAccess();
	}
	
	public ParserRule getAndExpressionRule() {
		return getAndExpressionAccess().getRule();
	}

	////impliesExpression returns [Expression e] :
	//
	////	x=relationalExpression {$e=x;} (name='implies' r=relationalExpression 	{$e = factory.createBooleanOperation(id(name),$e,r);})*;
	//
	//ImpliesExpression Expression:
	//	RelationalExpression ({BooleanOperation.left=current} operator='implies' right=RelationalExpression)*;
	public ExpressionGrammarAccess.ImpliesExpressionElements getImpliesExpressionAccess() {
		return gaExpression.getImpliesExpressionAccess();
	}
	
	public ParserRule getImpliesExpressionRule() {
		return getImpliesExpressionAccess().getRule();
	}

	////relationalExpression returns [Expression e] :
	// //	x=additiveExpression {$e=x;}
	//
	////	(name=('==' | '!=' | '>=' | '<=' | '>' | '<') r=additiveExpression {$e = factory.createBinaryOperation(id(name),$e,r);})*;
	//
	//RelationalExpression Expression:
	//	AdditiveExpression ({BooleanOperation.left=current} operator=('==' | '!=' | '>=' | '<=' | '>' | '<')
	//	right=AdditiveExpression)*;
	public ExpressionGrammarAccess.RelationalExpressionElements getRelationalExpressionAccess() {
		return gaExpression.getRelationalExpressionAccess();
	}
	
	public ParserRule getRelationalExpressionRule() {
		return getRelationalExpressionAccess().getRule();
	}

	////additiveExpression returns [Expression e] :
	// //	x=multiplicativeExpression {$e=x;}
	//
	////   (name=('+'| '-') r=multiplicativeExpression {$e = factory.createBinaryOperation(id(name),$e,r);})*;
	//
	//AdditiveExpression Expression:
	//	MultiplicativeExpression ({OperationCall.params+=current} name=('+' | '-') params+=MultiplicativeExpression)*;
	public ExpressionGrammarAccess.AdditiveExpressionElements getAdditiveExpressionAccess() {
		return gaExpression.getAdditiveExpressionAccess();
	}
	
	public ParserRule getAdditiveExpressionRule() {
		return getAdditiveExpressionAccess().getRule();
	}

	////multiplicativeExpression returns [Expression e]:
	// //	x=unaryExpression {$e=x;}
	//
	////	(name=('*' | '/') r=unaryExpression {$e = factory.createBinaryOperation(id(name),$e,r);})*;
	//
	//MultiplicativeExpression Expression:
	//	UnaryOrInfixExpression ({OperationCall.params+=current} name=('*' | '/') params+=UnaryOrInfixExpression)*;
	public ExpressionGrammarAccess.MultiplicativeExpressionElements getMultiplicativeExpressionAccess() {
		return gaExpression.getMultiplicativeExpressionAccess();
	}
	
	public ParserRule getMultiplicativeExpressionRule() {
		return getMultiplicativeExpressionAccess().getRule();
	}

	////unaryExpression returns [Expression e] :
	// //	x=infixExpression {$e=x;}
	//
	////|	name='!' x=infixExpression	{$e = factory.createOperationCall(id(name),x);}
	//
	////|	name='-' x=infixExpression	{$e = factory.createOperationCall(id(name),x);};
	// UnaryOrInfixExpression Expression:
	//	UnaryExpression | InfixExpression;
	public ExpressionGrammarAccess.UnaryOrInfixExpressionElements getUnaryOrInfixExpressionAccess() {
		return gaExpression.getUnaryOrInfixExpressionAccess();
	}
	
	public ParserRule getUnaryOrInfixExpressionRule() {
		return getUnaryOrInfixExpressionAccess().getRule();
	}

	//UnaryExpression OperationCall:
	//	name=('!' | '-') params+=InfixExpression;
	public ExpressionGrammarAccess.UnaryExpressionElements getUnaryExpressionAccess() {
		return gaExpression.getUnaryExpressionAccess();
	}
	
	public ParserRule getUnaryExpressionRule() {
		return getUnaryExpressionAccess().getRule();
	}

	////infixExpression returns [Expression e] :
	//
	////	x=primaryExpression {$e=x;} ( '.' op=featureCall { if (op!=null) { op.setTarget($e);$e=op;}} )*;
	//
	//// having support for fragments could avoid the redundancy at this point
	// InfixExpression Expression:
	//	PrimaryExpression ({OperationCall.target=current} '.' name=Identifier '(' (params+=Expression (','
	//	params+=Expression)*)? ')' | {FeatureCall.target=current} '.' type=Type | {TypeSelectExpression.target=current} '.'
	//	name='typeSelect' '(' type=Type ')' | {CollectionExpression.target=current} '.' name=('collect' | 'select' |
	//	'selectFirst' | 'reject' | 'exists' | 'notExists' | 'sortBy' | 'forAll') '(' (var=Identifier '|')? exp=Expression
	//	')')*;
	public ExpressionGrammarAccess.InfixExpressionElements getInfixExpressionAccess() {
		return gaExpression.getInfixExpressionAccess();
	}
	
	public ParserRule getInfixExpressionRule() {
		return getInfixExpressionAccess().getRule();
	}

	////primaryExpression 	 returns [Expression e] :
	// //   c=StringLiteral { $e = factory.createStringLiteral(id(c));}
	//
	////|   x=featureCall {$e=x;}
	// //|   x=booleanLiteral {$e=x;}
	// //|   x=numberLiteral {$e=x;}
	//
	////|   x=nullLiteral {$e=x;}
	// //|   x=listLiteral {$e=x;}
	// //|   x=constructorCall {$e=x;}
	//
	////|   x=globalVarExpression {$e=x;}
	// //|   x=paranthesizedExpression {$e=x;};
	// PrimaryExpression Expression:
	//	Literal | FeatureCall | ListLiteral | ConstructorCallExpression | GlobalVarExpression | ParanthesizedExpression;
	public ExpressionGrammarAccess.PrimaryExpressionElements getPrimaryExpressionAccess() {
		return gaExpression.getPrimaryExpressionAccess();
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}

	//Literal:
	//	BooleanLiteral | IntegerLiteral | NullLiteral | RealLiteral | StringLiteral;
	public ExpressionGrammarAccess.LiteralElements getLiteralAccess() {
		return gaExpression.getLiteralAccess();
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}

	//BooleanLiteral:
	//	val=('true' | 'false');
	public ExpressionGrammarAccess.BooleanLiteralElements getBooleanLiteralAccess() {
		return gaExpression.getBooleanLiteralAccess();
	}
	
	public ParserRule getBooleanLiteralRule() {
		return getBooleanLiteralAccess().getRule();
	}

	//IntegerLiteral:
	//	val=INT;
	public ExpressionGrammarAccess.IntegerLiteralElements getIntegerLiteralAccess() {
		return gaExpression.getIntegerLiteralAccess();
	}
	
	public ParserRule getIntegerLiteralRule() {
		return getIntegerLiteralAccess().getRule();
	}

	//NullLiteral:
	//	val='null';
	public ExpressionGrammarAccess.NullLiteralElements getNullLiteralAccess() {
		return gaExpression.getNullLiteralAccess();
	}
	
	public ParserRule getNullLiteralRule() {
		return getNullLiteralAccess().getRule();
	}

	//RealLiteral:
	//	val=REAL;
	public ExpressionGrammarAccess.RealLiteralElements getRealLiteralAccess() {
		return gaExpression.getRealLiteralAccess();
	}
	
	public ParserRule getRealLiteralRule() {
		return getRealLiteralAccess().getRule();
	}

	//StringLiteral:
	//	val=STRING;
	public ExpressionGrammarAccess.StringLiteralElements getStringLiteralAccess() {
		return gaExpression.getStringLiteralAccess();
	}
	
	public ParserRule getStringLiteralRule() {
		return getStringLiteralAccess().getRule();
	}

	//terminal REAL:
	//	'0'..'9'* '.' '0'..'9'*;
	public TerminalRule getREALRule() {
		return gaExpression.getREALRule();
	} 

	////paranthesizedExpression returns [Expression e] :
	//
	////    '(' x=expression ')' {$e=factory.createParanthesizedExpression(x);};
	// ParanthesizedExpression Expression:
	//	'(' Expression ')';
	public ExpressionGrammarAccess.ParanthesizedExpressionElements getParanthesizedExpressionAccess() {
		return gaExpression.getParanthesizedExpressionAccess();
	}
	
	public ParserRule getParanthesizedExpressionRule() {
		return getParanthesizedExpressionAccess().getRule();
	}

	////paranthesizedExpression returns [Expression e] :
	//
	////    '(' x=expression ')' {$e=factory.createParanthesizedExpression(x);};
	// GlobalVarExpression:
	//	'GLOBALVAR' name=Identifier;
	public ExpressionGrammarAccess.GlobalVarExpressionElements getGlobalVarExpressionAccess() {
		return gaExpression.getGlobalVarExpressionAccess();
	}
	
	public ParserRule getGlobalVarExpressionRule() {
		return getGlobalVarExpressionAccess().getRule();
	}

	////featureCall  returns [FeatureCall e] :
	//
	////	id1=identifier '(' (l=parameterList)? ')' {$e = factory.createOperationCall(id1,l);}
	//
	////|   t=type {$e=factory.createFeatureCall(t,null);}
	// //|   x=collectionExpression {$e=x;};
	// FeatureCall:
	//	OperationCall | type=Type | CollectionExpression | TypeSelectExpression;
	public ExpressionGrammarAccess.FeatureCallElements getFeatureCallAccess() {
		return gaExpression.getFeatureCallAccess();
	}
	
	public ParserRule getFeatureCallRule() {
		return getFeatureCallAccess().getRule();
	}

	//OperationCall:
	//	name=Identifier '(' (params+=Expression (',' params+=Expression)*)? ')';
	public ExpressionGrammarAccess.OperationCallElements getOperationCallAccess() {
		return gaExpression.getOperationCallAccess();
	}
	
	public ParserRule getOperationCallRule() {
		return getOperationCallAccess().getRule();
	}

	////listLiteral  returns [Expression e] :
	// //	'{' (l=parameterList)? '}' {$e=factory.createListLiteral(l);};
	// ListLiteral:
	//	{ListLiteral} '{' (elements+=Expression (',' elements+=Expression)*)? '}';
	public ExpressionGrammarAccess.ListLiteralElements getListLiteralAccess() {
		return gaExpression.getListLiteralAccess();
	}
	
	public ParserRule getListLiteralRule() {
		return getListLiteralAccess().getRule();
	}

	////constructorCall  returns [Expression e] :
	// //	'new' t=simpleType
	//
	////	{$e= factory.createConstructorCallExpression(t);};
	// ConstructorCallExpression:
	//	'new' type=SimpleType;
	public ExpressionGrammarAccess.ConstructorCallExpressionElements getConstructorCallExpressionAccess() {
		return gaExpression.getConstructorCallExpressionAccess();
	}
	
	public ParserRule getConstructorCallExpressionRule() {
		return getConstructorCallExpressionAccess().getRule();
	}

	////collectionExpression  returns [FeatureCall e] :
	// //  name='typeSelect'
	//
	////  '(' t=type ')' { $e = factory.createTypeSelectExpression(id(name),t);}
	// //   |name=('collect'
	// //  | 'select'
	//
	////  | 'selectFirst'
	// //  | 'reject'
	// //  | 'exists'
	// //  | 'notExists'
	// //  | 'sortBy'
	//
	////  | 'forAll') '(' (var=identifier '|')? x=expression ')'
	//
	//// { $e = factory.createCollectionExpression(id(name),var,x);};
	// TypeSelectExpression:
	//	name='typeSelect' '(' type=Type ')';
	public ExpressionGrammarAccess.TypeSelectExpressionElements getTypeSelectExpressionAccess() {
		return gaExpression.getTypeSelectExpressionAccess();
	}
	
	public ParserRule getTypeSelectExpressionRule() {
		return getTypeSelectExpressionAccess().getRule();
	}

	//CollectionExpression:
	//	name=('collect' | 'select' | 'selectFirst' | 'reject' | 'exists' | 'notExists' | 'sortBy' | 'forAll') '('
	//	(var=Identifier '|')? exp=Expression ')';
	public ExpressionGrammarAccess.CollectionExpressionElements getCollectionExpressionAccess() {
		return gaExpression.getCollectionExpressionAccess();
	}
	
	public ParserRule getCollectionExpressionRule() {
		return getCollectionExpressionAccess().getRule();
	}

	////type returns [Identifier id] :
	// //	a = collectionType {$id=a;}|
	// //	b = simpleType {$id=b;};
	// Type Identifier:
	//	CollectionType | SimpleType;
	public ExpressionGrammarAccess.TypeElements getTypeAccess() {
		return gaExpression.getTypeAccess();
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	////collectionType  returns [Identifier id ] :
	// //  cl=( 'Collection' | 'List' | 'Set' ) {$id = id(cl);}
	//
	////  (b='[' id1=simpleType c=']' { $id.append(id(b));$id.append(id1);$id.append(id(c));})?;
	// CollectionType Identifier:
	//	cl=('Collection' | 'List' | 'Set') '[' id1=SimpleType ']';
	public ExpressionGrammarAccess.CollectionTypeElements getCollectionTypeAccess() {
		return gaExpression.getCollectionTypeAccess();
	}
	
	public ParserRule getCollectionTypeRule() {
		return getCollectionTypeAccess().getRule();
	}

	////simpleType returns [Identifier id] :
	// //	x=identifier {$id=x;}
	//
	////	(d='::' end=identifier  {$id.append(id(d)); $id.append(end);})*;
	// SimpleType Identifier:
	//	id+=Identifier ('::' id+=Identifier)*;
	public ExpressionGrammarAccess.SimpleTypeElements getSimpleTypeAccess() {
		return gaExpression.getSimpleTypeAccess();
	}
	
	public ParserRule getSimpleTypeRule() {
		return getSimpleTypeAccess().getRule();
	}

	//Identifier:
	//	ID;
	public ExpressionGrammarAccess.IdentifierElements getIdentifierAccess() {
		return gaExpression.getIdentifierAccess();
	}
	
	public ParserRule getIdentifierRule() {
		return getIdentifierAccess().getRule();
	}

	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
