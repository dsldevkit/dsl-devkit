/*
 * generated by Xtext
 */
package com.avaloq.tools.ddk.xtext.scope.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import com.avaloq.tools.ddk.xtext.expression.services.ExpressionGrammarAccess;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class ScopeGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ScopeModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.avaloq.tools.ddk.xtext.scope.Scope.ScopeModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cScopingKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameDottedIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cWithKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cIncludedScopesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cIncludedScopesScopeModelCrossReference_2_1_0 = (CrossReference)cIncludedScopesAssignment_2_1.eContents().get(0);
		private final RuleCall cIncludedScopesScopeModelDottedIDParserRuleCall_2_1_0_1 = (RuleCall)cIncludedScopesScopeModelCrossReference_2_1_0.eContents().get(1);
		private final Assignment cImportsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cImportsImportParserRuleCall_3_0 = (RuleCall)cImportsAssignment_3.eContents().get(0);
		private final Assignment cExtensionsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExtensionsExtensionParserRuleCall_4_0 = (RuleCall)cExtensionsAssignment_4.eContents().get(0);
		private final Assignment cInjectionsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cInjectionsInjectionParserRuleCall_5_0 = (RuleCall)cInjectionsAssignment_5.eContents().get(0);
		private final Assignment cNamingAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cNamingNamingSectionParserRuleCall_6_0 = (RuleCall)cNamingAssignment_6.eContents().get(0);
		private final Assignment cScopesAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cScopesScopeDefinitionParserRuleCall_7_0 = (RuleCall)cScopesAssignment_7.eContents().get(0);
		
		//ScopeModel:
		//	'scoping' name=DottedID ('with' includedScopes+=[ScopeModel|DottedID])? imports+=Import* extensions+=Extension*
		//	injections+=Injection* naming=NamingSection? scopes+=ScopeDefinition*;
		@Override public ParserRule getRule() { return rule; }

		//'scoping' name=DottedID ('with' includedScopes+=[ScopeModel|DottedID])? imports+=Import* extensions+=Extension*
		//injections+=Injection* naming=NamingSection? scopes+=ScopeDefinition*
		public Group getGroup() { return cGroup; }

		//'scoping'
		public Keyword getScopingKeyword_0() { return cScopingKeyword_0; }

		//name=DottedID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//DottedID
		public RuleCall getNameDottedIDParserRuleCall_1_0() { return cNameDottedIDParserRuleCall_1_0; }

		//('with' includedScopes+=[ScopeModel|DottedID])?
		public Group getGroup_2() { return cGroup_2; }

		//'with'
		public Keyword getWithKeyword_2_0() { return cWithKeyword_2_0; }

		//includedScopes+=[ScopeModel|DottedID]
		public Assignment getIncludedScopesAssignment_2_1() { return cIncludedScopesAssignment_2_1; }

		//[ScopeModel|DottedID]
		public CrossReference getIncludedScopesScopeModelCrossReference_2_1_0() { return cIncludedScopesScopeModelCrossReference_2_1_0; }

		//DottedID
		public RuleCall getIncludedScopesScopeModelDottedIDParserRuleCall_2_1_0_1() { return cIncludedScopesScopeModelDottedIDParserRuleCall_2_1_0_1; }

		//imports+=Import*
		public Assignment getImportsAssignment_3() { return cImportsAssignment_3; }

		//Import
		public RuleCall getImportsImportParserRuleCall_3_0() { return cImportsImportParserRuleCall_3_0; }

		//extensions+=Extension*
		public Assignment getExtensionsAssignment_4() { return cExtensionsAssignment_4; }

		//Extension
		public RuleCall getExtensionsExtensionParserRuleCall_4_0() { return cExtensionsExtensionParserRuleCall_4_0; }

		//injections+=Injection*
		public Assignment getInjectionsAssignment_5() { return cInjectionsAssignment_5; }

		//Injection
		public RuleCall getInjectionsInjectionParserRuleCall_5_0() { return cInjectionsInjectionParserRuleCall_5_0; }

		//naming=NamingSection?
		public Assignment getNamingAssignment_6() { return cNamingAssignment_6; }

		//NamingSection
		public RuleCall getNamingNamingSectionParserRuleCall_6_0() { return cNamingNamingSectionParserRuleCall_6_0; }

		//scopes+=ScopeDefinition*
		public Assignment getScopesAssignment_7() { return cScopesAssignment_7; }

		//ScopeDefinition
		public RuleCall getScopesScopeDefinitionParserRuleCall_7_0() { return cScopesScopeDefinitionParserRuleCall_7_0; }
	}

	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.avaloq.tools.ddk.xtext.scope.Scope.Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPackageAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cPackageEPackageCrossReference_1_0 = (CrossReference)cPackageAssignment_1.eContents().get(0);
		private final RuleCall cPackageEPackageSTRINGTerminalRuleCall_1_0_1 = (RuleCall)cPackageEPackageCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cAsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cNameAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cNameIdentifierParserRuleCall_2_1_0 = (RuleCall)cNameAssignment_2_1.eContents().get(0);
		
		//Import:
		//	'import' package=[ecore::EPackage|STRING] ('as' name=Identifier)?;
		@Override public ParserRule getRule() { return rule; }

		//'import' package=[ecore::EPackage|STRING] ('as' name=Identifier)?
		public Group getGroup() { return cGroup; }

		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//package=[ecore::EPackage|STRING]
		public Assignment getPackageAssignment_1() { return cPackageAssignment_1; }

		//[ecore::EPackage|STRING]
		public CrossReference getPackageEPackageCrossReference_1_0() { return cPackageEPackageCrossReference_1_0; }

		//STRING
		public RuleCall getPackageEPackageSTRINGTerminalRuleCall_1_0_1() { return cPackageEPackageSTRINGTerminalRuleCall_1_0_1; }

		//('as' name=Identifier)?
		public Group getGroup_2() { return cGroup_2; }

		//'as'
		public Keyword getAsKeyword_2_0() { return cAsKeyword_2_0; }

		//name=Identifier
		public Assignment getNameAssignment_2_1() { return cNameAssignment_2_1; }

		//Identifier
		public RuleCall getNameIdentifierParserRuleCall_2_1_0() { return cNameIdentifierParserRuleCall_2_1_0; }
	}

	public class ExtensionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.avaloq.tools.ddk.xtext.scope.Scope.Extension");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExtensionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExtensionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExtensionQualifiedIDParserRuleCall_1_0 = (RuleCall)cExtensionAssignment_1.eContents().get(0);
		
		//Extension:
		//	'extension' extension=QualifiedID;
		@Override public ParserRule getRule() { return rule; }

		//'extension' extension=QualifiedID
		public Group getGroup() { return cGroup; }

		//'extension'
		public Keyword getExtensionKeyword_0() { return cExtensionKeyword_0; }

		//extension=QualifiedID
		public Assignment getExtensionAssignment_1() { return cExtensionAssignment_1; }

		//QualifiedID
		public RuleCall getExtensionQualifiedIDParserRuleCall_1_0() { return cExtensionQualifiedIDParserRuleCall_1_0; }
	}

	public class InjectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.avaloq.tools.ddk.xtext.scope.Scope.Injection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInjectKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeDottedIDParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Keyword cAsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIdentifierParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		
		//Injection:
		//	'inject' type=DottedID 'as' name=Identifier;
		@Override public ParserRule getRule() { return rule; }

		//'inject' type=DottedID 'as' name=Identifier
		public Group getGroup() { return cGroup; }

		//'inject'
		public Keyword getInjectKeyword_0() { return cInjectKeyword_0; }

		//type=DottedID
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//DottedID
		public RuleCall getTypeDottedIDParserRuleCall_1_0() { return cTypeDottedIDParserRuleCall_1_0; }

		//'as'
		public Keyword getAsKeyword_2() { return cAsKeyword_2; }

		//name=Identifier
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//Identifier
		public RuleCall getNameIdentifierParserRuleCall_3_0() { return cNameIdentifierParserRuleCall_3_0; }
	}

	public class NamingSectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.avaloq.tools.ddk.xtext.scope.Scope.NamingSection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNamingSectionAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCaseKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cCasingAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cCasingCasingEnumRuleCall_1_1_0 = (RuleCall)cCasingAssignment_1_1.eContents().get(0);
		private final Keyword cNamingKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNamingsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNamingsNamingDefinitionParserRuleCall_4_0 = (RuleCall)cNamingsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//NamingSection:
		//	{NamingSection} ('case' casing=Casing)? 'naming' '{' namings+=NamingDefinition* '}';
		@Override public ParserRule getRule() { return rule; }

		//{NamingSection} ('case' casing=Casing)? 'naming' '{' namings+=NamingDefinition* '}'
		public Group getGroup() { return cGroup; }

		//{NamingSection}
		public Action getNamingSectionAction_0() { return cNamingSectionAction_0; }

		//('case' casing=Casing)?
		public Group getGroup_1() { return cGroup_1; }

		//'case'
		public Keyword getCaseKeyword_1_0() { return cCaseKeyword_1_0; }

		//casing=Casing
		public Assignment getCasingAssignment_1_1() { return cCasingAssignment_1_1; }

		//Casing
		public RuleCall getCasingCasingEnumRuleCall_1_1_0() { return cCasingCasingEnumRuleCall_1_1_0; }

		//'naming'
		public Keyword getNamingKeyword_2() { return cNamingKeyword_2; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//namings+=NamingDefinition*
		public Assignment getNamingsAssignment_4() { return cNamingsAssignment_4; }

		//NamingDefinition
		public RuleCall getNamingsNamingDefinitionParserRuleCall_4_0() { return cNamingsNamingDefinitionParserRuleCall_4_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class NamingDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.avaloq.tools.ddk.xtext.scope.Scope.NamingDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTypeEClassCrossReference_0_0 = (CrossReference)cTypeAssignment_0.eContents().get(0);
		private final RuleCall cTypeEClassQualifiedIDParserRuleCall_0_0_1 = (RuleCall)cTypeEClassCrossReference_0_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNamingAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNamingNamingParserRuleCall_2_0 = (RuleCall)cNamingAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//NamingDefinition:
		//	type=[ecore::EClass|QualifiedID] '=' naming=Naming ';';
		@Override public ParserRule getRule() { return rule; }

		//type=[ecore::EClass|QualifiedID] '=' naming=Naming ';'
		public Group getGroup() { return cGroup; }

		//type=[ecore::EClass|QualifiedID]
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//[ecore::EClass|QualifiedID]
		public CrossReference getTypeEClassCrossReference_0_0() { return cTypeEClassCrossReference_0_0; }

		//QualifiedID
		public RuleCall getTypeEClassQualifiedIDParserRuleCall_0_0_1() { return cTypeEClassQualifiedIDParserRuleCall_0_0_1; }

		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//naming=Naming
		public Assignment getNamingAssignment_2() { return cNamingAssignment_2; }

		//Naming
		public RuleCall getNamingNamingParserRuleCall_2_0() { return cNamingNamingParserRuleCall_2_0; }

		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class ScopeDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.avaloq.tools.ddk.xtext.scope.Scope.ScopeDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cScopeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameIdentifierParserRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cTargetTypeAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final CrossReference cTargetTypeEClassCrossReference_2_0_0 = (CrossReference)cTargetTypeAssignment_2_0.eContents().get(0);
		private final RuleCall cTargetTypeEClassQualifiedIDParserRuleCall_2_0_0_1 = (RuleCall)cTargetTypeEClassCrossReference_2_0_0.eContents().get(1);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Assignment cContextTypeAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final CrossReference cContextTypeEClassCrossReference_2_1_0_0 = (CrossReference)cContextTypeAssignment_2_1_0.eContents().get(0);
		private final RuleCall cContextTypeEClassQualifiedIDParserRuleCall_2_1_0_0_1 = (RuleCall)cContextTypeEClassCrossReference_2_1_0_0.eContents().get(1);
		private final Keyword cNumberSignKeyword_2_1_1 = (Keyword)cGroup_2_1.eContents().get(1);
		private final Assignment cReferenceAssignment_2_1_2 = (Assignment)cGroup_2_1.eContents().get(2);
		private final CrossReference cReferenceEReferenceCrossReference_2_1_2_0 = (CrossReference)cReferenceAssignment_2_1_2.eContents().get(0);
		private final RuleCall cReferenceEReferenceIdentifierParserRuleCall_2_1_2_0_1 = (RuleCall)cReferenceEReferenceCrossReference_2_1_2_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRulesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRulesScopeRuleParserRuleCall_4_0 = (RuleCall)cRulesAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ScopeDefinition:
		//	'scope' ('(' name=Identifier ')')? (targetType=[ecore::EClass|QualifiedID] | contextType=[ecore::EClass|QualifiedID]
		//	'#' reference=[ecore::EReference|Identifier]) '{' rules+=ScopeRule+ '}';
		@Override public ParserRule getRule() { return rule; }

		//'scope' ('(' name=Identifier ')')? (targetType=[ecore::EClass|QualifiedID] | contextType=[ecore::EClass|QualifiedID] '#'
		//reference=[ecore::EReference|Identifier]) '{' rules+=ScopeRule+ '}'
		public Group getGroup() { return cGroup; }

		//'scope'
		public Keyword getScopeKeyword_0() { return cScopeKeyword_0; }

		//('(' name=Identifier ')')?
		public Group getGroup_1() { return cGroup_1; }

		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//name=Identifier
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }

		//Identifier
		public RuleCall getNameIdentifierParserRuleCall_1_1_0() { return cNameIdentifierParserRuleCall_1_1_0; }

		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }

		//targetType=[ecore::EClass|QualifiedID] | contextType=[ecore::EClass|QualifiedID] '#'
		//reference=[ecore::EReference|Identifier]
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//targetType=[ecore::EClass|QualifiedID]
		public Assignment getTargetTypeAssignment_2_0() { return cTargetTypeAssignment_2_0; }

		//[ecore::EClass|QualifiedID]
		public CrossReference getTargetTypeEClassCrossReference_2_0_0() { return cTargetTypeEClassCrossReference_2_0_0; }

		//QualifiedID
		public RuleCall getTargetTypeEClassQualifiedIDParserRuleCall_2_0_0_1() { return cTargetTypeEClassQualifiedIDParserRuleCall_2_0_0_1; }

		//contextType=[ecore::EClass|QualifiedID] '#' reference=[ecore::EReference|Identifier]
		public Group getGroup_2_1() { return cGroup_2_1; }

		//contextType=[ecore::EClass|QualifiedID]
		public Assignment getContextTypeAssignment_2_1_0() { return cContextTypeAssignment_2_1_0; }

		//[ecore::EClass|QualifiedID]
		public CrossReference getContextTypeEClassCrossReference_2_1_0_0() { return cContextTypeEClassCrossReference_2_1_0_0; }

		//QualifiedID
		public RuleCall getContextTypeEClassQualifiedIDParserRuleCall_2_1_0_0_1() { return cContextTypeEClassQualifiedIDParserRuleCall_2_1_0_0_1; }

		//'#'
		public Keyword getNumberSignKeyword_2_1_1() { return cNumberSignKeyword_2_1_1; }

		//reference=[ecore::EReference|Identifier]
		public Assignment getReferenceAssignment_2_1_2() { return cReferenceAssignment_2_1_2; }

		//[ecore::EReference|Identifier]
		public CrossReference getReferenceEReferenceCrossReference_2_1_2_0() { return cReferenceEReferenceCrossReference_2_1_2_0; }

		//Identifier
		public RuleCall getReferenceEReferenceIdentifierParserRuleCall_2_1_2_0_1() { return cReferenceEReferenceIdentifierParserRuleCall_2_1_2_0_1; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//rules+=ScopeRule+
		public Assignment getRulesAssignment_4() { return cRulesAssignment_4; }

		//ScopeRule
		public RuleCall getRulesScopeRuleParserRuleCall_4_0() { return cRulesScopeRuleParserRuleCall_4_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class ScopeRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.avaloq.tools.ddk.xtext.scope.Scope.ScopeRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cContextKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cContextAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cContextScopeContextParserRuleCall_1_0 = (RuleCall)cContextAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExprsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExprsScopeExpressionParserRuleCall_3_0 = (RuleCall)cExprsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cGreaterThanSignGreaterThanSignKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cExprsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cExprsScopeExpressionParserRuleCall_4_1_0 = (RuleCall)cExprsAssignment_4_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ScopeRule:
		//	'context' context=ScopeContext '=' exprs+=ScopeExpression ('>>' exprs+=ScopeExpression)* ';';
		@Override public ParserRule getRule() { return rule; }

		//'context' context=ScopeContext '=' exprs+=ScopeExpression ('>>' exprs+=ScopeExpression)* ';'
		public Group getGroup() { return cGroup; }

		//'context'
		public Keyword getContextKeyword_0() { return cContextKeyword_0; }

		//context=ScopeContext
		public Assignment getContextAssignment_1() { return cContextAssignment_1; }

		//ScopeContext
		public RuleCall getContextScopeContextParserRuleCall_1_0() { return cContextScopeContextParserRuleCall_1_0; }

		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//exprs+=ScopeExpression
		public Assignment getExprsAssignment_3() { return cExprsAssignment_3; }

		//ScopeExpression
		public RuleCall getExprsScopeExpressionParserRuleCall_3_0() { return cExprsScopeExpressionParserRuleCall_3_0; }

		//('>>' exprs+=ScopeExpression)*
		public Group getGroup_4() { return cGroup_4; }

		//'>>'
		public Keyword getGreaterThanSignGreaterThanSignKeyword_4_0() { return cGreaterThanSignGreaterThanSignKeyword_4_0; }

		//exprs+=ScopeExpression
		public Assignment getExprsAssignment_4_1() { return cExprsAssignment_4_1; }

		//ScopeExpression
		public RuleCall getExprsScopeExpressionParserRuleCall_4_1_0() { return cExprsScopeExpressionParserRuleCall_4_1_0; }

		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}

	public class ScopeContextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.avaloq.tools.ddk.xtext.scope.Scope.ScopeContext");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cGlobalAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final Keyword cGlobalAsteriskKeyword_0_0_0 = (Keyword)cGlobalAssignment_0_0.eContents().get(0);
		private final Assignment cContextTypeAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final CrossReference cContextTypeEClassCrossReference_0_1_0 = (CrossReference)cContextTypeAssignment_0_1.eContents().get(0);
		private final RuleCall cContextTypeEClassQualifiedIDParserRuleCall_0_1_0_1 = (RuleCall)cContextTypeEClassCrossReference_0_1_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cGuardAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cGuardExpressionParserRuleCall_1_1_0 = (RuleCall)cGuardAssignment_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//ScopeContext:
		//	(global?='*' | contextType=[ecore::EClass|QualifiedID]) ('[' guard=Expression ']')?;
		@Override public ParserRule getRule() { return rule; }

		//(global?='*' | contextType=[ecore::EClass|QualifiedID]) ('[' guard=Expression ']')?
		public Group getGroup() { return cGroup; }

		//global?='*' | contextType=[ecore::EClass|QualifiedID]
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//global?='*'
		public Assignment getGlobalAssignment_0_0() { return cGlobalAssignment_0_0; }

		//'*'
		public Keyword getGlobalAsteriskKeyword_0_0_0() { return cGlobalAsteriskKeyword_0_0_0; }

		//contextType=[ecore::EClass|QualifiedID]
		public Assignment getContextTypeAssignment_0_1() { return cContextTypeAssignment_0_1; }

		//[ecore::EClass|QualifiedID]
		public CrossReference getContextTypeEClassCrossReference_0_1_0() { return cContextTypeEClassCrossReference_0_1_0; }

		//QualifiedID
		public RuleCall getContextTypeEClassQualifiedIDParserRuleCall_0_1_0_1() { return cContextTypeEClassQualifiedIDParserRuleCall_0_1_0_1; }

		//('[' guard=Expression ']')?
		public Group getGroup_1() { return cGroup_1; }

		//'['
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }

		//guard=Expression
		public Assignment getGuardAssignment_1_1() { return cGuardAssignment_1_1; }

		//Expression
		public RuleCall getGuardExpressionParserRuleCall_1_1_0() { return cGuardExpressionParserRuleCall_1_1_0; }

		//']'
		public Keyword getRightSquareBracketKeyword_1_2() { return cRightSquareBracketKeyword_1_2; }
	}

	public class ScopeExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.avaloq.tools.ddk.xtext.scope.Scope.ScopeExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cScopeDelegationParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cFactoryExpressionParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cNamedScopeExpressionParserRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cVerticalLineKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cPruneAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cPruneExpressionParserRuleCall_1_1_0 = (RuleCall)cPruneAssignment_1_1.eContents().get(0);
		
		//ScopeExpression:
		//	(ScopeDelegation | FactoryExpression | NamedScopeExpression) ('|' prune=Expression)?;
		@Override public ParserRule getRule() { return rule; }

		//(ScopeDelegation | FactoryExpression | NamedScopeExpression) ('|' prune=Expression)?
		public Group getGroup() { return cGroup; }

		//ScopeDelegation | FactoryExpression | NamedScopeExpression
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//ScopeDelegation
		public RuleCall getScopeDelegationParserRuleCall_0_0() { return cScopeDelegationParserRuleCall_0_0; }

		//FactoryExpression
		public RuleCall getFactoryExpressionParserRuleCall_0_1() { return cFactoryExpressionParserRuleCall_0_1; }

		//NamedScopeExpression
		public RuleCall getNamedScopeExpressionParserRuleCall_0_2() { return cNamedScopeExpressionParserRuleCall_0_2; }

		//('|' prune=Expression)?
		public Group getGroup_1() { return cGroup_1; }

		//'|'
		public Keyword getVerticalLineKeyword_1_0() { return cVerticalLineKeyword_1_0; }

		//prune=Expression
		public Assignment getPruneAssignment_1_1() { return cPruneAssignment_1_1; }

		//Expression
		public RuleCall getPruneExpressionParserRuleCall_1_1_0() { return cPruneExpressionParserRuleCall_1_1_0; }
	}

	public class FactoryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.avaloq.tools.ddk.xtext.scope.Scope.FactoryExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFactoryKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprExpressionParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		
		//FactoryExpression:
		//	'factory' expr=Expression;
		@Override public ParserRule getRule() { return rule; }

		//'factory' expr=Expression
		public Group getGroup() { return cGroup; }

		//'factory'
		public Keyword getFactoryKeyword_0() { return cFactoryKeyword_0; }

		//expr=Expression
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }

		//Expression
		public RuleCall getExprExpressionParserRuleCall_1_0() { return cExprExpressionParserRuleCall_1_0; }
	}

	public class ScopeDelegationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.avaloq.tools.ddk.xtext.scope.Scope.ScopeDelegation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cScopeofKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cDelegateAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cDelegateExpressionParserRuleCall_2_0_0 = (RuleCall)cDelegateAssignment_2_0.eContents().get(0);
		private final Assignment cExternalAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cExternalGlobalScopeExpressionParserRuleCall_2_1_0 = (RuleCall)cExternalAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cScopeAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cScopeScopeDefinitionCrossReference_3_1_0 = (CrossReference)cScopeAssignment_3_1.eContents().get(0);
		private final RuleCall cScopeScopeDefinitionIdentifierParserRuleCall_3_1_0_1 = (RuleCall)cScopeScopeDefinitionCrossReference_3_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ScopeDelegation:
		//	'scopeof' '(' (delegate=Expression | external=GlobalScopeExpression) (',' scope=[ScopeDefinition|Identifier])? ')';
		@Override public ParserRule getRule() { return rule; }

		//'scopeof' '(' (delegate=Expression | external=GlobalScopeExpression) (',' scope=[ScopeDefinition|Identifier])? ')'
		public Group getGroup() { return cGroup; }

		//'scopeof'
		public Keyword getScopeofKeyword_0() { return cScopeofKeyword_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//delegate=Expression | external=GlobalScopeExpression
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//delegate=Expression
		public Assignment getDelegateAssignment_2_0() { return cDelegateAssignment_2_0; }

		//Expression
		public RuleCall getDelegateExpressionParserRuleCall_2_0_0() { return cDelegateExpressionParserRuleCall_2_0_0; }

		//external=GlobalScopeExpression
		public Assignment getExternalAssignment_2_1() { return cExternalAssignment_2_1; }

		//GlobalScopeExpression
		public RuleCall getExternalGlobalScopeExpressionParserRuleCall_2_1_0() { return cExternalGlobalScopeExpressionParserRuleCall_2_1_0; }

		//(',' scope=[ScopeDefinition|Identifier])?
		public Group getGroup_3() { return cGroup_3; }

		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//scope=[ScopeDefinition|Identifier]
		public Assignment getScopeAssignment_3_1() { return cScopeAssignment_3_1; }

		//[ScopeDefinition|Identifier]
		public CrossReference getScopeScopeDefinitionCrossReference_3_1_0() { return cScopeScopeDefinitionCrossReference_3_1_0; }

		//Identifier
		public RuleCall getScopeScopeDefinitionIdentifierParserRuleCall_3_1_0_1() { return cScopeScopeDefinitionIdentifierParserRuleCall_3_1_0_1; }

		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class NamedScopeExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.avaloq.tools.ddk.xtext.scope.Scope.NamedScopeExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cGlobalScopeExpressionParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cSimpleScopeExpressionParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cCaseDefAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cCaseDefCaseKeyword_1_0_0 = (Keyword)cCaseDefAssignment_1_0.eContents().get(0);
		private final Assignment cCasingAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cCasingCasingEnumRuleCall_1_1_0 = (RuleCall)cCasingAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cAsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cNamingAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cNamingNamingParserRuleCall_2_1_0 = (RuleCall)cNamingAssignment_2_1.eContents().get(0);
		
		//NamedScopeExpression:
		//	(GlobalScopeExpression | SimpleScopeExpression) (caseDef?='case' casing=Casing)? ('as' naming=Naming)?;
		@Override public ParserRule getRule() { return rule; }

		//(GlobalScopeExpression | SimpleScopeExpression) (caseDef?='case' casing=Casing)? ('as' naming=Naming)?
		public Group getGroup() { return cGroup; }

		//GlobalScopeExpression | SimpleScopeExpression
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//GlobalScopeExpression
		public RuleCall getGlobalScopeExpressionParserRuleCall_0_0() { return cGlobalScopeExpressionParserRuleCall_0_0; }

		//SimpleScopeExpression
		public RuleCall getSimpleScopeExpressionParserRuleCall_0_1() { return cSimpleScopeExpressionParserRuleCall_0_1; }

		//(caseDef?='case' casing=Casing)?
		public Group getGroup_1() { return cGroup_1; }

		//caseDef?='case'
		public Assignment getCaseDefAssignment_1_0() { return cCaseDefAssignment_1_0; }

		//'case'
		public Keyword getCaseDefCaseKeyword_1_0_0() { return cCaseDefCaseKeyword_1_0_0; }

		//casing=Casing
		public Assignment getCasingAssignment_1_1() { return cCasingAssignment_1_1; }

		//Casing
		public RuleCall getCasingCasingEnumRuleCall_1_1_0() { return cCasingCasingEnumRuleCall_1_1_0; }

		//('as' naming=Naming)?
		public Group getGroup_2() { return cGroup_2; }

		//'as'
		public Keyword getAsKeyword_2_0() { return cAsKeyword_2_0; }

		//naming=Naming
		public Assignment getNamingAssignment_2_1() { return cNamingAssignment_2_1; }

		//Naming
		public RuleCall getNamingNamingParserRuleCall_2_1_0() { return cNamingNamingParserRuleCall_2_1_0; }
	}

	public class GlobalScopeExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.avaloq.tools.ddk.xtext.scope.Scope.GlobalScopeExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFindKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTypeEClassCrossReference_2_0 = (CrossReference)cTypeAssignment_2.eContents().get(0);
		private final RuleCall cTypeEClassQualifiedIDParserRuleCall_2_0_1 = (RuleCall)cTypeEClassCrossReference_2_0.eContents().get(1);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Keyword cCommaKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Keyword cKeyKeyword_3_0_1 = (Keyword)cGroup_3_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_3_0_2 = (Keyword)cGroup_3_0.eContents().get(2);
		private final Assignment cNameAssignment_3_0_3 = (Assignment)cGroup_3_0.eContents().get(3);
		private final RuleCall cNameExpressionParserRuleCall_3_0_3_0 = (RuleCall)cNameAssignment_3_0_3.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cRecursivePrefixAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final Keyword cRecursivePrefixRecursiveKeyword_3_1_1_0 = (Keyword)cRecursivePrefixAssignment_3_1_1.eContents().get(0);
		private final Keyword cPrefixKeyword_3_1_2 = (Keyword)cGroup_3_1.eContents().get(2);
		private final Keyword cEqualsSignKeyword_3_1_3 = (Keyword)cGroup_3_1.eContents().get(3);
		private final Assignment cPrefixAssignment_3_1_4 = (Assignment)cGroup_3_1.eContents().get(4);
		private final RuleCall cPrefixExpressionParserRuleCall_3_1_4_0 = (RuleCall)cPrefixAssignment_3_1_4.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cDataKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Keyword cEqualsSignKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		private final Assignment cDataAssignment_4_4 = (Assignment)cGroup_4.eContents().get(4);
		private final RuleCall cDataDataExpressionParserRuleCall_4_4_0 = (RuleCall)cDataAssignment_4_4.eContents().get(0);
		private final Group cGroup_4_5 = (Group)cGroup_4.eContents().get(5);
		private final Keyword cCommaKeyword_4_5_0 = (Keyword)cGroup_4_5.eContents().get(0);
		private final Assignment cDataAssignment_4_5_1 = (Assignment)cGroup_4_5.eContents().get(1);
		private final RuleCall cDataDataExpressionParserRuleCall_4_5_1_0 = (RuleCall)cDataAssignment_4_5_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_6 = (Keyword)cGroup_4.eContents().get(6);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cDomainsKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Keyword cEqualsSignKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final Alternatives cAlternatives_5_3 = (Alternatives)cGroup_5.eContents().get(3);
		private final Assignment cDomainsAssignment_5_3_0 = (Assignment)cAlternatives_5_3.eContents().get(0);
		private final Keyword cDomainsAsteriskKeyword_5_3_0_0 = (Keyword)cDomainsAssignment_5_3_0.eContents().get(0);
		private final Assignment cDomainsAssignment_5_3_1 = (Assignment)cAlternatives_5_3.eContents().get(1);
		private final RuleCall cDomainsIdentifierParserRuleCall_5_3_1_0 = (RuleCall)cDomainsAssignment_5_3_1.eContents().get(0);
		private final Group cGroup_5_3_2 = (Group)cAlternatives_5_3.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_5_3_2_0 = (Keyword)cGroup_5_3_2.eContents().get(0);
		private final Assignment cDomainsAssignment_5_3_2_1 = (Assignment)cGroup_5_3_2.eContents().get(1);
		private final RuleCall cDomainsIdentifierParserRuleCall_5_3_2_1_0 = (RuleCall)cDomainsAssignment_5_3_2_1.eContents().get(0);
		private final Group cGroup_5_3_2_2 = (Group)cGroup_5_3_2.eContents().get(2);
		private final Keyword cCommaKeyword_5_3_2_2_0 = (Keyword)cGroup_5_3_2_2.eContents().get(0);
		private final Assignment cDomainsAssignment_5_3_2_2_1 = (Assignment)cGroup_5_3_2_2.eContents().get(1);
		private final RuleCall cDomainsIdentifierParserRuleCall_5_3_2_2_1_0 = (RuleCall)cDomainsAssignment_5_3_2_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5_3_2_3 = (Keyword)cGroup_5_3_2.eContents().get(3);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//GlobalScopeExpression:
		//	'find' '(' type=[ecore::EClass|QualifiedID] (',' 'key' '=' name=Expression | ',' recursivePrefix?='recursive'?
		//	'prefix' '=' prefix=Expression)? (',' 'data' '=' '(' data+=DataExpression (',' data+=DataExpression)* ')')? (','
		//	'domains' '=' (domains+='*' | domains+=Identifier | '(' domains+=Identifier (',' domains+=Identifier)* ')'))? ')';
		@Override public ParserRule getRule() { return rule; }

		//'find' '(' type=[ecore::EClass|QualifiedID] (',' 'key' '=' name=Expression | ',' recursivePrefix?='recursive'? 'prefix'
		//'=' prefix=Expression)? (',' 'data' '=' '(' data+=DataExpression (',' data+=DataExpression)* ')')? (',' 'domains' '='
		//(domains+='*' | domains+=Identifier | '(' domains+=Identifier (',' domains+=Identifier)* ')'))? ')'
		public Group getGroup() { return cGroup; }

		//'find'
		public Keyword getFindKeyword_0() { return cFindKeyword_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//type=[ecore::EClass|QualifiedID]
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//[ecore::EClass|QualifiedID]
		public CrossReference getTypeEClassCrossReference_2_0() { return cTypeEClassCrossReference_2_0; }

		//QualifiedID
		public RuleCall getTypeEClassQualifiedIDParserRuleCall_2_0_1() { return cTypeEClassQualifiedIDParserRuleCall_2_0_1; }

		//(',' 'key' '=' name=Expression | ',' recursivePrefix?='recursive'? 'prefix' '=' prefix=Expression)?
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//',' 'key' '=' name=Expression
		public Group getGroup_3_0() { return cGroup_3_0; }

		//','
		public Keyword getCommaKeyword_3_0_0() { return cCommaKeyword_3_0_0; }

		//'key'
		public Keyword getKeyKeyword_3_0_1() { return cKeyKeyword_3_0_1; }

		//'='
		public Keyword getEqualsSignKeyword_3_0_2() { return cEqualsSignKeyword_3_0_2; }

		//name=Expression
		public Assignment getNameAssignment_3_0_3() { return cNameAssignment_3_0_3; }

		//Expression
		public RuleCall getNameExpressionParserRuleCall_3_0_3_0() { return cNameExpressionParserRuleCall_3_0_3_0; }

		//',' recursivePrefix?='recursive'? 'prefix' '=' prefix=Expression
		public Group getGroup_3_1() { return cGroup_3_1; }

		//','
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//recursivePrefix?='recursive'?
		public Assignment getRecursivePrefixAssignment_3_1_1() { return cRecursivePrefixAssignment_3_1_1; }

		//'recursive'
		public Keyword getRecursivePrefixRecursiveKeyword_3_1_1_0() { return cRecursivePrefixRecursiveKeyword_3_1_1_0; }

		//'prefix'
		public Keyword getPrefixKeyword_3_1_2() { return cPrefixKeyword_3_1_2; }

		//'='
		public Keyword getEqualsSignKeyword_3_1_3() { return cEqualsSignKeyword_3_1_3; }

		//prefix=Expression
		public Assignment getPrefixAssignment_3_1_4() { return cPrefixAssignment_3_1_4; }

		//Expression
		public RuleCall getPrefixExpressionParserRuleCall_3_1_4_0() { return cPrefixExpressionParserRuleCall_3_1_4_0; }

		//(',' 'data' '=' '(' data+=DataExpression (',' data+=DataExpression)* ')')?
		public Group getGroup_4() { return cGroup_4; }

		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//'data'
		public Keyword getDataKeyword_4_1() { return cDataKeyword_4_1; }

		//'='
		public Keyword getEqualsSignKeyword_4_2() { return cEqualsSignKeyword_4_2; }

		//'('
		public Keyword getLeftParenthesisKeyword_4_3() { return cLeftParenthesisKeyword_4_3; }

		//data+=DataExpression
		public Assignment getDataAssignment_4_4() { return cDataAssignment_4_4; }

		//DataExpression
		public RuleCall getDataDataExpressionParserRuleCall_4_4_0() { return cDataDataExpressionParserRuleCall_4_4_0; }

		//(',' data+=DataExpression)*
		public Group getGroup_4_5() { return cGroup_4_5; }

		//','
		public Keyword getCommaKeyword_4_5_0() { return cCommaKeyword_4_5_0; }

		//data+=DataExpression
		public Assignment getDataAssignment_4_5_1() { return cDataAssignment_4_5_1; }

		//DataExpression
		public RuleCall getDataDataExpressionParserRuleCall_4_5_1_0() { return cDataDataExpressionParserRuleCall_4_5_1_0; }

		//')'
		public Keyword getRightParenthesisKeyword_4_6() { return cRightParenthesisKeyword_4_6; }

		//(',' 'domains' '=' (domains+='*' | domains+=Identifier | '(' domains+=Identifier (',' domains+=Identifier)* ')'))?
		public Group getGroup_5() { return cGroup_5; }

		//','
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }

		//'domains'
		public Keyword getDomainsKeyword_5_1() { return cDomainsKeyword_5_1; }

		//'='
		public Keyword getEqualsSignKeyword_5_2() { return cEqualsSignKeyword_5_2; }

		//domains+='*' | domains+=Identifier | '(' domains+=Identifier (',' domains+=Identifier)* ')'
		public Alternatives getAlternatives_5_3() { return cAlternatives_5_3; }

		//domains+='*'
		public Assignment getDomainsAssignment_5_3_0() { return cDomainsAssignment_5_3_0; }

		//'*'
		public Keyword getDomainsAsteriskKeyword_5_3_0_0() { return cDomainsAsteriskKeyword_5_3_0_0; }

		//domains+=Identifier
		public Assignment getDomainsAssignment_5_3_1() { return cDomainsAssignment_5_3_1; }

		//Identifier
		public RuleCall getDomainsIdentifierParserRuleCall_5_3_1_0() { return cDomainsIdentifierParserRuleCall_5_3_1_0; }

		//'(' domains+=Identifier (',' domains+=Identifier)* ')'
		public Group getGroup_5_3_2() { return cGroup_5_3_2; }

		//'('
		public Keyword getLeftParenthesisKeyword_5_3_2_0() { return cLeftParenthesisKeyword_5_3_2_0; }

		//domains+=Identifier
		public Assignment getDomainsAssignment_5_3_2_1() { return cDomainsAssignment_5_3_2_1; }

		//Identifier
		public RuleCall getDomainsIdentifierParserRuleCall_5_3_2_1_0() { return cDomainsIdentifierParserRuleCall_5_3_2_1_0; }

		//(',' domains+=Identifier)*
		public Group getGroup_5_3_2_2() { return cGroup_5_3_2_2; }

		//','
		public Keyword getCommaKeyword_5_3_2_2_0() { return cCommaKeyword_5_3_2_2_0; }

		//domains+=Identifier
		public Assignment getDomainsAssignment_5_3_2_2_1() { return cDomainsAssignment_5_3_2_2_1; }

		//Identifier
		public RuleCall getDomainsIdentifierParserRuleCall_5_3_2_2_1_0() { return cDomainsIdentifierParserRuleCall_5_3_2_2_1_0; }

		//')'
		public Keyword getRightParenthesisKeyword_5_3_2_3() { return cRightParenthesisKeyword_5_3_2_3; }

		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}

	public class DataExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.avaloq.tools.ddk.xtext.scope.Scope.DataExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMatchDataExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLambdaDataExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//DataExpression:
		//	MatchDataExpression | LambdaDataExpression;
		@Override public ParserRule getRule() { return rule; }

		//MatchDataExpression | LambdaDataExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//MatchDataExpression
		public RuleCall getMatchDataExpressionParserRuleCall_0() { return cMatchDataExpressionParserRuleCall_0; }

		//LambdaDataExpression
		public RuleCall getLambdaDataExpressionParserRuleCall_1() { return cLambdaDataExpressionParserRuleCall_1; }
	}

	public class MatchDataExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.avaloq.tools.ddk.xtext.scope.Scope.MatchDataExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeyIdentifierParserRuleCall_0_0 = (RuleCall)cKeyAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueExpressionParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//MatchDataExpression:
		//	key=Identifier '=' value=Expression;
		@Override public ParserRule getRule() { return rule; }

		//key=Identifier '=' value=Expression
		public Group getGroup() { return cGroup; }

		//key=Identifier
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }

		//Identifier
		public RuleCall getKeyIdentifierParserRuleCall_0_0() { return cKeyIdentifierParserRuleCall_0_0; }

		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//value=Expression
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//Expression
		public RuleCall getValueExpressionParserRuleCall_2_0() { return cValueExpressionParserRuleCall_2_0; }
	}

	public class LambdaDataExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.avaloq.tools.ddk.xtext.scope.Scope.LambdaDataExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDescAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDescIdentifierParserRuleCall_1_0 = (RuleCall)cDescAssignment_1.eContents().get(0);
		private final Keyword cVerticalLineKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueExpressionParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//LambdaDataExpression:
		//	'[' desc=Identifier '|' value=Expression ']';
		@Override public ParserRule getRule() { return rule; }

		//'[' desc=Identifier '|' value=Expression ']'
		public Group getGroup() { return cGroup; }

		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//desc=Identifier
		public Assignment getDescAssignment_1() { return cDescAssignment_1; }

		//Identifier
		public RuleCall getDescIdentifierParserRuleCall_1_0() { return cDescIdentifierParserRuleCall_1_0; }

		//'|'
		public Keyword getVerticalLineKeyword_2() { return cVerticalLineKeyword_2; }

		//value=Expression
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//Expression
		public RuleCall getValueExpressionParserRuleCall_3_0() { return cValueExpressionParserRuleCall_3_0; }

		//']'
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}

	public class SimpleScopeExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.avaloq.tools.ddk.xtext.scope.Scope.SimpleScopeExpression");
		private final Assignment cExprAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cExprExpressionParserRuleCall_0 = (RuleCall)cExprAssignment.eContents().get(0);
		
		//SimpleScopeExpression:
		//	expr=Expression;
		@Override public ParserRule getRule() { return rule; }

		//expr=Expression
		public Assignment getExprAssignment() { return cExprAssignment; }

		//Expression
		public RuleCall getExprExpressionParserRuleCall_0() { return cExprExpressionParserRuleCall_0; }
	}

	public class NamingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.avaloq.tools.ddk.xtext.scope.Scope.Naming");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cGroup_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0_0 = (Keyword)cGroup_0_0.eContents().get(0);
		private final Assignment cNamesAssignment_0_0_1 = (Assignment)cGroup_0_0.eContents().get(1);
		private final RuleCall cNamesNamingExpressionParserRuleCall_0_0_1_0 = (RuleCall)cNamesAssignment_0_0_1.eContents().get(0);
		private final Group cGroup_0_0_2 = (Group)cGroup_0_0.eContents().get(2);
		private final Keyword cCommaKeyword_0_0_2_0 = (Keyword)cGroup_0_0_2.eContents().get(0);
		private final Assignment cNamesAssignment_0_0_2_1 = (Assignment)cGroup_0_0_2.eContents().get(1);
		private final RuleCall cNamesNamingExpressionParserRuleCall_0_0_2_1_0 = (RuleCall)cNamesAssignment_0_0_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_0_3 = (Keyword)cGroup_0_0.eContents().get(3);
		private final Assignment cNamesAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cNamesNamingExpressionParserRuleCall_1_0 = (RuleCall)cNamesAssignment_1.eContents().get(0);
		
		//Naming:
		//	-> ('(' names+=NamingExpression (',' names+=NamingExpression)* ')') | names+=NamingExpression;
		@Override public ParserRule getRule() { return rule; }

		//-> ('(' names+=NamingExpression (',' names+=NamingExpression)* ')') | names+=NamingExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//-> ('(' names+=NamingExpression (',' names+=NamingExpression)* ')')
		public Group getGroup_0() { return cGroup_0; }

		//'(' names+=NamingExpression (',' names+=NamingExpression)* ')'
		public Group getGroup_0_0() { return cGroup_0_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_0_0_0() { return cLeftParenthesisKeyword_0_0_0; }

		//names+=NamingExpression
		public Assignment getNamesAssignment_0_0_1() { return cNamesAssignment_0_0_1; }

		//NamingExpression
		public RuleCall getNamesNamingExpressionParserRuleCall_0_0_1_0() { return cNamesNamingExpressionParserRuleCall_0_0_1_0; }

		//(',' names+=NamingExpression)*
		public Group getGroup_0_0_2() { return cGroup_0_0_2; }

		//','
		public Keyword getCommaKeyword_0_0_2_0() { return cCommaKeyword_0_0_2_0; }

		//names+=NamingExpression
		public Assignment getNamesAssignment_0_0_2_1() { return cNamesAssignment_0_0_2_1; }

		//NamingExpression
		public RuleCall getNamesNamingExpressionParserRuleCall_0_0_2_1_0() { return cNamesNamingExpressionParserRuleCall_0_0_2_1_0; }

		//')'
		public Keyword getRightParenthesisKeyword_0_0_3() { return cRightParenthesisKeyword_0_0_3; }

		//names+=NamingExpression
		public Assignment getNamesAssignment_1() { return cNamesAssignment_1; }

		//NamingExpression
		public RuleCall getNamesNamingExpressionParserRuleCall_1_0() { return cNamesNamingExpressionParserRuleCall_1_0; }
	}

	public class NamingExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.avaloq.tools.ddk.xtext.scope.Scope.NamingExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cExportAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cExportExportKeyword_0_0 = (Keyword)cExportAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cFactoryAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cFactoryFactoryKeyword_1_0_0 = (Keyword)cFactoryAssignment_1_0.eContents().get(0);
		private final Assignment cExpressionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_1_0 = (RuleCall)cExpressionAssignment_1_1.eContents().get(0);
		
		//NamingExpression:
		//	export?='export' | factory?='factory'? expression=Expression;
		@Override public ParserRule getRule() { return rule; }

		//export?='export' | factory?='factory'? expression=Expression
		public Alternatives getAlternatives() { return cAlternatives; }

		//export?='export'
		public Assignment getExportAssignment_0() { return cExportAssignment_0; }

		//'export'
		public Keyword getExportExportKeyword_0_0() { return cExportExportKeyword_0_0; }

		//factory?='factory'? expression=Expression
		public Group getGroup_1() { return cGroup_1; }

		//factory?='factory'?
		public Assignment getFactoryAssignment_1_0() { return cFactoryAssignment_1_0; }

		//'factory'
		public Keyword getFactoryFactoryKeyword_1_0_0() { return cFactoryFactoryKeyword_1_0_0; }

		//expression=Expression
		public Assignment getExpressionAssignment_1_1() { return cExpressionAssignment_1_1; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_1_0() { return cExpressionExpressionParserRuleCall_1_1_0; }
	}

	public class QualifiedIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.avaloq.tools.ddk.xtext.scope.Scope.QualifiedID");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIdentifierParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cColonColonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIdentifierParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedID:
		//	Identifier ('::' Identifier)*;
		@Override public ParserRule getRule() { return rule; }

		//Identifier ('::' Identifier)*
		public Group getGroup() { return cGroup; }

		//Identifier
		public RuleCall getIdentifierParserRuleCall_0() { return cIdentifierParserRuleCall_0; }

		//('::' Identifier)*
		public Group getGroup_1() { return cGroup_1; }

		//'::'
		public Keyword getColonColonKeyword_1_0() { return cColonColonKeyword_1_0; }

		//Identifier
		public RuleCall getIdentifierParserRuleCall_1_1() { return cIdentifierParserRuleCall_1_1; }
	}

	public class DottedIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.avaloq.tools.ddk.xtext.scope.Scope.DottedID");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIdentifierParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIdentifierParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//DottedID:
		//	Identifier ('.' Identifier)*;
		@Override public ParserRule getRule() { return rule; }

		//Identifier ('.' Identifier)*
		public Group getGroup() { return cGroup; }

		//Identifier
		public RuleCall getIdentifierParserRuleCall_0() { return cIdentifierParserRuleCall_0; }

		//('.' Identifier)*
		public Group getGroup_1() { return cGroup_1; }

		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//Identifier
		public RuleCall getIdentifierParserRuleCall_1_1() { return cIdentifierParserRuleCall_1_1; }
	}
	
	
	public class CasingElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "com.avaloq.tools.ddk.xtext.scope.Scope.Casing");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSENSITIVEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSENSITIVESensitiveKeyword_0_0 = (Keyword)cSENSITIVEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cINSENSITIVEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cINSENSITIVEInsensitiveKeyword_1_0 = (Keyword)cINSENSITIVEEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum Casing:
		//	SENSITIVE='sensitive' | INSENSITIVE='insensitive';
		public EnumRule getRule() { return rule; }

		//SENSITIVE='sensitive' | INSENSITIVE='insensitive'
		public Alternatives getAlternatives() { return cAlternatives; }

		//SENSITIVE='sensitive'
		public EnumLiteralDeclaration getSENSITIVEEnumLiteralDeclaration_0() { return cSENSITIVEEnumLiteralDeclaration_0; }

		//'sensitive'
		public Keyword getSENSITIVESensitiveKeyword_0_0() { return cSENSITIVESensitiveKeyword_0_0; }

		//INSENSITIVE='insensitive'
		public EnumLiteralDeclaration getINSENSITIVEEnumLiteralDeclaration_1() { return cINSENSITIVEEnumLiteralDeclaration_1; }

		//'insensitive'
		public Keyword getINSENSITIVEInsensitiveKeyword_1_0() { return cINSENSITIVEInsensitiveKeyword_1_0; }
	}
	
	private final ScopeModelElements pScopeModel;
	private final ImportElements pImport;
	private final ExtensionElements pExtension;
	private final InjectionElements pInjection;
	private final CasingElements eCasing;
	private final NamingSectionElements pNamingSection;
	private final NamingDefinitionElements pNamingDefinition;
	private final ScopeDefinitionElements pScopeDefinition;
	private final ScopeRuleElements pScopeRule;
	private final ScopeContextElements pScopeContext;
	private final ScopeExpressionElements pScopeExpression;
	private final FactoryExpressionElements pFactoryExpression;
	private final ScopeDelegationElements pScopeDelegation;
	private final NamedScopeExpressionElements pNamedScopeExpression;
	private final GlobalScopeExpressionElements pGlobalScopeExpression;
	private final DataExpressionElements pDataExpression;
	private final MatchDataExpressionElements pMatchDataExpression;
	private final LambdaDataExpressionElements pLambdaDataExpression;
	private final SimpleScopeExpressionElements pSimpleScopeExpression;
	private final NamingElements pNaming;
	private final NamingExpressionElements pNamingExpression;
	private final QualifiedIDElements pQualifiedID;
	private final DottedIDElements pDottedID;
	
	private final Grammar grammar;

	private final ExpressionGrammarAccess gaExpression;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public ScopeGrammarAccess(GrammarProvider grammarProvider,
		ExpressionGrammarAccess gaExpression,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaExpression = gaExpression;
		this.gaTerminals = gaTerminals;
		this.pScopeModel = new ScopeModelElements();
		this.pImport = new ImportElements();
		this.pExtension = new ExtensionElements();
		this.pInjection = new InjectionElements();
		this.eCasing = new CasingElements();
		this.pNamingSection = new NamingSectionElements();
		this.pNamingDefinition = new NamingDefinitionElements();
		this.pScopeDefinition = new ScopeDefinitionElements();
		this.pScopeRule = new ScopeRuleElements();
		this.pScopeContext = new ScopeContextElements();
		this.pScopeExpression = new ScopeExpressionElements();
		this.pFactoryExpression = new FactoryExpressionElements();
		this.pScopeDelegation = new ScopeDelegationElements();
		this.pNamedScopeExpression = new NamedScopeExpressionElements();
		this.pGlobalScopeExpression = new GlobalScopeExpressionElements();
		this.pDataExpression = new DataExpressionElements();
		this.pMatchDataExpression = new MatchDataExpressionElements();
		this.pLambdaDataExpression = new LambdaDataExpressionElements();
		this.pSimpleScopeExpression = new SimpleScopeExpressionElements();
		this.pNaming = new NamingElements();
		this.pNamingExpression = new NamingExpressionElements();
		this.pQualifiedID = new QualifiedIDElements();
		this.pDottedID = new DottedIDElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.avaloq.tools.ddk.xtext.scope.Scope".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public ExpressionGrammarAccess getExpressionGrammarAccess() {
		return gaExpression;
	}

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//ScopeModel:
	//	'scoping' name=DottedID ('with' includedScopes+=[ScopeModel|DottedID])? imports+=Import* extensions+=Extension*
	//	injections+=Injection* naming=NamingSection? scopes+=ScopeDefinition*;
	public ScopeModelElements getScopeModelAccess() {
		return pScopeModel;
	}
	
	public ParserRule getScopeModelRule() {
		return getScopeModelAccess().getRule();
	}

	//Import:
	//	'import' package=[ecore::EPackage|STRING] ('as' name=Identifier)?;
	public ImportElements getImportAccess() {
		return pImport;
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}

	//Extension:
	//	'extension' extension=QualifiedID;
	public ExtensionElements getExtensionAccess() {
		return pExtension;
	}
	
	public ParserRule getExtensionRule() {
		return getExtensionAccess().getRule();
	}

	//Injection:
	//	'inject' type=DottedID 'as' name=Identifier;
	public InjectionElements getInjectionAccess() {
		return pInjection;
	}
	
	public ParserRule getInjectionRule() {
		return getInjectionAccess().getRule();
	}

	//enum Casing:
	//	SENSITIVE='sensitive' | INSENSITIVE='insensitive';
	public CasingElements getCasingAccess() {
		return eCasing;
	}
	
	public EnumRule getCasingRule() {
		return getCasingAccess().getRule();
	}

	//NamingSection:
	//	{NamingSection} ('case' casing=Casing)? 'naming' '{' namings+=NamingDefinition* '}';
	public NamingSectionElements getNamingSectionAccess() {
		return pNamingSection;
	}
	
	public ParserRule getNamingSectionRule() {
		return getNamingSectionAccess().getRule();
	}

	//NamingDefinition:
	//	type=[ecore::EClass|QualifiedID] '=' naming=Naming ';';
	public NamingDefinitionElements getNamingDefinitionAccess() {
		return pNamingDefinition;
	}
	
	public ParserRule getNamingDefinitionRule() {
		return getNamingDefinitionAccess().getRule();
	}

	//ScopeDefinition:
	//	'scope' ('(' name=Identifier ')')? (targetType=[ecore::EClass|QualifiedID] | contextType=[ecore::EClass|QualifiedID]
	//	'#' reference=[ecore::EReference|Identifier]) '{' rules+=ScopeRule+ '}';
	public ScopeDefinitionElements getScopeDefinitionAccess() {
		return pScopeDefinition;
	}
	
	public ParserRule getScopeDefinitionRule() {
		return getScopeDefinitionAccess().getRule();
	}

	//ScopeRule:
	//	'context' context=ScopeContext '=' exprs+=ScopeExpression ('>>' exprs+=ScopeExpression)* ';';
	public ScopeRuleElements getScopeRuleAccess() {
		return pScopeRule;
	}
	
	public ParserRule getScopeRuleRule() {
		return getScopeRuleAccess().getRule();
	}

	//ScopeContext:
	//	(global?='*' | contextType=[ecore::EClass|QualifiedID]) ('[' guard=Expression ']')?;
	public ScopeContextElements getScopeContextAccess() {
		return pScopeContext;
	}
	
	public ParserRule getScopeContextRule() {
		return getScopeContextAccess().getRule();
	}

	//ScopeExpression:
	//	(ScopeDelegation | FactoryExpression | NamedScopeExpression) ('|' prune=Expression)?;
	public ScopeExpressionElements getScopeExpressionAccess() {
		return pScopeExpression;
	}
	
	public ParserRule getScopeExpressionRule() {
		return getScopeExpressionAccess().getRule();
	}

	//FactoryExpression:
	//	'factory' expr=Expression;
	public FactoryExpressionElements getFactoryExpressionAccess() {
		return pFactoryExpression;
	}
	
	public ParserRule getFactoryExpressionRule() {
		return getFactoryExpressionAccess().getRule();
	}

	//ScopeDelegation:
	//	'scopeof' '(' (delegate=Expression | external=GlobalScopeExpression) (',' scope=[ScopeDefinition|Identifier])? ')';
	public ScopeDelegationElements getScopeDelegationAccess() {
		return pScopeDelegation;
	}
	
	public ParserRule getScopeDelegationRule() {
		return getScopeDelegationAccess().getRule();
	}

	//NamedScopeExpression:
	//	(GlobalScopeExpression | SimpleScopeExpression) (caseDef?='case' casing=Casing)? ('as' naming=Naming)?;
	public NamedScopeExpressionElements getNamedScopeExpressionAccess() {
		return pNamedScopeExpression;
	}
	
	public ParserRule getNamedScopeExpressionRule() {
		return getNamedScopeExpressionAccess().getRule();
	}

	//GlobalScopeExpression:
	//	'find' '(' type=[ecore::EClass|QualifiedID] (',' 'key' '=' name=Expression | ',' recursivePrefix?='recursive'?
	//	'prefix' '=' prefix=Expression)? (',' 'data' '=' '(' data+=DataExpression (',' data+=DataExpression)* ')')? (','
	//	'domains' '=' (domains+='*' | domains+=Identifier | '(' domains+=Identifier (',' domains+=Identifier)* ')'))? ')';
	public GlobalScopeExpressionElements getGlobalScopeExpressionAccess() {
		return pGlobalScopeExpression;
	}
	
	public ParserRule getGlobalScopeExpressionRule() {
		return getGlobalScopeExpressionAccess().getRule();
	}

	//DataExpression:
	//	MatchDataExpression | LambdaDataExpression;
	public DataExpressionElements getDataExpressionAccess() {
		return pDataExpression;
	}
	
	public ParserRule getDataExpressionRule() {
		return getDataExpressionAccess().getRule();
	}

	//MatchDataExpression:
	//	key=Identifier '=' value=Expression;
	public MatchDataExpressionElements getMatchDataExpressionAccess() {
		return pMatchDataExpression;
	}
	
	public ParserRule getMatchDataExpressionRule() {
		return getMatchDataExpressionAccess().getRule();
	}

	//LambdaDataExpression:
	//	'[' desc=Identifier '|' value=Expression ']';
	public LambdaDataExpressionElements getLambdaDataExpressionAccess() {
		return pLambdaDataExpression;
	}
	
	public ParserRule getLambdaDataExpressionRule() {
		return getLambdaDataExpressionAccess().getRule();
	}

	//SimpleScopeExpression:
	//	expr=Expression;
	public SimpleScopeExpressionElements getSimpleScopeExpressionAccess() {
		return pSimpleScopeExpression;
	}
	
	public ParserRule getSimpleScopeExpressionRule() {
		return getSimpleScopeExpressionAccess().getRule();
	}

	//Naming:
	//	-> ('(' names+=NamingExpression (',' names+=NamingExpression)* ')') | names+=NamingExpression;
	public NamingElements getNamingAccess() {
		return pNaming;
	}
	
	public ParserRule getNamingRule() {
		return getNamingAccess().getRule();
	}

	//NamingExpression:
	//	export?='export' | factory?='factory'? expression=Expression;
	public NamingExpressionElements getNamingExpressionAccess() {
		return pNamingExpression;
	}
	
	public ParserRule getNamingExpressionRule() {
		return getNamingExpressionAccess().getRule();
	}

	//QualifiedID:
	//	Identifier ('::' Identifier)*;
	public QualifiedIDElements getQualifiedIDAccess() {
		return pQualifiedID;
	}
	
	public ParserRule getQualifiedIDRule() {
		return getQualifiedIDAccess().getRule();
	}

	//DottedID:
	//	Identifier ('.' Identifier)*;
	public DottedIDElements getDottedIDAccess() {
		return pDottedID;
	}
	
	public ParserRule getDottedIDRule() {
		return getDottedIDAccess().getRule();
	}

	//// this is a translation of the expression part of
	//
	//// /org.eclipse.xtend/src/org/eclipse/internal/xtend/xtend/parser/Xtend.g
	// // to Xtext
	//
	////expression returns [Expression e]:
	// //	x=letExpression {$e=x;};
	// Expression:
	//	LetExpression | => CastedExpression | ChainExpression;
	public ExpressionGrammarAccess.ExpressionElements getExpressionAccess() {
		return gaExpression.getExpressionAccess();
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//SyntaxElement:
	//	Expression | Case | Type;
	public ExpressionGrammarAccess.SyntaxElementElements getSyntaxElementAccess() {
		return gaExpression.getSyntaxElementAccess();
	}
	
	public ParserRule getSyntaxElementRule() {
		return getSyntaxElementAccess().getRule();
	}

	////letExpression  returns [Expression e] :
	// //   'let' v=identifier '=' varExpr=castedExpression ':' target=expression
	//
	////   {$e=factory.createLetExpression(v,varExpr,target);}
	// //|  x=castedExpression {$e=x;};
	// LetExpression:
	//	'let' identifier=Identifier '=' varExpr=Expression ':' target=Expression;
	public ExpressionGrammarAccess.LetExpressionElements getLetExpressionAccess() {
		return gaExpression.getLetExpressionAccess();
	}
	
	public ParserRule getLetExpressionRule() {
		return getLetExpressionAccess().getRule();
	}

	////castedExpression returns [Expression e] :
	// //   ('(' type ')' castedExpression)=>
	//
	////	'(' t=type ')' x=chainExpression {$e = factory.createCast(t,x);}
	// //	| x=chainExpression {$e=x;};
	//
	//CastedExpression:
	//	'(' type=Type ')' target=Expression;
	public ExpressionGrammarAccess.CastedExpressionElements getCastedExpressionAccess() {
		return gaExpression.getCastedExpressionAccess();
	}
	
	public ParserRule getCastedExpressionRule() {
		return getCastedExpressionAccess().getRule();
	}

	////chainExpression  returns [Expression e] :
	//
	////	x=ifExpression {$e=x;} ( '->' right=ifExpression {$e=factory.createChainExpression($e,right);})*;
	// ChainExpression
	//Expression:
	//	ChainedExpression ({ChainExpression.first=current} '->' next=ChainedExpression)*;
	public ExpressionGrammarAccess.ChainExpressionElements getChainExpressionAccess() {
		return gaExpression.getChainExpressionAccess();
	}
	
	public ParserRule getChainExpressionRule() {
		return getChainExpressionAccess().getRule();
	}

	//ChainedExpression Expression:
	//	IfExpressionKw | IfExpressionTri | SwitchExpression;
	public ExpressionGrammarAccess.ChainedExpressionElements getChainedExpressionAccess() {
		return gaExpression.getChainedExpressionAccess();
	}
	
	public ParserRule getChainedExpressionRule() {
		return getChainedExpressionAccess().getRule();
	}

	////ifExpression  returns [Expression e] :
	//
	////	x=switchExpression {$e=x;}('?' thenPart=switchExpression ':' elsePart=switchExpression {$e=factory.createIf($e,thenPart,elsePart);})?
	//
	////|	'if' condition=switchExpression 'then' thenPart=switchExpression ('else' elsePart=expression)? {$e=factory.createIf(condition,thenPart,elsePart);};
	//
	//IfExpressionTri Expression:
	//	OrExpression ({IfExpression.condition=current} '?' thenPart=ChainedExpression ':' elsePart=ChainedExpression)?;
	public ExpressionGrammarAccess.IfExpressionTriElements getIfExpressionTriAccess() {
		return gaExpression.getIfExpressionTriAccess();
	}
	
	public ParserRule getIfExpressionTriRule() {
		return getIfExpressionTriAccess().getRule();
	}

	//IfExpressionKw IfExpression:
	//	'if' condition=ChainedExpression 'then' thenPart=ChainedExpression -> ('else' elsePart=ChainedExpression)?;
	public ExpressionGrammarAccess.IfExpressionKwElements getIfExpressionKwAccess() {
		return gaExpression.getIfExpressionKwAccess();
	}
	
	public ParserRule getIfExpressionKwRule() {
		return getIfExpressionKwAccess().getRule();
	}

	////switchExpression  returns [Expression e=null] @init {List cases = new ArrayList();} :
	//
	////   'switch' ('(' pred = orExpression ')')?
	// //   '{'
	// //   (
	// //     'case' c=orExpression  ':'  v=orExpression
	//
	////     {cases.add(factory.createCase(c, v));}
	// //   )*
	// //   'default' ':' def = orExpression
	// //   '}'
	//
	////   {$e = factory.createSwitchExpression(pred,cases,def);}
	// //|  x=orExpression {$e=x;};
	// SwitchExpression:
	//	'switch' ('(' switchExpr=OrExpression ')')? '{' case+=Case* 'default' ':' defaultExpr=OrExpression '}';
	public ExpressionGrammarAccess.SwitchExpressionElements getSwitchExpressionAccess() {
		return gaExpression.getSwitchExpressionAccess();
	}
	
	public ParserRule getSwitchExpressionRule() {
		return getSwitchExpressionAccess().getRule();
	}

	//Case:
	//	'case' condition=OrExpression ':' thenPar=OrExpression;
	public ExpressionGrammarAccess.CaseElements getCaseAccess() {
		return gaExpression.getCaseAccess();
	}
	
	public ParserRule getCaseRule() {
		return getCaseAccess().getRule();
	}

	////orExpression returns [Expression e] :
	//
	////  	x=andExpression {$e=x;} (name='||' r=andExpression 	{$e = factory.createBooleanOperation(id(name),$e,r);})*;
	//
	//OrExpression Expression:
	//	AndExpression ({BooleanOperation.left=current} operator='||' right=AndExpression)*;
	public ExpressionGrammarAccess.OrExpressionElements getOrExpressionAccess() {
		return gaExpression.getOrExpressionAccess();
	}
	
	public ParserRule getOrExpressionRule() {
		return getOrExpressionAccess().getRule();
	}

	////andExpression 	returns [Expression e] :
	//
	////	x=impliesExpression {$e=x;} (name='&&' r=impliesExpression 	{$e = factory.createBooleanOperation(id(name),$e,r);})*;
	//
	//AndExpression Expression:
	//	ImpliesExpression ({BooleanOperation.left=current} operator='&&' right=ImpliesExpression)*;
	public ExpressionGrammarAccess.AndExpressionElements getAndExpressionAccess() {
		return gaExpression.getAndExpressionAccess();
	}
	
	public ParserRule getAndExpressionRule() {
		return getAndExpressionAccess().getRule();
	}

	////impliesExpression returns [Expression e] :
	//
	////	x=relationalExpression {$e=x;} (name='implies' r=relationalExpression 	{$e = factory.createBooleanOperation(id(name),$e,r);})*;
	//
	//ImpliesExpression Expression:
	//	RelationalExpression ({BooleanOperation.left=current} operator='implies' right=RelationalExpression)*;
	public ExpressionGrammarAccess.ImpliesExpressionElements getImpliesExpressionAccess() {
		return gaExpression.getImpliesExpressionAccess();
	}
	
	public ParserRule getImpliesExpressionRule() {
		return getImpliesExpressionAccess().getRule();
	}

	////relationalExpression returns [Expression e] :
	// //	x=additiveExpression {$e=x;}
	//
	////	(name=('==' | '!=' | '>=' | '<=' | '>' | '<') r=additiveExpression {$e = factory.createBinaryOperation(id(name),$e,r);})*;
	//
	//RelationalExpression Expression:
	//	AdditiveExpression ({BooleanOperation.left=current} operator=('==' | '!=' | '>=' | '<=' | '>' | '<')
	//	right=AdditiveExpression)*;
	public ExpressionGrammarAccess.RelationalExpressionElements getRelationalExpressionAccess() {
		return gaExpression.getRelationalExpressionAccess();
	}
	
	public ParserRule getRelationalExpressionRule() {
		return getRelationalExpressionAccess().getRule();
	}

	////additiveExpression returns [Expression e] :
	// //	x=multiplicativeExpression {$e=x;}
	//
	////   (name=('+'| '-') r=multiplicativeExpression {$e = factory.createBinaryOperation(id(name),$e,r);})*;
	//
	//AdditiveExpression Expression:
	//	MultiplicativeExpression ({OperationCall.params+=current} name=('+' | '-') params+=MultiplicativeExpression)*;
	public ExpressionGrammarAccess.AdditiveExpressionElements getAdditiveExpressionAccess() {
		return gaExpression.getAdditiveExpressionAccess();
	}
	
	public ParserRule getAdditiveExpressionRule() {
		return getAdditiveExpressionAccess().getRule();
	}

	////multiplicativeExpression returns [Expression e]:
	// //	x=unaryExpression {$e=x;}
	//
	////	(name=('*' | '/') r=unaryExpression {$e = factory.createBinaryOperation(id(name),$e,r);})*;
	//
	//MultiplicativeExpression Expression:
	//	UnaryOrInfixExpression ({OperationCall.params+=current} name=('*' | '/') params+=UnaryOrInfixExpression)*;
	public ExpressionGrammarAccess.MultiplicativeExpressionElements getMultiplicativeExpressionAccess() {
		return gaExpression.getMultiplicativeExpressionAccess();
	}
	
	public ParserRule getMultiplicativeExpressionRule() {
		return getMultiplicativeExpressionAccess().getRule();
	}

	////unaryExpression returns [Expression e] :
	// //	x=infixExpression {$e=x;}
	//
	////|	name='!' x=infixExpression	{$e = factory.createOperationCall(id(name),x);}
	//
	////|	name='-' x=infixExpression	{$e = factory.createOperationCall(id(name),x);};
	// UnaryOrInfixExpression Expression:
	//	UnaryExpression | InfixExpression;
	public ExpressionGrammarAccess.UnaryOrInfixExpressionElements getUnaryOrInfixExpressionAccess() {
		return gaExpression.getUnaryOrInfixExpressionAccess();
	}
	
	public ParserRule getUnaryOrInfixExpressionRule() {
		return getUnaryOrInfixExpressionAccess().getRule();
	}

	//UnaryExpression OperationCall:
	//	name=('!' | '-') params+=InfixExpression;
	public ExpressionGrammarAccess.UnaryExpressionElements getUnaryExpressionAccess() {
		return gaExpression.getUnaryExpressionAccess();
	}
	
	public ParserRule getUnaryExpressionRule() {
		return getUnaryExpressionAccess().getRule();
	}

	////infixExpression returns [Expression e] :
	//
	////	x=primaryExpression {$e=x;} ( '.' op=featureCall { if (op!=null) { op.setTarget($e);$e=op;}} )*;
	//
	//// having support for fragments could avoid the redundancy at this point
	// InfixExpression Expression:
	//	PrimaryExpression ({OperationCall.target=current} '.' name=Identifier '(' (params+=Expression (','
	//	params+=Expression)*)? ')' | {FeatureCall.target=current} '.' type=Type | {TypeSelectExpression.target=current} '.'
	//	name='typeSelect' '(' type=Type ')' | {CollectionExpression.target=current} '.' name=('collect' | 'select' |
	//	'selectFirst' | 'reject' | 'exists' | 'notExists' | 'sortBy' | 'forAll') '(' (var=Identifier '|')? exp=Expression
	//	')')*;
	public ExpressionGrammarAccess.InfixExpressionElements getInfixExpressionAccess() {
		return gaExpression.getInfixExpressionAccess();
	}
	
	public ParserRule getInfixExpressionRule() {
		return getInfixExpressionAccess().getRule();
	}

	////primaryExpression 	 returns [Expression e] :
	// //   c=StringLiteral { $e = factory.createStringLiteral(id(c));}
	//
	////|   x=featureCall {$e=x;}
	// //|   x=booleanLiteral {$e=x;}
	// //|   x=numberLiteral {$e=x;}
	//
	////|   x=nullLiteral {$e=x;}
	// //|   x=listLiteral {$e=x;}
	// //|   x=constructorCall {$e=x;}
	//
	////|   x=globalVarExpression {$e=x;}
	// //|   x=paranthesizedExpression {$e=x;};
	// PrimaryExpression Expression:
	//	Literal | FeatureCall | ListLiteral | ConstructorCallExpression | GlobalVarExpression | ParanthesizedExpression;
	public ExpressionGrammarAccess.PrimaryExpressionElements getPrimaryExpressionAccess() {
		return gaExpression.getPrimaryExpressionAccess();
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}

	//Literal:
	//	BooleanLiteral | IntegerLiteral | NullLiteral | RealLiteral | StringLiteral;
	public ExpressionGrammarAccess.LiteralElements getLiteralAccess() {
		return gaExpression.getLiteralAccess();
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}

	//BooleanLiteral:
	//	val=('true' | 'false');
	public ExpressionGrammarAccess.BooleanLiteralElements getBooleanLiteralAccess() {
		return gaExpression.getBooleanLiteralAccess();
	}
	
	public ParserRule getBooleanLiteralRule() {
		return getBooleanLiteralAccess().getRule();
	}

	//IntegerLiteral:
	//	val=INT;
	public ExpressionGrammarAccess.IntegerLiteralElements getIntegerLiteralAccess() {
		return gaExpression.getIntegerLiteralAccess();
	}
	
	public ParserRule getIntegerLiteralRule() {
		return getIntegerLiteralAccess().getRule();
	}

	//NullLiteral:
	//	val='null';
	public ExpressionGrammarAccess.NullLiteralElements getNullLiteralAccess() {
		return gaExpression.getNullLiteralAccess();
	}
	
	public ParserRule getNullLiteralRule() {
		return getNullLiteralAccess().getRule();
	}

	//RealLiteral:
	//	val=REAL;
	public ExpressionGrammarAccess.RealLiteralElements getRealLiteralAccess() {
		return gaExpression.getRealLiteralAccess();
	}
	
	public ParserRule getRealLiteralRule() {
		return getRealLiteralAccess().getRule();
	}

	//StringLiteral:
	//	val=STRING;
	public ExpressionGrammarAccess.StringLiteralElements getStringLiteralAccess() {
		return gaExpression.getStringLiteralAccess();
	}
	
	public ParserRule getStringLiteralRule() {
		return getStringLiteralAccess().getRule();
	}

	//terminal REAL:
	//	'0'..'9'* '.' '0'..'9'*;
	public TerminalRule getREALRule() {
		return gaExpression.getREALRule();
	} 

	////paranthesizedExpression returns [Expression e] :
	//
	////    '(' x=expression ')' {$e=factory.createParanthesizedExpression(x);};
	// ParanthesizedExpression Expression:
	//	'(' Expression ')';
	public ExpressionGrammarAccess.ParanthesizedExpressionElements getParanthesizedExpressionAccess() {
		return gaExpression.getParanthesizedExpressionAccess();
	}
	
	public ParserRule getParanthesizedExpressionRule() {
		return getParanthesizedExpressionAccess().getRule();
	}

	////paranthesizedExpression returns [Expression e] :
	//
	////    '(' x=expression ')' {$e=factory.createParanthesizedExpression(x);};
	// GlobalVarExpression:
	//	'GLOBALVAR' name=Identifier;
	public ExpressionGrammarAccess.GlobalVarExpressionElements getGlobalVarExpressionAccess() {
		return gaExpression.getGlobalVarExpressionAccess();
	}
	
	public ParserRule getGlobalVarExpressionRule() {
		return getGlobalVarExpressionAccess().getRule();
	}

	////featureCall  returns [FeatureCall e] :
	//
	////	id1=identifier '(' (l=parameterList)? ')' {$e = factory.createOperationCall(id1,l);}
	//
	////|   t=type {$e=factory.createFeatureCall(t,null);}
	// //|   x=collectionExpression {$e=x;};
	// FeatureCall:
	//	OperationCall | type=Type | CollectionExpression | TypeSelectExpression;
	public ExpressionGrammarAccess.FeatureCallElements getFeatureCallAccess() {
		return gaExpression.getFeatureCallAccess();
	}
	
	public ParserRule getFeatureCallRule() {
		return getFeatureCallAccess().getRule();
	}

	//OperationCall:
	//	name=Identifier '(' (params+=Expression (',' params+=Expression)*)? ')';
	public ExpressionGrammarAccess.OperationCallElements getOperationCallAccess() {
		return gaExpression.getOperationCallAccess();
	}
	
	public ParserRule getOperationCallRule() {
		return getOperationCallAccess().getRule();
	}

	////listLiteral  returns [Expression e] :
	// //	'{' (l=parameterList)? '}' {$e=factory.createListLiteral(l);};
	// ListLiteral:
	//	{ListLiteral} '{' (elements+=Expression (',' elements+=Expression)*)? '}';
	public ExpressionGrammarAccess.ListLiteralElements getListLiteralAccess() {
		return gaExpression.getListLiteralAccess();
	}
	
	public ParserRule getListLiteralRule() {
		return getListLiteralAccess().getRule();
	}

	////constructorCall  returns [Expression e] :
	// //	'new' t=simpleType
	//
	////	{$e= factory.createConstructorCallExpression(t);};
	// ConstructorCallExpression:
	//	'new' type=SimpleType;
	public ExpressionGrammarAccess.ConstructorCallExpressionElements getConstructorCallExpressionAccess() {
		return gaExpression.getConstructorCallExpressionAccess();
	}
	
	public ParserRule getConstructorCallExpressionRule() {
		return getConstructorCallExpressionAccess().getRule();
	}

	////collectionExpression  returns [FeatureCall e] :
	// //  name='typeSelect'
	//
	////  '(' t=type ')' { $e = factory.createTypeSelectExpression(id(name),t);}
	// //   |name=('collect'
	// //  | 'select'
	//
	////  | 'selectFirst'
	// //  | 'reject'
	// //  | 'exists'
	// //  | 'notExists'
	// //  | 'sortBy'
	//
	////  | 'forAll') '(' (var=identifier '|')? x=expression ')'
	//
	//// { $e = factory.createCollectionExpression(id(name),var,x);};
	// TypeSelectExpression:
	//	name='typeSelect' '(' type=Type ')';
	public ExpressionGrammarAccess.TypeSelectExpressionElements getTypeSelectExpressionAccess() {
		return gaExpression.getTypeSelectExpressionAccess();
	}
	
	public ParserRule getTypeSelectExpressionRule() {
		return getTypeSelectExpressionAccess().getRule();
	}

	//CollectionExpression:
	//	name=('collect' | 'select' | 'selectFirst' | 'reject' | 'exists' | 'notExists' | 'sortBy' | 'forAll') '('
	//	(var=Identifier '|')? exp=Expression ')';
	public ExpressionGrammarAccess.CollectionExpressionElements getCollectionExpressionAccess() {
		return gaExpression.getCollectionExpressionAccess();
	}
	
	public ParserRule getCollectionExpressionRule() {
		return getCollectionExpressionAccess().getRule();
	}

	////type returns [Identifier id] :
	// //	a = collectionType {$id=a;}|
	// //	b = simpleType {$id=b;};
	// Type Identifier:
	//	CollectionType | SimpleType;
	public ExpressionGrammarAccess.TypeElements getTypeAccess() {
		return gaExpression.getTypeAccess();
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	////collectionType  returns [Identifier id ] :
	// //  cl=( 'Collection' | 'List' | 'Set' ) {$id = id(cl);}
	//
	////  (b='[' id1=simpleType c=']' { $id.append(id(b));$id.append(id1);$id.append(id(c));})?;
	// CollectionType Identifier:
	//	cl=('Collection' | 'List' | 'Set') '[' id1=SimpleType ']';
	public ExpressionGrammarAccess.CollectionTypeElements getCollectionTypeAccess() {
		return gaExpression.getCollectionTypeAccess();
	}
	
	public ParserRule getCollectionTypeRule() {
		return getCollectionTypeAccess().getRule();
	}

	////simpleType returns [Identifier id] :
	// //	x=identifier {$id=x;}
	//
	////	(d='::' end=identifier  {$id.append(id(d)); $id.append(end);})*;
	// SimpleType Identifier:
	//	id+=Identifier ('::' id+=Identifier)*;
	public ExpressionGrammarAccess.SimpleTypeElements getSimpleTypeAccess() {
		return gaExpression.getSimpleTypeAccess();
	}
	
	public ParserRule getSimpleTypeRule() {
		return getSimpleTypeAccess().getRule();
	}

	//Identifier:
	//	ID;
	public ExpressionGrammarAccess.IdentifierElements getIdentifierAccess() {
		return gaExpression.getIdentifierAccess();
	}
	
	public ParserRule getIdentifierRule() {
		return getIdentifierAccess().getRule();
	}

	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
