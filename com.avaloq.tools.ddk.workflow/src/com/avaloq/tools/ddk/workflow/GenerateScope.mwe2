/*******************************************************************************
 * Copyright (c) 2016 Avaloq Group AG and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Avaloq Group AG - initial API and implementation
 *******************************************************************************/
module Scope

import org.eclipse.emf.mwe.utils.*
import org.eclipse.xtext.generator.*
import org.eclipse.xtext.ui.generator.*

import com.avaloq.tools.ddk.xtext.*
import com.avaloq.tools.ddk.xtext.generator.*
import com.avaloq.tools.ddk.xtext.generator.ui.*

import com.avaloq.tools.foundation.xtext.generator.*
import com.avaloq.tools.foundation.xtext.generator.ui.*

import com.avaloq.tools.ddk.*

var languageName = "Scope"
var baseName = "Scope"
var grammar = "scope"
var grammarURI = "classpath:/com/avaloq/tools/ddk/xtext/${grammar}/${baseName}.xtext"
var editorFileExtensions = "scope"

var baseProjectName = "com.avaloq.tools.ddk.xtext"

var projectNameRt = "${baseProjectName}.${grammar}"
var projectNameUi = "${baseProjectName}.${grammar}.ui"
var projectNameIde = "${baseProjectName}.${grammar}.ide"

var runtimeProject = "../${projectNameRt}"
var ideProject = "../${projectNameIde}"
var uiProject = "../${projectNameUi}"

var projectName = "${baseProjectName}.${grammar}"
var rootPath = ".."
var modelDirectory = "metamodel/com/avaloq/tools/ddk/xtext/${grammar}"
var metamodelPlugin = "com.avaloq.tools.ddk.xtext.${grammar}"
var metamodelBase = "platform:/resource/${metamodelPlugin}"

Workflow {

    bean = com.avaloq.tools.ddk.xtext.generator.util.StandaloneSetup {
      resourceSet = org.eclipse.xtext.resource.XtextResourceSet : resourceSet {}
      platformUri = "${runtimeProject}/.."
      scanClassPath = true
      uriMap = {from = "platform:/plugin/" to = "platform:/resource/"}
      registerGenModelFile = "platform:/resource/org.eclipse.xtext/org/eclipse/xtext/Xtext.genmodel"
      registerGenModelFile = "platform:/resource/org.eclipse.emf.ecore/model/Ecore.genmodel"
      registerGenModelFile = "platform:/resource/com.avaloq.tools.ddk.xtext.expression/metamodel/com/avaloq/tools/ddk/xtext/expression/Expression.genmodel"
      registerEcoreFile = "${metamodelBase}/${modelDirectory}/${baseName}.ecore"
      registerGenModelFile = "${metamodelBase}/${modelDirectory}/${baseName}.genmodel"
    }

    component = DirectoryCleaner {
        directory = "${runtimeProject}/src-gen"
    }

    component = DirectoryCleaner {
        directory = "${ideProject}/src-gen"
    }

    component = DirectoryCleaner {
        directory = "${uiProject}/src-gen"
    }

    component = org.eclipse.xtext.xtext.generator.XtextGenerator {
        configuration = GeneratorModule {
          project = generator.model.project.ProjectConfig {
            baseName = projectName
            rootPath = rootPath
            runtimeSuffix = ""
            forceDisableIdeProject = false
            runtimeTest = {
              enabled = false
            }
            eclipsePlugin = {
              enabled = true
            }
            eclipsePluginTest = {
              enabled = false
            }
            createEclipseMetaData = true
          }
          code = {
            encoding = "UTF-8"
            lineDelimiter = "\r\n"
            fileHeader = "/*\n * generated by Xtext\n */"
            preferXtendStubs = false
          }
        }

        language = com.avaloq.tools.ddk.workflow.ExtendedLanguageConfig {
            resourceSet = resourceSet
            grammarUri = grammarURI
            languageName = languageName
            fileExtensions = editorFileExtensions

            // Java API to access grammar elements (required by several other fragments)
            fragment = org.eclipse.xtext.xtext.generator.grammarAccess.GrammarAccessFragment2 {}

            fragment = com.avaloq.tools.ddk.xtext.generator.ecore.EcoreGeneratorFragment2 {
              genModel = "${metamodelBase}/${modelDirectory}/${baseName}.genmodel"
              suppressSrcPath = "../com.avaloq.tools.ddk.typesystem/src" // Sure no relevant *ImplCustom
              suppressSrcPath = "../org.eclipse.emf.ecore/src"
              suppressSrcPath = "../org.eclipse.xtext.xbase/src"
              suppressSrcPath = "../org.eclipse.xtext/src"
              suppressSrcPath = "../org.eclipse.xtext.common.types/src"
              generateEdit = false
            }
            // the serialization component
            fragment = org.eclipse.xtext.xtext.generator.serializer.SerializerFragment2 {}

            // a custom ResourceFactory for use with EMF
            fragment = org.eclipse.xtext.xtext.generator.resourceFactory.ResourceFactoryFragment2 {}

            // the following fragment generates an Antlr parser -->
            fragment =  org.eclipse.xtext.xtext.generator.parser.antlr.XtextAntlrGeneratorFragment2 {}

            // java-based API for validation
            fragment = org.eclipse.xtext.xtext.generator.validation.ValidatorFragment2 {}

            // scoping and exporting API
            fragment = org.eclipse.xtext.xtext.generator.scoping.ImportNamespacesScopingFragment2 {}
            fragment = org.eclipse.xtext.xtext.generator.exporting.SimpleNamesFragment2 {}
            fragment = org.eclipse.xtext.xtext.generator.builder.BuilderIntegrationFragment2 {}

            // formatter API
            fragment = org.eclipse.xtext.xtext.generator.formatting.Formatter2Fragment2 {
              generateStub = false
            }

            // labeling API
            fragment = org.eclipse.xtext.xtext.generator.ui.labeling.LabelProviderFragment2 {}

            // outline API
            fragment = org.eclipse.xtext.xtext.generator.ui.outline.OutlineTreeProviderFragment2 {}
            fragment = org.eclipse.xtext.xtext.generator.ui.outline.QuickOutlineFragment2 {}

            // quickfix API
            fragment = org.eclipse.xtext.xtext.generator.ui.quickfix.QuickfixProviderFragment2 {}

            // content assist API
            fragment = org.eclipse.xtext.xtext.generator.ui.contentAssist.ContentAssistFragment2 {}

            // rename refactoring
            // fragment = refactoring.RefactorElementNameFragment {}

            // Code generator
            fragment = org.eclipse.xtext.xtext.generator.generator.GeneratorFragment2 {
              generateJavaMain = false
              generateMwe = false
              generateXtendStub = true
            }

            // provides a compare view
            fragment =  org.eclipse.xtext.xtext.generator.ui.compare.CompareFragment2 {}

            fragment = BundleVersionStripperFragment {
              bundle = "org.antlr.runtime"
              bundle = "org.eclipse.xtext.xbase.lib"
              bundle = "org.eclipse.xtend.lib"
              bundle = "org.objectweb.asm"
            }

        }
    }
}
