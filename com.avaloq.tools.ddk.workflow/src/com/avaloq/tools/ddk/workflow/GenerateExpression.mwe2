/*******************************************************************************
 * Copyright (c) 2016 Avaloq Group AG and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Avaloq Group AG - initial API and implementation
 *******************************************************************************/
module Expression

import org.eclipse.emf.mwe.utils.*
import org.eclipse.xtext.generator.*
import org.eclipse.xtext.ui.generator.*

import com.avaloq.tools.ddk.xtext.*
import com.avaloq.tools.ddk.xtext.generator.*
import com.avaloq.tools.ddk.xtext.generator.ui.*

import com.avaloq.tools.foundation.xtext.generator.*
import com.avaloq.tools.foundation.xtext.generator.ui.*

import com.avaloq.tools.ddk.*

var baseName = "Expression"
var grammar = "expression"
var grammarURI = "classpath:/com/avaloq/tools/ddk/xtext/${grammar}/${baseName}.xtext"
var file.extensions = "expression"
var projectName = "com.avaloq.tools.ddk.xtext.${grammar}"
var rootPath = ".."
var runtimeProject = "../${projectName}"

var modelDirectory = "metamodel/com/avaloq/tools/ddk/xtext/${grammar}"
var metamodelPlugin = "com.avaloq.tools.ddk.xtext.${grammar}"
var metamodelBase = "platform:/resource/${metamodelPlugin}"

Workflow {
    bean = com.avaloq.tools.ddk.xtext.generator.util.StandaloneSetup {
      resourceSet = org.eclipse.xtext.resource.XtextResourceSet : resourceSet {}
      platformUri = "${runtimeProject}/.."
      scanClassPath = true
      uriMap = {from = "platform:/plugin/" to = "platform:/resource/"}
      registerGenModelFile = "platform:/resource/org.eclipse.xtext/org/eclipse/xtext/Xtext.genmodel"
      registerGenModelFile = "platform:/resource/org.eclipse.emf.ecore/model/Ecore.genmodel"
      registerEcoreFile = "${metamodelBase}/${modelDirectory}/${baseName}.ecore"
      registerGenModelFile = "${metamodelBase}/${modelDirectory}/${baseName}.genmodel"
    }

    component = DirectoryCleaner {
        directory = "${runtimeProject}/src-gen"
    }

    component = DirectoryCleaner {
        directory = "${runtimeProject}.ide/src-gen"
    }

    component = DirectoryCleaner {
        directory = "${runtimeProject}.ui/src-gen"
    }

    component = org.eclipse.xtext.xtext.generator.XtextGenerator {
        configuration = GeneratorModule {
          project = generator.model.project.ProjectConfig {
            baseName = projectName
            rootPath = rootPath
            runtimeSuffix = ""
            forceDisableIdeProject = false
            runtimeTest = {
              enabled = false
            }
            eclipsePlugin = {
              enabled = true
            }
            eclipsePluginTest = {
              enabled = false
            }
            createEclipseMetaData = true
          }
          code = {
            encoding = "UTF-8"
            lineDelimiter = "\r\n"
            fileHeader = "/*\n * generated by Xtext\n */"
            preferXtendStubs = false
          }
        }
        language = com.avaloq.tools.ddk.workflow.ExtendedLanguageConfig {
            resourceSet = resourceSet
            grammarUri = grammarURI
            languageName = "Expression"
            fileExtensions = file.extensions

            // Java API to access grammar elements (required by several other fragments)
            fragment = org.eclipse.xtext.xtext.generator.grammarAccess.GrammarAccessFragment2 {}

            fragment = com.avaloq.tools.ddk.xtext.generator.ecore.EcoreGeneratorFragment2 {
              genModel = "${metamodelBase}/${modelDirectory}/${baseName}.genmodel"
              generateEdit = false
            }

            // the serialization component
            fragment = org.eclipse.xtext.xtext.generator.serializer.SerializerFragment2  {}

            // a custom ResourceFactory for use with EMF
            fragment = org.eclipse.xtext.xtext.generator.resourceFactory.ResourceFactoryFragment2 {}

            // The antlr parser generator fragment.
            fragment = org.eclipse.xtext.xtext.generator.parser.antlr.XtextAntlrGeneratorFragment2 {
            }

            // java-based API for validation
            fragment = org.eclipse.xtext.xtext.generator.validation.ValidatorFragment2 {}

            // scoping and exporting API
            fragment = org.eclipse.xtext.xtext.generator.scoping.ImportNamespacesScopingFragment2 {}
            fragment = org.eclipse.xtext.xtext.generator.exporting.SimpleNamesFragment2 {}
            fragment = org.eclipse.xtext.xtext.generator.builder.BuilderIntegrationFragment2 {}

            // formatter API
            fragment = org.eclipse.xtext.xtext.generator.formatting.Formatter2Fragment2 {
              generateStub = false
            }

            // quickfix API
            fragment = org.eclipse.xtext.xtext.generator.ui.quickfix.QuickfixProviderFragment2 {}

            // content assist API
            fragment = org.eclipse.xtext.xtext.generator.ui.contentAssist.ContentAssistFragment2 {}

            fragment = BundleVersionStripperFragment {
              bundle = "org.antlr.runtime"
              bundle = "org.eclipse.xtext.xbase.lib"
              bundle = "org.eclipse.xtend.lib"
              bundle = "org.objectweb.asm"
            }
        }
    }
}
