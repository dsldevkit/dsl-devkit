/*******************************************************************************
 * Copyright (c) 2016 Avaloq Evolution AG and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Avaloq Evolution AG - initial API and implementation
 *******************************************************************************/
module com.avaloq.tools.ddk.workflow.CommonXbase

import org.eclipse.emf.mwe.utils.*
import org.eclipse.xtext.generator.*
import org.eclipse.xtext.ui.generator.*

import com.avaloq.tools.ddk.xtext.*
import com.avaloq.tools.ddk.xtext.generator.*
import com.avaloq.tools.ddk.xtext.generator.ui.*

import com.avaloq.tools.foundation.xtext.generator.*
import com.avaloq.tools.foundation.xtext.generator.ui.*

import com.avaloq.tools.ddk.*

// language specific input parameters
var baseName = ""
var grammar = ""
var grammarUri = ""
var editorFileExtensions = ""
var resourceFactoryFileExtensions = ""

var registerGenModelFiles = ""
var generateEdit = false

var baseProjectName = "com.avaloq.tools.ddk"

var projectNameRt = "${baseProjectName}.${grammar}.core"
var projectNameUi = "${baseProjectName}.${grammar}.ui"
var projectNameTest = "${projectNameUi}.test"

var runtimeProject = "../${projectNameRt}"
var uiProject = "../${projectNameUi}"
var testProject = "../${projectNameTest}"

var modelDirectory = "src/com/avaloq/tools/ddk/${grammar}"
var xmiModelDirectory = "src-gen/com/avaloq/tools/ddk/${grammar}"
var metamodelPlugin = ""  // where the metamodel of the language is defined
var metamodelBase = "platform:/resource/${metamodelPlugin}"

var contentTypes = ""
var languageName = ""
var preferencePagesCategory = ""
var generateNonNLSMarkers = true

Workflow {

  bean = com.avaloq.tools.ddk.xtext.generator.util.StandaloneSetup {
    resourceSet = org.eclipse.xtext.resource.XtextResourceSet : resourceSet {}
    platformUri = "${runtimeProject}/.."
    scanClassPath = true
    uriMap = {from = "platform:/plugin/" to = "platform:/resource/"}
    registerGenModelFile = "platform:/resource/com.avaloq.tools.ddk.typesystem/model/TypeModel.genmodel"
    registerGenModelFile = "platform:/resource/org.eclipse.xtext.xbase/model/Xbase.genmodel"
    registerGenModelFile = "platform:/resource/org.eclipse.xtext.common.types/model/JavaVMTypes.genmodel"
    registerGenModelFiles = "${registerGenModelFiles}"
    registerEcoreFile = "${metamodelBase}/${modelDirectory}/${baseName}.ecore"
    registerGenModelFile = "${metamodelBase}/${modelDirectory}/${baseName}.genmodel"
  }

  component = DirectoryCleaner {
    directory = "${runtimeProject}/src-gen"
    exclude = "Abstract${baseName}Formatter.java"
  }
  component = DirectoryCleaner {
    directory = "${uiProject}/src-gen"
  }
  component = DirectoryCleaner {
    directory = "${xmiModelDirectory}"
    exclude = "Wfd.gmfgen"
    exclude = "Wfd.trace"
    exclude = "Wfd.transformed.gmfgen"
  }
  component = DirectoryCleaner {
    directory = "${testProject}/src-gen/"
  }
  component = com.avaloq.tools.ddk.xtext.generator.util.CustomClassAwareEcoreGenerator {
    genModel = "${metamodelBase}/${modelDirectory}/${baseName}.genmodel"
    suppressSrcPath = "../com.avaloq.tools.ddk.typesystem/src" // Sure no relevant *ImplCustom
    suppressSrcPath = "../org.eclipse.emf.ecore/src"
    suppressSrcPath = "../org.eclipse.xtext.xbase/src"
    suppressSrcPath = "../org.eclipse.xtext/src"
    suppressSrcPath = "../org.eclipse.xtext.common.types/src"
    generateEdit = generateEdit
  }

  component = Generator {
    pathRtProject = runtimeProject
    pathUiProject = uiProject
    pathTestProject = testProject
    projectNameRt = projectNameRt
    projectNameUi = projectNameUi

    language = ExtendedLanguageConfig {
      forcedResourceSet = resourceSet
      uri = grammarUri
      contentTypes = contentTypes
      languageName = languageName
      fileExtensions = editorFileExtensions
      preferencePagesCategory = preferencePagesCategory

      // Java API to access grammar elements (required by several other fragments)
      fragment = grammarAccess.GrammarAccessFragment {}

      // generates Java API for the generated EPackages, incl. factory for custom classes (enables usage of XyzCustom.java classes)
      fragment = com.avaloq.tools.ddk.xtext.generator.ecore.CustomClassEcoreGeneratorFragment auto-inject {
        fileExtensions = editorFileExtensions
        javaModelSrcDirectory = "${runtimeProject}/src"
        javaModelSrcDirectory = "../com.avaloq.tools.foundation.xtext.core/src"
        javaModelSrcDirectory = "../com.avaloq.tools.dsl.avqscript.core/src" // common base language
        javaModelSrcDirectory = "../com.avaloq.tools.dsl.replayout.core/src" // common base language
        generateNonNLSMarkers = generateNonNLSMarkers
      }

      // the serialization component
      fragment = serializer.SerializerFragment {}

      // the following fragment generates an Antlr parser
      fragment = org.eclipse.xtext.generator.parser.antlr.XtextAntlrGeneratorFragment {}


      // a custom ResourceFactory for use with EMF
      fragment = resourceFactory.ResourceFactoryFragment {
        fileExtensions = resourceFactoryFileExtensions
      }

      // java-based API for validation
      fragment = validation.JavaValidatorFragment {}

      // scoping API
      fragment = scoping.ImportNamespacesScopingFragment {
        generateStub = false
      }
      fragment = exporting.QualifiedNamesFragment {}

      // testing API
      fragment = junit.Junit4Fragment {}

      // formatter API
      fragment = org.eclipse.xtext.generator.formatting.FormatterFragment {}

      // labeling API
      fragment = labeling.LabelProviderFragment {}

      // outline API
      fragment = outline.QuickOutlineFragment {}
      fragment = outline.OutlineTreeProviderFragment {}

      // java-based API for content assistance
      fragment = contentAssist.JavaBasedContentAssistFragment {}

      fragment = parser.antlr.XtextAntlrUiGeneratorFragment {}

      fragment = org.eclipse.xtext.generator.builder.BuilderIntegrationFragment {}

      // quickfix API
      fragment = quickfix.QuickfixProviderFragment {}

      // rename refactoring
      fragment = refactoring.RefactorElementNameFragment {
        useJdtRefactoring = true
      }

      // provides a compare view
      fragment = org.eclipse.xtext.ui.generator.compare.CompareFragment {
        fileExtensions = editorFileExtensions
      }

      // Xbase support
      fragment = types.TypesGeneratorFragment {}
      fragment = xbase.FixedXbaseGeneratorFragment {}

      // Code generator
      fragment = generator.GeneratorFragment {
        generateJavaMain = false
        generateMwe = false
      }

      fragment = templates.CodetemplatesGeneratorFragment {}

    }
  }
}
