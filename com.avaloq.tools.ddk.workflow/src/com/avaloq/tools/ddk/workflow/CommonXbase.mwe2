/*******************************************************************************
 * Copyright (c) 2016 Avaloq Group AG and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Avaloq Group AG - initial API and implementation
 *******************************************************************************/
module com.avaloq.tools.ddk.workflow.CommonXbase

import org.eclipse.emf.mwe.utils.*
import org.eclipse.xtext.xtext.generator.*
import org.eclipse.xtext.xtext.generator.ui.*

import com.avaloq.tools.ddk.xtext.*
import com.avaloq.tools.ddk.xtext.generator.*
import com.avaloq.tools.ddk.xtext.generator.ui.*
import com.avaloq.tools.ddk.xtext.generator.resourceFactory.*

import com.avaloq.tools.foundation.xtext.generator.*
import com.avaloq.tools.foundation.xtext.generator.ui.*

import com.avaloq.tools.ddk.*

// language specific input parameters
var baseName = ""
var grammar = ""
var grammarUri = ""
var editorFileExtensions = ""
var resourceFactoryFileExtensions = "${editorFileExtensions}"

var registerGenModelFiles = ""
var generateEdit = false
var generateLspSetup = false

var baseProjectName = "com.avaloq.tools.ddk"

var projectNameRt = "${baseProjectName}.${grammar}.core"
var projectNameUi = "${baseProjectName}.${grammar}.ui"
var projectNameIde = "${baseProjectName}.${grammar}.ide"
var projectNameTest = "${projectNameUi}.test"

var runtimeProject = "../${projectNameRt}"
var ideProject = "../${projectNameIde}"
var uiProject = "../${projectNameUi}"
var testProject = "../${projectNameTest}"
var projectName = "${baseProjectName}.${grammar}"
var rootPath = ".."
var modelDirectory = "src/com/avaloq/tools/ddk/${grammar}"
var xmiModelDirectory = "src-gen/com/avaloq/tools/ddk/${grammar}"
var metamodelPlugin = ""  // where the metamodel of the language is defined
var metamodelBase = "platform:/resource/${metamodelPlugin}"

var contentTypes = ""
var languageName = ""
var preferencePagesCategory = ""

Workflow {

  bean = com.avaloq.tools.ddk.xtext.generator.util.StandaloneSetup {
    resourceSet = org.eclipse.xtext.resource.XtextResourceSet : resourceSet {}
    platformUri = "${runtimeProject}/.."
    scanClassPath = true
    uriMap = {from = "platform:/plugin/" to = "platform:/resource/"}
    registerGenModelFile = "platform:/resource/com.avaloq.tools.ddk.typesystem/model/TypeModel.genmodel"
    registerGenModelFile = "platform:/resource/org.eclipse.xtext.xbase/model/Xbase.genmodel"
    registerGenModelFile = "platform:/resource/org.eclipse.xtext.common.types/model/JavaVMTypes.genmodel"
    registerGenModelFiles = "${registerGenModelFiles}"
    registerEcoreFile = "${metamodelBase}/${modelDirectory}/${baseName}.ecore"
    registerGenModelFile = "${metamodelBase}/${modelDirectory}/${baseName}.genmodel"
  }

  component = DirectoryCleaner {
    directory = "${runtimeProject}/src-gen"
    exclude = "Abstract${baseName}Formatter.java"
  }
  component = DirectoryCleaner {
    directory = "${ideProject}/src-gen"
  }
  component = DirectoryCleaner {
    directory = "${uiProject}/src-gen"
  }
  component = DirectoryCleaner {
    directory = "${xmiModelDirectory}"
  }
  component = DirectoryCleaner {
    directory = "${testProject}/src-gen/"
  }

  component = XtextGenerator {
    configuration = GeneratorModule {
      project = generator.model.project.ProjectConfig {
        baseName = projectName
        rootPath = rootPath
        runtimeSuffix = "core"
        forceDisableIdeProject = false
        runtimeTest = {
          enabled = false
        }
        eclipsePlugin = {
          enabled = true
        }
        eclipsePluginTest = {
          enabled = false
        }
        createEclipseMetaData = true
      }
      code = {
        encoding = "UTF-8"
        lineDelimiter = "\r\n"
        fileHeader = "/*\n * generated by Xtext\n */"
        preferXtendStubs = false
      }
    }

    language = ExtendedLanguageConfig {
      resourceSet = resourceSet
      grammarUri = grammarUri
      contentTypes = contentTypes
      languageName = languageName
      fileExtensions = editorFileExtensions
      preferencePagesCategory = preferencePagesCategory

      // Java API to access grammar elements (required by several other fragments)
      fragment = grammarAccess.GrammarAccessFragment2 {}

      fragment = com.avaloq.tools.ddk.xtext.generator.ecore.EcoreGeneratorFragment2 {
        genModel = "${metamodelBase}/${modelDirectory}/${baseName}.genmodel"
        suppressSrcPath = "../com.avaloq.tools.ddk.typesystem/src" // Sure no relevant *ImplCustom
        suppressSrcPath = "../org.eclipse.emf.ecore/src"
        suppressSrcPath = "../org.eclipse.xtext.xbase/src"
        suppressSrcPath = "../org.eclipse.xtext/src"
        suppressSrcPath = "../org.eclipse.xtext.common.types/src"
        generateEdit = generateEdit
      }

      // the serialization component
      fragment = serializer.SerializerFragment2 {}

      // the following fragment generates an Antlr parser
      fragment = parser.antlr.XtextAntlrGeneratorFragment2 {}

      // a custom ResourceFactory for use with EMF
      fragment = ResourceFactoryFragment2 {
        fileExtensions = resourceFactoryFileExtensions
      }

      // java-based API for validation
      fragment = validation.ValidatorFragment2 {}

      fragment = exporting.QualifiedNamesFragment2 {}

      // testing API
      fragment = junit.JUnitFragment {}

      // formatter API
      fragment = formatting.Formatter2Fragment2 {
        generateStub = false
      }

      // labeling API
      fragment = labeling.LabelProviderFragment2 {}

      // outline API
      fragment = outline.QuickOutlineFragment2 {}
      fragment = outline.OutlineTreeProviderFragment2 {}

      // java-based API for content assistance
      fragment = contentAssist.ContentAssistFragment2 {}

      fragment = org.eclipse.xtext.xtext.generator.builder.BuilderIntegrationFragment2 {}

      fragment = ConditionalXtextGeneratorFragment {
        enabled = generateLspSetup
        fragment = builder.LspBuilderIntegrationFragment2 {}
      }

      // quickfix API
      fragment = quickfix.QuickfixProviderFragment2 {}

      // rename refactoring
      fragment = refactoring.RefactorElementNameFragment2 {
        useJdtRefactoring = true
      }

      // provides a compare view
      fragment = org.eclipse.xtext.xtext.generator.ui.compare.CompareFragment2 {}

      // Xbase support
      fragment = types.TypesGeneratorFragment2 {}
      fragment = xbase.XtypeGeneratorFragment2 {}
      fragment = xbase.XbaseGeneratorFragment2 {}

      // Code generator
      fragment = generator.GeneratorFragment2 {
        generateJavaMain = false
        generateMwe = false
      }

      fragment = templates.CodetemplatesGeneratorFragment2 {}

      fragment = BundleVersionStripperFragment {
        bundle = "org.antlr.runtime"
        bundle = "org.eclipse.xtext.xbase.lib"
        bundle = "org.eclipse.xtend.lib"
        bundle = "org.objectweb.asm"
      }
    }
  }
}
