/*
 * generated by Xtext
 */
package com.avaloq.tools.ddk.xtext.expression.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class ExpressionGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.avaloq.tools.ddk.xtext.expression.Expression.Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLetExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCastedExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cChainExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//// this is a translation of the expression part of
		//
		//// /org.eclipse.xtend/src/org/eclipse/internal/xtend/xtend/parser/Xtend.g
		// // to Xtext
		//
		////expression returns [Expression e]:
		// //	x=letExpression {$e=x;};
		// Expression:
		//	LetExpression | => CastedExpression | ChainExpression;
		@Override public ParserRule getRule() { return rule; }

		//LetExpression | => CastedExpression | ChainExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//LetExpression
		public RuleCall getLetExpressionParserRuleCall_0() { return cLetExpressionParserRuleCall_0; }

		//=> CastedExpression
		public RuleCall getCastedExpressionParserRuleCall_1() { return cCastedExpressionParserRuleCall_1; }

		//ChainExpression
		public RuleCall getChainExpressionParserRuleCall_2() { return cChainExpressionParserRuleCall_2; }
	}

	public class SyntaxElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.avaloq.tools.ddk.xtext.expression.Expression.SyntaxElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCaseParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//SyntaxElement:
		//	Expression | Case | Type;
		@Override public ParserRule getRule() { return rule; }

		//Expression | Case | Type
		public Alternatives getAlternatives() { return cAlternatives; }

		//Expression
		public RuleCall getExpressionParserRuleCall_0() { return cExpressionParserRuleCall_0; }

		//Case
		public RuleCall getCaseParserRuleCall_1() { return cCaseParserRuleCall_1; }

		//Type
		public RuleCall getTypeParserRuleCall_2() { return cTypeParserRuleCall_2; }
	}

	public class LetExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.avaloq.tools.ddk.xtext.expression.Expression.LetExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdentifierAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdentifierIdentifierParserRuleCall_1_0 = (RuleCall)cIdentifierAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cVarExprAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cVarExprExpressionParserRuleCall_3_0 = (RuleCall)cVarExprAssignment_3.eContents().get(0);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cTargetAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cTargetExpressionParserRuleCall_5_0 = (RuleCall)cTargetAssignment_5.eContents().get(0);
		
		////letExpression  returns [Expression e] :
		// //   'let' v=identifier '=' varExpr=castedExpression ':' target=expression
		//
		////   {$e=factory.createLetExpression(v,varExpr,target);}
		// //|  x=castedExpression {$e=x;};
		// LetExpression:
		//	'let' identifier=Identifier '=' varExpr=Expression ':' target=Expression;
		@Override public ParserRule getRule() { return rule; }

		//'let' identifier=Identifier '=' varExpr=Expression ':' target=Expression
		public Group getGroup() { return cGroup; }

		//'let'
		public Keyword getLetKeyword_0() { return cLetKeyword_0; }

		//identifier=Identifier
		public Assignment getIdentifierAssignment_1() { return cIdentifierAssignment_1; }

		//Identifier
		public RuleCall getIdentifierIdentifierParserRuleCall_1_0() { return cIdentifierIdentifierParserRuleCall_1_0; }

		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//varExpr=Expression
		public Assignment getVarExprAssignment_3() { return cVarExprAssignment_3; }

		//Expression
		public RuleCall getVarExprExpressionParserRuleCall_3_0() { return cVarExprExpressionParserRuleCall_3_0; }

		//':'
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }

		//target=Expression
		public Assignment getTargetAssignment_5() { return cTargetAssignment_5; }

		//Expression
		public RuleCall getTargetExpressionParserRuleCall_5_0() { return cTargetExpressionParserRuleCall_5_0; }
	}

	public class CastedExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.avaloq.tools.ddk.xtext.expression.Expression.CastedExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTargetAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTargetExpressionParserRuleCall_3_0 = (RuleCall)cTargetAssignment_3.eContents().get(0);
		
		////castedExpression returns [Expression e] :
		// //   ('(' type ')' castedExpression)=>
		//
		////	'(' t=type ')' x=chainExpression {$e = factory.createCast(t,x);}
		// //	| x=chainExpression {$e=x;};
		//
		//CastedExpression:
		//	'(' type=Type ')' target=Expression;
		@Override public ParserRule getRule() { return rule; }

		//'(' type=Type ')' target=Expression
		public Group getGroup() { return cGroup; }

		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//type=Type
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_1_0() { return cTypeTypeParserRuleCall_1_0; }

		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }

		//target=Expression
		public Assignment getTargetAssignment_3() { return cTargetAssignment_3; }

		//Expression
		public RuleCall getTargetExpressionParserRuleCall_3_0() { return cTargetExpressionParserRuleCall_3_0; }
	}

	public class ChainExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.avaloq.tools.ddk.xtext.expression.Expression.ChainExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cChainedExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cChainExpressionFirstAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cNextAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cNextChainedExpressionParserRuleCall_1_2_0 = (RuleCall)cNextAssignment_1_2.eContents().get(0);
		
		////chainExpression  returns [Expression e] :
		//
		////	x=ifExpression {$e=x;} ( '->' right=ifExpression {$e=factory.createChainExpression($e,right);})*;
		// ChainExpression
		//Expression:
		//	ChainedExpression ({ChainExpression.first=current} '->' next=ChainedExpression)*;
		@Override public ParserRule getRule() { return rule; }

		//ChainedExpression ({ChainExpression.first=current} '->' next=ChainedExpression)*
		public Group getGroup() { return cGroup; }

		//ChainedExpression
		public RuleCall getChainedExpressionParserRuleCall_0() { return cChainedExpressionParserRuleCall_0; }

		//({ChainExpression.first=current} '->' next=ChainedExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{ChainExpression.first=current}
		public Action getChainExpressionFirstAction_1_0() { return cChainExpressionFirstAction_1_0; }

		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_1_1() { return cHyphenMinusGreaterThanSignKeyword_1_1; }

		//next=ChainedExpression
		public Assignment getNextAssignment_1_2() { return cNextAssignment_1_2; }

		//ChainedExpression
		public RuleCall getNextChainedExpressionParserRuleCall_1_2_0() { return cNextChainedExpressionParserRuleCall_1_2_0; }
	}

	public class ChainedExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.avaloq.tools.ddk.xtext.expression.Expression.ChainedExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIfExpressionKwParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIfExpressionTriParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSwitchExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ChainedExpression Expression:
		//	IfExpressionKw | IfExpressionTri | SwitchExpression;
		@Override public ParserRule getRule() { return rule; }

		//IfExpressionKw | IfExpressionTri | SwitchExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//IfExpressionKw
		public RuleCall getIfExpressionKwParserRuleCall_0() { return cIfExpressionKwParserRuleCall_0; }

		//IfExpressionTri
		public RuleCall getIfExpressionTriParserRuleCall_1() { return cIfExpressionTriParserRuleCall_1; }

		//SwitchExpression
		public RuleCall getSwitchExpressionParserRuleCall_2() { return cSwitchExpressionParserRuleCall_2; }
	}

	public class IfExpressionTriElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.avaloq.tools.ddk.xtext.expression.Expression.IfExpressionTri");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cOrExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cIfExpressionConditionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cQuestionMarkKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cThenPartAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cThenPartChainedExpressionParserRuleCall_1_2_0 = (RuleCall)cThenPartAssignment_1_2.eContents().get(0);
		private final Keyword cColonKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cElsePartAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cElsePartChainedExpressionParserRuleCall_1_4_0 = (RuleCall)cElsePartAssignment_1_4.eContents().get(0);
		
		////ifExpression  returns [Expression e] :
		//
		////	x=switchExpression {$e=x;}('?' thenPart=switchExpression ':' elsePart=switchExpression {$e=factory.createIf($e,thenPart,elsePart);})?
		//
		////|	'if' condition=switchExpression 'then' thenPart=switchExpression ('else' elsePart=expression)? {$e=factory.createIf(condition,thenPart,elsePart);};
		//
		//IfExpressionTri Expression:
		//	OrExpression ({IfExpression.condition=current} '?' thenPart=ChainedExpression ':' elsePart=ChainedExpression)?;
		@Override public ParserRule getRule() { return rule; }

		//OrExpression ({IfExpression.condition=current} '?' thenPart=ChainedExpression ':' elsePart=ChainedExpression)?
		public Group getGroup() { return cGroup; }

		//OrExpression
		public RuleCall getOrExpressionParserRuleCall_0() { return cOrExpressionParserRuleCall_0; }

		//({IfExpression.condition=current} '?' thenPart=ChainedExpression ':' elsePart=ChainedExpression)?
		public Group getGroup_1() { return cGroup_1; }

		//{IfExpression.condition=current}
		public Action getIfExpressionConditionAction_1_0() { return cIfExpressionConditionAction_1_0; }

		//'?'
		public Keyword getQuestionMarkKeyword_1_1() { return cQuestionMarkKeyword_1_1; }

		//thenPart=ChainedExpression
		public Assignment getThenPartAssignment_1_2() { return cThenPartAssignment_1_2; }

		//ChainedExpression
		public RuleCall getThenPartChainedExpressionParserRuleCall_1_2_0() { return cThenPartChainedExpressionParserRuleCall_1_2_0; }

		//':'
		public Keyword getColonKeyword_1_3() { return cColonKeyword_1_3; }

		//elsePart=ChainedExpression
		public Assignment getElsePartAssignment_1_4() { return cElsePartAssignment_1_4; }

		//ChainedExpression
		public RuleCall getElsePartChainedExpressionParserRuleCall_1_4_0() { return cElsePartChainedExpressionParserRuleCall_1_4_0; }
	}

	public class IfExpressionKwElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.avaloq.tools.ddk.xtext.expression.Expression.IfExpressionKw");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionChainedExpressionParserRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		private final Keyword cThenKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cThenPartAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cThenPartChainedExpressionParserRuleCall_3_0 = (RuleCall)cThenPartAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Group cGroup_4_0 = (Group)cGroup_4.eContents().get(0);
		private final Keyword cElseKeyword_4_0_0 = (Keyword)cGroup_4_0.eContents().get(0);
		private final Assignment cElsePartAssignment_4_0_1 = (Assignment)cGroup_4_0.eContents().get(1);
		private final RuleCall cElsePartChainedExpressionParserRuleCall_4_0_1_0 = (RuleCall)cElsePartAssignment_4_0_1.eContents().get(0);
		
		//IfExpressionKw IfExpression:
		//	'if' condition=ChainedExpression 'then' thenPart=ChainedExpression -> ('else' elsePart=ChainedExpression)?;
		@Override public ParserRule getRule() { return rule; }

		//'if' condition=ChainedExpression 'then' thenPart=ChainedExpression -> ('else' elsePart=ChainedExpression)?
		public Group getGroup() { return cGroup; }

		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }

		//condition=ChainedExpression
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }

		//ChainedExpression
		public RuleCall getConditionChainedExpressionParserRuleCall_1_0() { return cConditionChainedExpressionParserRuleCall_1_0; }

		//'then'
		public Keyword getThenKeyword_2() { return cThenKeyword_2; }

		//thenPart=ChainedExpression
		public Assignment getThenPartAssignment_3() { return cThenPartAssignment_3; }

		//ChainedExpression
		public RuleCall getThenPartChainedExpressionParserRuleCall_3_0() { return cThenPartChainedExpressionParserRuleCall_3_0; }

		//-> ('else' elsePart=ChainedExpression)?
		public Group getGroup_4() { return cGroup_4; }

		//'else' elsePart=ChainedExpression
		public Group getGroup_4_0() { return cGroup_4_0; }

		//'else'
		public Keyword getElseKeyword_4_0_0() { return cElseKeyword_4_0_0; }

		//elsePart=ChainedExpression
		public Assignment getElsePartAssignment_4_0_1() { return cElsePartAssignment_4_0_1; }

		//ChainedExpression
		public RuleCall getElsePartChainedExpressionParserRuleCall_4_0_1_0() { return cElsePartChainedExpressionParserRuleCall_4_0_1_0; }
	}

	public class SwitchExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.avaloq.tools.ddk.xtext.expression.Expression.SwitchExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSwitchKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cSwitchExprAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSwitchExprOrExpressionParserRuleCall_1_1_0 = (RuleCall)cSwitchExprAssignment_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCaseAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCaseCaseParserRuleCall_3_0 = (RuleCall)cCaseAssignment_3.eContents().get(0);
		private final Keyword cDefaultKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cColonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cDefaultExprAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cDefaultExprOrExpressionParserRuleCall_6_0 = (RuleCall)cDefaultExprAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		////switchExpression  returns [Expression e=null] @init {List cases = new ArrayList();} :
		//
		////   'switch' ('(' pred = orExpression ')')?
		// //   '{'
		// //   (
		// //     'case' c=orExpression  ':'  v=orExpression
		//
		////     {cases.add(factory.createCase(c, v));}
		// //   )*
		// //   'default' ':' def = orExpression
		// //   '}'
		//
		////   {$e = factory.createSwitchExpression(pred,cases,def);}
		// //|  x=orExpression {$e=x;};
		// SwitchExpression:
		//	'switch' ('(' switchExpr=OrExpression ')')? '{' case+=Case* 'default' ':' defaultExpr=OrExpression '}';
		@Override public ParserRule getRule() { return rule; }

		//'switch' ('(' switchExpr=OrExpression ')')? '{' case+=Case* 'default' ':' defaultExpr=OrExpression '}'
		public Group getGroup() { return cGroup; }

		//'switch'
		public Keyword getSwitchKeyword_0() { return cSwitchKeyword_0; }

		//('(' switchExpr=OrExpression ')')?
		public Group getGroup_1() { return cGroup_1; }

		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//switchExpr=OrExpression
		public Assignment getSwitchExprAssignment_1_1() { return cSwitchExprAssignment_1_1; }

		//OrExpression
		public RuleCall getSwitchExprOrExpressionParserRuleCall_1_1_0() { return cSwitchExprOrExpressionParserRuleCall_1_1_0; }

		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//case+=Case*
		public Assignment getCaseAssignment_3() { return cCaseAssignment_3; }

		//Case
		public RuleCall getCaseCaseParserRuleCall_3_0() { return cCaseCaseParserRuleCall_3_0; }

		//'default'
		public Keyword getDefaultKeyword_4() { return cDefaultKeyword_4; }

		//':'
		public Keyword getColonKeyword_5() { return cColonKeyword_5; }

		//defaultExpr=OrExpression
		public Assignment getDefaultExprAssignment_6() { return cDefaultExprAssignment_6; }

		//OrExpression
		public RuleCall getDefaultExprOrExpressionParserRuleCall_6_0() { return cDefaultExprOrExpressionParserRuleCall_6_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class CaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.avaloq.tools.ddk.xtext.expression.Expression.Case");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCaseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionOrExpressionParserRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cThenParAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cThenParOrExpressionParserRuleCall_3_0 = (RuleCall)cThenParAssignment_3.eContents().get(0);
		
		//Case:
		//	'case' condition=OrExpression ':' thenPar=OrExpression;
		@Override public ParserRule getRule() { return rule; }

		//'case' condition=OrExpression ':' thenPar=OrExpression
		public Group getGroup() { return cGroup; }

		//'case'
		public Keyword getCaseKeyword_0() { return cCaseKeyword_0; }

		//condition=OrExpression
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }

		//OrExpression
		public RuleCall getConditionOrExpressionParserRuleCall_1_0() { return cConditionOrExpressionParserRuleCall_1_0; }

		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//thenPar=OrExpression
		public Assignment getThenParAssignment_3() { return cThenParAssignment_3; }

		//OrExpression
		public RuleCall getThenParOrExpressionParserRuleCall_3_0() { return cThenParOrExpressionParserRuleCall_3_0; }
	}

	public class OrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.avaloq.tools.ddk.xtext.expression.Expression.OrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBooleanOperationLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOperatorVerticalLineVerticalLineKeyword_1_1_0 = (Keyword)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAndExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		////orExpression returns [Expression e] :
		//
		////  	x=andExpression {$e=x;} (name='||' r=andExpression 	{$e = factory.createBooleanOperation(id(name),$e,r);})*;
		//
		//OrExpression Expression:
		//	AndExpression ({BooleanOperation.left=current} operator='||' right=AndExpression)*;
		@Override public ParserRule getRule() { return rule; }

		//AndExpression ({BooleanOperation.left=current} operator='||' right=AndExpression)*
		public Group getGroup() { return cGroup; }

		//AndExpression
		public RuleCall getAndExpressionParserRuleCall_0() { return cAndExpressionParserRuleCall_0; }

		//({BooleanOperation.left=current} operator='||' right=AndExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{BooleanOperation.left=current}
		public Action getBooleanOperationLeftAction_1_0() { return cBooleanOperationLeftAction_1_0; }

		//operator='||'
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//'||'
		public Keyword getOperatorVerticalLineVerticalLineKeyword_1_1_0() { return cOperatorVerticalLineVerticalLineKeyword_1_1_0; }

		//right=AndExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//AndExpression
		public RuleCall getRightAndExpressionParserRuleCall_1_2_0() { return cRightAndExpressionParserRuleCall_1_2_0; }
	}

	public class AndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.avaloq.tools.ddk.xtext.expression.Expression.AndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cImpliesExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBooleanOperationLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOperatorAmpersandAmpersandKeyword_1_1_0 = (Keyword)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightImpliesExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		////andExpression 	returns [Expression e] :
		//
		////	x=impliesExpression {$e=x;} (name='&&' r=impliesExpression 	{$e = factory.createBooleanOperation(id(name),$e,r);})*;
		//
		//AndExpression Expression:
		//	ImpliesExpression ({BooleanOperation.left=current} operator='&&' right=ImpliesExpression)*;
		@Override public ParserRule getRule() { return rule; }

		//ImpliesExpression ({BooleanOperation.left=current} operator='&&' right=ImpliesExpression)*
		public Group getGroup() { return cGroup; }

		//ImpliesExpression
		public RuleCall getImpliesExpressionParserRuleCall_0() { return cImpliesExpressionParserRuleCall_0; }

		//({BooleanOperation.left=current} operator='&&' right=ImpliesExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{BooleanOperation.left=current}
		public Action getBooleanOperationLeftAction_1_0() { return cBooleanOperationLeftAction_1_0; }

		//operator='&&'
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//'&&'
		public Keyword getOperatorAmpersandAmpersandKeyword_1_1_0() { return cOperatorAmpersandAmpersandKeyword_1_1_0; }

		//right=ImpliesExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//ImpliesExpression
		public RuleCall getRightImpliesExpressionParserRuleCall_1_2_0() { return cRightImpliesExpressionParserRuleCall_1_2_0; }
	}

	public class ImpliesExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.avaloq.tools.ddk.xtext.expression.Expression.ImpliesExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cRelationalExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBooleanOperationLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOperatorImpliesKeyword_1_1_0 = (Keyword)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightRelationalExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		////impliesExpression returns [Expression e] :
		//
		////	x=relationalExpression {$e=x;} (name='implies' r=relationalExpression 	{$e = factory.createBooleanOperation(id(name),$e,r);})*;
		//
		//ImpliesExpression Expression:
		//	RelationalExpression ({BooleanOperation.left=current} operator='implies' right=RelationalExpression)*;
		@Override public ParserRule getRule() { return rule; }

		//RelationalExpression ({BooleanOperation.left=current} operator='implies' right=RelationalExpression)*
		public Group getGroup() { return cGroup; }

		//RelationalExpression
		public RuleCall getRelationalExpressionParserRuleCall_0() { return cRelationalExpressionParserRuleCall_0; }

		//({BooleanOperation.left=current} operator='implies' right=RelationalExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{BooleanOperation.left=current}
		public Action getBooleanOperationLeftAction_1_0() { return cBooleanOperationLeftAction_1_0; }

		//operator='implies'
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//'implies'
		public Keyword getOperatorImpliesKeyword_1_1_0() { return cOperatorImpliesKeyword_1_1_0; }

		//right=RelationalExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//RelationalExpression
		public RuleCall getRightRelationalExpressionParserRuleCall_1_2_0() { return cRightRelationalExpressionParserRuleCall_1_2_0; }
	}

	public class RelationalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.avaloq.tools.ddk.xtext.expression.Expression.RelationalExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAdditiveExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBooleanOperationLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOperatorAlternatives_1_1_0 = (Alternatives)cOperatorAssignment_1_1.eContents().get(0);
		private final Keyword cOperatorEqualsSignEqualsSignKeyword_1_1_0_0 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOperatorExclamationMarkEqualsSignKeyword_1_1_0_1 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(1);
		private final Keyword cOperatorGreaterThanSignEqualsSignKeyword_1_1_0_2 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(2);
		private final Keyword cOperatorLessThanSignEqualsSignKeyword_1_1_0_3 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(3);
		private final Keyword cOperatorGreaterThanSignKeyword_1_1_0_4 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(4);
		private final Keyword cOperatorLessThanSignKeyword_1_1_0_5 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(5);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAdditiveExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		////relationalExpression returns [Expression e] :
		// //	x=additiveExpression {$e=x;}
		//
		////	(name=('==' | '!=' | '>=' | '<=' | '>' | '<') r=additiveExpression {$e = factory.createBinaryOperation(id(name),$e,r);})*;
		//
		//RelationalExpression Expression:
		//	AdditiveExpression ({BooleanOperation.left=current} operator=('==' | '!=' | '>=' | '<=' | '>' | '<')
		//	right=AdditiveExpression)*;
		@Override public ParserRule getRule() { return rule; }

		//AdditiveExpression ({BooleanOperation.left=current} operator=('==' | '!=' | '>=' | '<=' | '>' | '<')
		//right=AdditiveExpression)*
		public Group getGroup() { return cGroup; }

		//AdditiveExpression
		public RuleCall getAdditiveExpressionParserRuleCall_0() { return cAdditiveExpressionParserRuleCall_0; }

		//({BooleanOperation.left=current} operator=('==' | '!=' | '>=' | '<=' | '>' | '<') right=AdditiveExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{BooleanOperation.left=current}
		public Action getBooleanOperationLeftAction_1_0() { return cBooleanOperationLeftAction_1_0; }

		//operator=('==' | '!=' | '>=' | '<=' | '>' | '<')
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//('==' | '!=' | '>=' | '<=' | '>' | '<')
		public Alternatives getOperatorAlternatives_1_1_0() { return cOperatorAlternatives_1_1_0; }

		//'=='
		public Keyword getOperatorEqualsSignEqualsSignKeyword_1_1_0_0() { return cOperatorEqualsSignEqualsSignKeyword_1_1_0_0; }

		//'!='
		public Keyword getOperatorExclamationMarkEqualsSignKeyword_1_1_0_1() { return cOperatorExclamationMarkEqualsSignKeyword_1_1_0_1; }

		//'>='
		public Keyword getOperatorGreaterThanSignEqualsSignKeyword_1_1_0_2() { return cOperatorGreaterThanSignEqualsSignKeyword_1_1_0_2; }

		//'<='
		public Keyword getOperatorLessThanSignEqualsSignKeyword_1_1_0_3() { return cOperatorLessThanSignEqualsSignKeyword_1_1_0_3; }

		//'>'
		public Keyword getOperatorGreaterThanSignKeyword_1_1_0_4() { return cOperatorGreaterThanSignKeyword_1_1_0_4; }

		//'<'
		public Keyword getOperatorLessThanSignKeyword_1_1_0_5() { return cOperatorLessThanSignKeyword_1_1_0_5; }

		//right=AdditiveExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//AdditiveExpression
		public RuleCall getRightAdditiveExpressionParserRuleCall_1_2_0() { return cRightAdditiveExpressionParserRuleCall_1_2_0; }
	}

	public class AdditiveExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.avaloq.tools.ddk.xtext.expression.Expression.AdditiveExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplicativeExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOperationCallParamsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cNameAlternatives_1_1_0 = (Alternatives)cNameAssignment_1_1.eContents().get(0);
		private final Keyword cNamePlusSignKeyword_1_1_0_0 = (Keyword)cNameAlternatives_1_1_0.eContents().get(0);
		private final Keyword cNameHyphenMinusKeyword_1_1_0_1 = (Keyword)cNameAlternatives_1_1_0.eContents().get(1);
		private final Assignment cParamsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cParamsMultiplicativeExpressionParserRuleCall_1_2_0 = (RuleCall)cParamsAssignment_1_2.eContents().get(0);
		
		////additiveExpression returns [Expression e] :
		// //	x=multiplicativeExpression {$e=x;}
		//
		////   (name=('+'| '-') r=multiplicativeExpression {$e = factory.createBinaryOperation(id(name),$e,r);})*;
		//
		//AdditiveExpression Expression:
		//	MultiplicativeExpression ({OperationCall.params+=current} name=('+' | '-') params+=MultiplicativeExpression)*;
		@Override public ParserRule getRule() { return rule; }

		//MultiplicativeExpression ({OperationCall.params+=current} name=('+' | '-') params+=MultiplicativeExpression)*
		public Group getGroup() { return cGroup; }

		//MultiplicativeExpression
		public RuleCall getMultiplicativeExpressionParserRuleCall_0() { return cMultiplicativeExpressionParserRuleCall_0; }

		//({OperationCall.params+=current} name=('+' | '-') params+=MultiplicativeExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{OperationCall.params+=current}
		public Action getOperationCallParamsAction_1_0() { return cOperationCallParamsAction_1_0; }

		//name=('+' | '-')
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }

		//('+' | '-')
		public Alternatives getNameAlternatives_1_1_0() { return cNameAlternatives_1_1_0; }

		//'+'
		public Keyword getNamePlusSignKeyword_1_1_0_0() { return cNamePlusSignKeyword_1_1_0_0; }

		//'-'
		public Keyword getNameHyphenMinusKeyword_1_1_0_1() { return cNameHyphenMinusKeyword_1_1_0_1; }

		//params+=MultiplicativeExpression
		public Assignment getParamsAssignment_1_2() { return cParamsAssignment_1_2; }

		//MultiplicativeExpression
		public RuleCall getParamsMultiplicativeExpressionParserRuleCall_1_2_0() { return cParamsMultiplicativeExpressionParserRuleCall_1_2_0; }
	}

	public class MultiplicativeExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.avaloq.tools.ddk.xtext.expression.Expression.MultiplicativeExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnaryOrInfixExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOperationCallParamsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cNameAlternatives_1_1_0 = (Alternatives)cNameAssignment_1_1.eContents().get(0);
		private final Keyword cNameAsteriskKeyword_1_1_0_0 = (Keyword)cNameAlternatives_1_1_0.eContents().get(0);
		private final Keyword cNameSolidusKeyword_1_1_0_1 = (Keyword)cNameAlternatives_1_1_0.eContents().get(1);
		private final Assignment cParamsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cParamsUnaryOrInfixExpressionParserRuleCall_1_2_0 = (RuleCall)cParamsAssignment_1_2.eContents().get(0);
		
		////multiplicativeExpression returns [Expression e]:
		// //	x=unaryExpression {$e=x;}
		//
		////	(name=('*' | '/') r=unaryExpression {$e = factory.createBinaryOperation(id(name),$e,r);})*;
		//
		//MultiplicativeExpression Expression:
		//	UnaryOrInfixExpression ({OperationCall.params+=current} name=('*' | '/') params+=UnaryOrInfixExpression)*;
		@Override public ParserRule getRule() { return rule; }

		//UnaryOrInfixExpression ({OperationCall.params+=current} name=('*' | '/') params+=UnaryOrInfixExpression)*
		public Group getGroup() { return cGroup; }

		//UnaryOrInfixExpression
		public RuleCall getUnaryOrInfixExpressionParserRuleCall_0() { return cUnaryOrInfixExpressionParserRuleCall_0; }

		//({OperationCall.params+=current} name=('*' | '/') params+=UnaryOrInfixExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{OperationCall.params+=current}
		public Action getOperationCallParamsAction_1_0() { return cOperationCallParamsAction_1_0; }

		//name=('*' | '/')
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }

		//('*' | '/')
		public Alternatives getNameAlternatives_1_1_0() { return cNameAlternatives_1_1_0; }

		//'*'
		public Keyword getNameAsteriskKeyword_1_1_0_0() { return cNameAsteriskKeyword_1_1_0_0; }

		//'/'
		public Keyword getNameSolidusKeyword_1_1_0_1() { return cNameSolidusKeyword_1_1_0_1; }

		//params+=UnaryOrInfixExpression
		public Assignment getParamsAssignment_1_2() { return cParamsAssignment_1_2; }

		//UnaryOrInfixExpression
		public RuleCall getParamsUnaryOrInfixExpressionParserRuleCall_1_2_0() { return cParamsUnaryOrInfixExpressionParserRuleCall_1_2_0; }
	}

	public class UnaryOrInfixExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.avaloq.tools.ddk.xtext.expression.Expression.UnaryOrInfixExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cUnaryExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cInfixExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		////unaryExpression returns [Expression e] :
		// //	x=infixExpression {$e=x;}
		//
		////|	name='!' x=infixExpression	{$e = factory.createOperationCall(id(name),x);}
		//
		////|	name='-' x=infixExpression	{$e = factory.createOperationCall(id(name),x);};
		// UnaryOrInfixExpression Expression:
		//	UnaryExpression | InfixExpression;
		@Override public ParserRule getRule() { return rule; }

		//UnaryExpression | InfixExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//UnaryExpression
		public RuleCall getUnaryExpressionParserRuleCall_0() { return cUnaryExpressionParserRuleCall_0; }

		//InfixExpression
		public RuleCall getInfixExpressionParserRuleCall_1() { return cInfixExpressionParserRuleCall_1; }
	}

	public class UnaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.avaloq.tools.ddk.xtext.expression.Expression.UnaryExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cNameAlternatives_0_0 = (Alternatives)cNameAssignment_0.eContents().get(0);
		private final Keyword cNameExclamationMarkKeyword_0_0_0 = (Keyword)cNameAlternatives_0_0.eContents().get(0);
		private final Keyword cNameHyphenMinusKeyword_0_0_1 = (Keyword)cNameAlternatives_0_0.eContents().get(1);
		private final Assignment cParamsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cParamsInfixExpressionParserRuleCall_1_0 = (RuleCall)cParamsAssignment_1.eContents().get(0);
		
		//UnaryExpression OperationCall:
		//	name=('!' | '-') params+=InfixExpression;
		@Override public ParserRule getRule() { return rule; }

		//name=('!' | '-') params+=InfixExpression
		public Group getGroup() { return cGroup; }

		//name=('!' | '-')
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//('!' | '-')
		public Alternatives getNameAlternatives_0_0() { return cNameAlternatives_0_0; }

		//'!'
		public Keyword getNameExclamationMarkKeyword_0_0_0() { return cNameExclamationMarkKeyword_0_0_0; }

		//'-'
		public Keyword getNameHyphenMinusKeyword_0_0_1() { return cNameHyphenMinusKeyword_0_0_1; }

		//params+=InfixExpression
		public Assignment getParamsAssignment_1() { return cParamsAssignment_1; }

		//InfixExpression
		public RuleCall getParamsInfixExpressionParserRuleCall_1_0() { return cParamsInfixExpressionParserRuleCall_1_0; }
	}

	public class InfixExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.avaloq.tools.ddk.xtext.expression.Expression.InfixExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Action cOperationCallTargetAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cNameAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cNameIdentifierParserRuleCall_1_0_2_0 = (RuleCall)cNameAssignment_1_0_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_0_3 = (Keyword)cGroup_1_0.eContents().get(3);
		private final Group cGroup_1_0_4 = (Group)cGroup_1_0.eContents().get(4);
		private final Assignment cParamsAssignment_1_0_4_0 = (Assignment)cGroup_1_0_4.eContents().get(0);
		private final RuleCall cParamsExpressionParserRuleCall_1_0_4_0_0 = (RuleCall)cParamsAssignment_1_0_4_0.eContents().get(0);
		private final Group cGroup_1_0_4_1 = (Group)cGroup_1_0_4.eContents().get(1);
		private final Keyword cCommaKeyword_1_0_4_1_0 = (Keyword)cGroup_1_0_4_1.eContents().get(0);
		private final Assignment cParamsAssignment_1_0_4_1_1 = (Assignment)cGroup_1_0_4_1.eContents().get(1);
		private final RuleCall cParamsExpressionParserRuleCall_1_0_4_1_1_0 = (RuleCall)cParamsAssignment_1_0_4_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_0_5 = (Keyword)cGroup_1_0.eContents().get(5);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Action cFeatureCallTargetAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Keyword cFullStopKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cTypeAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cTypeTypeParserRuleCall_1_1_2_0 = (RuleCall)cTypeAssignment_1_1_2.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Action cTypeSelectExpressionTargetAction_1_2_0 = (Action)cGroup_1_2.eContents().get(0);
		private final Keyword cFullStopKeyword_1_2_1 = (Keyword)cGroup_1_2.eContents().get(1);
		private final Assignment cNameAssignment_1_2_2 = (Assignment)cGroup_1_2.eContents().get(2);
		private final Keyword cNameTypeSelectKeyword_1_2_2_0 = (Keyword)cNameAssignment_1_2_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_2_3 = (Keyword)cGroup_1_2.eContents().get(3);
		private final Assignment cTypeAssignment_1_2_4 = (Assignment)cGroup_1_2.eContents().get(4);
		private final RuleCall cTypeTypeParserRuleCall_1_2_4_0 = (RuleCall)cTypeAssignment_1_2_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2_5 = (Keyword)cGroup_1_2.eContents().get(5);
		private final Group cGroup_1_3 = (Group)cAlternatives_1.eContents().get(3);
		private final Action cCollectionExpressionTargetAction_1_3_0 = (Action)cGroup_1_3.eContents().get(0);
		private final Keyword cFullStopKeyword_1_3_1 = (Keyword)cGroup_1_3.eContents().get(1);
		private final Assignment cNameAssignment_1_3_2 = (Assignment)cGroup_1_3.eContents().get(2);
		private final Alternatives cNameAlternatives_1_3_2_0 = (Alternatives)cNameAssignment_1_3_2.eContents().get(0);
		private final Keyword cNameCollectKeyword_1_3_2_0_0 = (Keyword)cNameAlternatives_1_3_2_0.eContents().get(0);
		private final Keyword cNameSelectKeyword_1_3_2_0_1 = (Keyword)cNameAlternatives_1_3_2_0.eContents().get(1);
		private final Keyword cNameSelectFirstKeyword_1_3_2_0_2 = (Keyword)cNameAlternatives_1_3_2_0.eContents().get(2);
		private final Keyword cNameRejectKeyword_1_3_2_0_3 = (Keyword)cNameAlternatives_1_3_2_0.eContents().get(3);
		private final Keyword cNameExistsKeyword_1_3_2_0_4 = (Keyword)cNameAlternatives_1_3_2_0.eContents().get(4);
		private final Keyword cNameNotExistsKeyword_1_3_2_0_5 = (Keyword)cNameAlternatives_1_3_2_0.eContents().get(5);
		private final Keyword cNameSortByKeyword_1_3_2_0_6 = (Keyword)cNameAlternatives_1_3_2_0.eContents().get(6);
		private final Keyword cNameForAllKeyword_1_3_2_0_7 = (Keyword)cNameAlternatives_1_3_2_0.eContents().get(7);
		private final Keyword cLeftParenthesisKeyword_1_3_3 = (Keyword)cGroup_1_3.eContents().get(3);
		private final Group cGroup_1_3_4 = (Group)cGroup_1_3.eContents().get(4);
		private final Assignment cVarAssignment_1_3_4_0 = (Assignment)cGroup_1_3_4.eContents().get(0);
		private final RuleCall cVarIdentifierParserRuleCall_1_3_4_0_0 = (RuleCall)cVarAssignment_1_3_4_0.eContents().get(0);
		private final Keyword cVerticalLineKeyword_1_3_4_1 = (Keyword)cGroup_1_3_4.eContents().get(1);
		private final Assignment cExpAssignment_1_3_5 = (Assignment)cGroup_1_3.eContents().get(5);
		private final RuleCall cExpExpressionParserRuleCall_1_3_5_0 = (RuleCall)cExpAssignment_1_3_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3_6 = (Keyword)cGroup_1_3.eContents().get(6);
		
		////infixExpression returns [Expression e] :
		//
		////	x=primaryExpression {$e=x;} ( '.' op=featureCall { if (op!=null) { op.setTarget($e);$e=op;}} )*;
		//
		//// having support for fragments could avoid the redundancy at this point
		// InfixExpression Expression:
		//	PrimaryExpression ({OperationCall.target=current} '.' name=Identifier '(' (params+=Expression (','
		//	params+=Expression)*)? ')' | {FeatureCall.target=current} '.' type=Type | {TypeSelectExpression.target=current} '.'
		//	name='typeSelect' '(' type=Type ')' | {CollectionExpression.target=current} '.' name=('collect' | 'select' |
		//	'selectFirst' | 'reject' | 'exists' | 'notExists' | 'sortBy' | 'forAll') '(' (var=Identifier '|')? exp=Expression
		//	')')*;
		@Override public ParserRule getRule() { return rule; }

		//PrimaryExpression ({OperationCall.target=current} '.' name=Identifier '(' (params+=Expression (','
		//params+=Expression)*)? ')' | {FeatureCall.target=current} '.' type=Type | {TypeSelectExpression.target=current} '.'
		//name='typeSelect' '(' type=Type ')' | {CollectionExpression.target=current} '.' name=('collect' | 'select' |
		//'selectFirst' | 'reject' | 'exists' | 'notExists' | 'sortBy' | 'forAll') '(' (var=Identifier '|')? exp=Expression
		//')')*
		public Group getGroup() { return cGroup; }

		//PrimaryExpression
		public RuleCall getPrimaryExpressionParserRuleCall_0() { return cPrimaryExpressionParserRuleCall_0; }

		//({OperationCall.target=current} '.' name=Identifier '(' (params+=Expression (',' params+=Expression)*)? ')' |
		//{FeatureCall.target=current} '.' type=Type | {TypeSelectExpression.target=current} '.' name='typeSelect' '(' type=Type
		//')' | {CollectionExpression.target=current} '.' name=('collect' | 'select' | 'selectFirst' | 'reject' | 'exists' |
		//'notExists' | 'sortBy' | 'forAll') '(' (var=Identifier '|')? exp=Expression ')')*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//{OperationCall.target=current} '.' name=Identifier '(' (params+=Expression (',' params+=Expression)*)? ')'
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{OperationCall.target=current}
		public Action getOperationCallTargetAction_1_0_0() { return cOperationCallTargetAction_1_0_0; }

		//'.'
		public Keyword getFullStopKeyword_1_0_1() { return cFullStopKeyword_1_0_1; }

		//name=Identifier
		public Assignment getNameAssignment_1_0_2() { return cNameAssignment_1_0_2; }

		//Identifier
		public RuleCall getNameIdentifierParserRuleCall_1_0_2_0() { return cNameIdentifierParserRuleCall_1_0_2_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_1_0_3() { return cLeftParenthesisKeyword_1_0_3; }

		//(params+=Expression (',' params+=Expression)*)?
		public Group getGroup_1_0_4() { return cGroup_1_0_4; }

		//params+=Expression
		public Assignment getParamsAssignment_1_0_4_0() { return cParamsAssignment_1_0_4_0; }

		//Expression
		public RuleCall getParamsExpressionParserRuleCall_1_0_4_0_0() { return cParamsExpressionParserRuleCall_1_0_4_0_0; }

		//(',' params+=Expression)*
		public Group getGroup_1_0_4_1() { return cGroup_1_0_4_1; }

		//','
		public Keyword getCommaKeyword_1_0_4_1_0() { return cCommaKeyword_1_0_4_1_0; }

		//params+=Expression
		public Assignment getParamsAssignment_1_0_4_1_1() { return cParamsAssignment_1_0_4_1_1; }

		//Expression
		public RuleCall getParamsExpressionParserRuleCall_1_0_4_1_1_0() { return cParamsExpressionParserRuleCall_1_0_4_1_1_0; }

		//')'
		public Keyword getRightParenthesisKeyword_1_0_5() { return cRightParenthesisKeyword_1_0_5; }

		//{FeatureCall.target=current} '.' type=Type
		public Group getGroup_1_1() { return cGroup_1_1; }

		//{FeatureCall.target=current}
		public Action getFeatureCallTargetAction_1_1_0() { return cFeatureCallTargetAction_1_1_0; }

		//'.'
		public Keyword getFullStopKeyword_1_1_1() { return cFullStopKeyword_1_1_1; }

		//type=Type
		public Assignment getTypeAssignment_1_1_2() { return cTypeAssignment_1_1_2; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_1_1_2_0() { return cTypeTypeParserRuleCall_1_1_2_0; }

		//{TypeSelectExpression.target=current} '.' name='typeSelect' '(' type=Type ')'
		public Group getGroup_1_2() { return cGroup_1_2; }

		//{TypeSelectExpression.target=current}
		public Action getTypeSelectExpressionTargetAction_1_2_0() { return cTypeSelectExpressionTargetAction_1_2_0; }

		//'.'
		public Keyword getFullStopKeyword_1_2_1() { return cFullStopKeyword_1_2_1; }

		//name='typeSelect'
		public Assignment getNameAssignment_1_2_2() { return cNameAssignment_1_2_2; }

		//'typeSelect'
		public Keyword getNameTypeSelectKeyword_1_2_2_0() { return cNameTypeSelectKeyword_1_2_2_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_1_2_3() { return cLeftParenthesisKeyword_1_2_3; }

		//type=Type
		public Assignment getTypeAssignment_1_2_4() { return cTypeAssignment_1_2_4; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_1_2_4_0() { return cTypeTypeParserRuleCall_1_2_4_0; }

		//')'
		public Keyword getRightParenthesisKeyword_1_2_5() { return cRightParenthesisKeyword_1_2_5; }

		//{CollectionExpression.target=current} '.' name=('collect' | 'select' | 'selectFirst' | 'reject' | 'exists' | 'notExists'
		//| 'sortBy' | 'forAll') '(' (var=Identifier '|')? exp=Expression ')'
		public Group getGroup_1_3() { return cGroup_1_3; }

		//{CollectionExpression.target=current}
		public Action getCollectionExpressionTargetAction_1_3_0() { return cCollectionExpressionTargetAction_1_3_0; }

		//'.'
		public Keyword getFullStopKeyword_1_3_1() { return cFullStopKeyword_1_3_1; }

		//name=('collect' | 'select' | 'selectFirst' | 'reject' | 'exists' | 'notExists' | 'sortBy' | 'forAll')
		public Assignment getNameAssignment_1_3_2() { return cNameAssignment_1_3_2; }

		//('collect' | 'select' | 'selectFirst' | 'reject' | 'exists' | 'notExists' | 'sortBy' | 'forAll')
		public Alternatives getNameAlternatives_1_3_2_0() { return cNameAlternatives_1_3_2_0; }

		//'collect'
		public Keyword getNameCollectKeyword_1_3_2_0_0() { return cNameCollectKeyword_1_3_2_0_0; }

		//'select'
		public Keyword getNameSelectKeyword_1_3_2_0_1() { return cNameSelectKeyword_1_3_2_0_1; }

		//'selectFirst'
		public Keyword getNameSelectFirstKeyword_1_3_2_0_2() { return cNameSelectFirstKeyword_1_3_2_0_2; }

		//'reject'
		public Keyword getNameRejectKeyword_1_3_2_0_3() { return cNameRejectKeyword_1_3_2_0_3; }

		//'exists'
		public Keyword getNameExistsKeyword_1_3_2_0_4() { return cNameExistsKeyword_1_3_2_0_4; }

		//'notExists'
		public Keyword getNameNotExistsKeyword_1_3_2_0_5() { return cNameNotExistsKeyword_1_3_2_0_5; }

		//'sortBy'
		public Keyword getNameSortByKeyword_1_3_2_0_6() { return cNameSortByKeyword_1_3_2_0_6; }

		//'forAll'
		public Keyword getNameForAllKeyword_1_3_2_0_7() { return cNameForAllKeyword_1_3_2_0_7; }

		//'('
		public Keyword getLeftParenthesisKeyword_1_3_3() { return cLeftParenthesisKeyword_1_3_3; }

		//(var=Identifier '|')?
		public Group getGroup_1_3_4() { return cGroup_1_3_4; }

		//var=Identifier
		public Assignment getVarAssignment_1_3_4_0() { return cVarAssignment_1_3_4_0; }

		//Identifier
		public RuleCall getVarIdentifierParserRuleCall_1_3_4_0_0() { return cVarIdentifierParserRuleCall_1_3_4_0_0; }

		//'|'
		public Keyword getVerticalLineKeyword_1_3_4_1() { return cVerticalLineKeyword_1_3_4_1; }

		//exp=Expression
		public Assignment getExpAssignment_1_3_5() { return cExpAssignment_1_3_5; }

		//Expression
		public RuleCall getExpExpressionParserRuleCall_1_3_5_0() { return cExpExpressionParserRuleCall_1_3_5_0; }

		//')'
		public Keyword getRightParenthesisKeyword_1_3_6() { return cRightParenthesisKeyword_1_3_6; }
	}

	public class PrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.avaloq.tools.ddk.xtext.expression.Expression.PrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFeatureCallParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cListLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cConstructorCallExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cGlobalVarExpressionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cParanthesizedExpressionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		////primaryExpression 	 returns [Expression e] :
		// //   c=StringLiteral { $e = factory.createStringLiteral(id(c));}
		//
		////|   x=featureCall {$e=x;}
		// //|   x=booleanLiteral {$e=x;}
		// //|   x=numberLiteral {$e=x;}
		//
		////|   x=nullLiteral {$e=x;}
		// //|   x=listLiteral {$e=x;}
		// //|   x=constructorCall {$e=x;}
		//
		////|   x=globalVarExpression {$e=x;}
		// //|   x=paranthesizedExpression {$e=x;};
		// PrimaryExpression Expression:
		//	Literal | FeatureCall | ListLiteral | ConstructorCallExpression | GlobalVarExpression | ParanthesizedExpression;
		@Override public ParserRule getRule() { return rule; }

		//Literal | FeatureCall | ListLiteral | ConstructorCallExpression | GlobalVarExpression | ParanthesizedExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//Literal
		public RuleCall getLiteralParserRuleCall_0() { return cLiteralParserRuleCall_0; }

		//FeatureCall
		public RuleCall getFeatureCallParserRuleCall_1() { return cFeatureCallParserRuleCall_1; }

		//ListLiteral
		public RuleCall getListLiteralParserRuleCall_2() { return cListLiteralParserRuleCall_2; }

		//ConstructorCallExpression
		public RuleCall getConstructorCallExpressionParserRuleCall_3() { return cConstructorCallExpressionParserRuleCall_3; }

		//GlobalVarExpression
		public RuleCall getGlobalVarExpressionParserRuleCall_4() { return cGlobalVarExpressionParserRuleCall_4; }

		//ParanthesizedExpression
		public RuleCall getParanthesizedExpressionParserRuleCall_5() { return cParanthesizedExpressionParserRuleCall_5; }
	}

	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.avaloq.tools.ddk.xtext.expression.Expression.Literal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBooleanLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIntegerLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cNullLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cRealLiteralParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cStringLiteralParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Literal:
		//	BooleanLiteral | IntegerLiteral | NullLiteral | RealLiteral | StringLiteral;
		@Override public ParserRule getRule() { return rule; }

		//BooleanLiteral | IntegerLiteral | NullLiteral | RealLiteral | StringLiteral
		public Alternatives getAlternatives() { return cAlternatives; }

		//BooleanLiteral
		public RuleCall getBooleanLiteralParserRuleCall_0() { return cBooleanLiteralParserRuleCall_0; }

		//IntegerLiteral
		public RuleCall getIntegerLiteralParserRuleCall_1() { return cIntegerLiteralParserRuleCall_1; }

		//NullLiteral
		public RuleCall getNullLiteralParserRuleCall_2() { return cNullLiteralParserRuleCall_2; }

		//RealLiteral
		public RuleCall getRealLiteralParserRuleCall_3() { return cRealLiteralParserRuleCall_3; }

		//StringLiteral
		public RuleCall getStringLiteralParserRuleCall_4() { return cStringLiteralParserRuleCall_4; }
	}

	public class BooleanLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.avaloq.tools.ddk.xtext.expression.Expression.BooleanLiteral");
		private final Assignment cValAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cValAlternatives_0 = (Alternatives)cValAssignment.eContents().get(0);
		private final Keyword cValTrueKeyword_0_0 = (Keyword)cValAlternatives_0.eContents().get(0);
		private final Keyword cValFalseKeyword_0_1 = (Keyword)cValAlternatives_0.eContents().get(1);
		
		//BooleanLiteral:
		//	val=('true' | 'false');
		@Override public ParserRule getRule() { return rule; }

		//val=('true' | 'false')
		public Assignment getValAssignment() { return cValAssignment; }

		//('true' | 'false')
		public Alternatives getValAlternatives_0() { return cValAlternatives_0; }

		//'true'
		public Keyword getValTrueKeyword_0_0() { return cValTrueKeyword_0_0; }

		//'false'
		public Keyword getValFalseKeyword_0_1() { return cValFalseKeyword_0_1; }
	}

	public class IntegerLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.avaloq.tools.ddk.xtext.expression.Expression.IntegerLiteral");
		private final Assignment cValAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValINTTerminalRuleCall_0 = (RuleCall)cValAssignment.eContents().get(0);
		
		//IntegerLiteral:
		//	val=INT;
		@Override public ParserRule getRule() { return rule; }

		//val=INT
		public Assignment getValAssignment() { return cValAssignment; }

		//INT
		public RuleCall getValINTTerminalRuleCall_0() { return cValINTTerminalRuleCall_0; }
	}

	public class NullLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.avaloq.tools.ddk.xtext.expression.Expression.NullLiteral");
		private final Assignment cValAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cValNullKeyword_0 = (Keyword)cValAssignment.eContents().get(0);
		
		//NullLiteral:
		//	val='null';
		@Override public ParserRule getRule() { return rule; }

		//val='null'
		public Assignment getValAssignment() { return cValAssignment; }

		//'null'
		public Keyword getValNullKeyword_0() { return cValNullKeyword_0; }
	}

	public class RealLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.avaloq.tools.ddk.xtext.expression.Expression.RealLiteral");
		private final Assignment cValAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValREALTerminalRuleCall_0 = (RuleCall)cValAssignment.eContents().get(0);
		
		//RealLiteral:
		//	val=REAL;
		@Override public ParserRule getRule() { return rule; }

		//val=REAL
		public Assignment getValAssignment() { return cValAssignment; }

		//REAL
		public RuleCall getValREALTerminalRuleCall_0() { return cValREALTerminalRuleCall_0; }
	}

	public class StringLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.avaloq.tools.ddk.xtext.expression.Expression.StringLiteral");
		private final Assignment cValAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValSTRINGTerminalRuleCall_0 = (RuleCall)cValAssignment.eContents().get(0);
		
		//StringLiteral:
		//	val=STRING;
		@Override public ParserRule getRule() { return rule; }

		//val=STRING
		public Assignment getValAssignment() { return cValAssignment; }

		//STRING
		public RuleCall getValSTRINGTerminalRuleCall_0() { return cValSTRINGTerminalRuleCall_0; }
	}

	public class ParanthesizedExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.avaloq.tools.ddk.xtext.expression.Expression.ParanthesizedExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		////paranthesizedExpression returns [Expression e] :
		//
		////    '(' x=expression ')' {$e=factory.createParanthesizedExpression(x);};
		// ParanthesizedExpression Expression:
		//	'(' Expression ')';
		@Override public ParserRule getRule() { return rule; }

		//'(' Expression ')'
		public Group getGroup() { return cGroup; }

		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//Expression
		public RuleCall getExpressionParserRuleCall_1() { return cExpressionParserRuleCall_1; }

		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}

	public class GlobalVarExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.avaloq.tools.ddk.xtext.expression.Expression.GlobalVarExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGLOBALVARKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIdentifierParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		////paranthesizedExpression returns [Expression e] :
		//
		////    '(' x=expression ')' {$e=factory.createParanthesizedExpression(x);};
		// GlobalVarExpression:
		//	'GLOBALVAR' name=Identifier;
		@Override public ParserRule getRule() { return rule; }

		//'GLOBALVAR' name=Identifier
		public Group getGroup() { return cGroup; }

		//'GLOBALVAR'
		public Keyword getGLOBALVARKeyword_0() { return cGLOBALVARKeyword_0; }

		//name=Identifier
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//Identifier
		public RuleCall getNameIdentifierParserRuleCall_1_0() { return cNameIdentifierParserRuleCall_1_0; }
	}

	public class FeatureCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.avaloq.tools.ddk.xtext.expression.Expression.FeatureCall");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOperationCallParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final RuleCall cCollectionExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cTypeSelectExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		////featureCall  returns [FeatureCall e] :
		//
		////	id1=identifier '(' (l=parameterList)? ')' {$e = factory.createOperationCall(id1,l);}
		//
		////|   t=type {$e=factory.createFeatureCall(t,null);}
		// //|   x=collectionExpression {$e=x;};
		// FeatureCall:
		//	OperationCall | type=Type | CollectionExpression | TypeSelectExpression;
		@Override public ParserRule getRule() { return rule; }

		//OperationCall | type=Type | CollectionExpression | TypeSelectExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//OperationCall
		public RuleCall getOperationCallParserRuleCall_0() { return cOperationCallParserRuleCall_0; }

		//type=Type
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_1_0() { return cTypeTypeParserRuleCall_1_0; }

		//CollectionExpression
		public RuleCall getCollectionExpressionParserRuleCall_2() { return cCollectionExpressionParserRuleCall_2; }

		//TypeSelectExpression
		public RuleCall getTypeSelectExpressionParserRuleCall_3() { return cTypeSelectExpressionParserRuleCall_3; }
	}

	public class OperationCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.avaloq.tools.ddk.xtext.expression.Expression.OperationCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIdentifierParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cParamsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cParamsExpressionParserRuleCall_2_0_0 = (RuleCall)cParamsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cParamsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cParamsExpressionParserRuleCall_2_1_1_0 = (RuleCall)cParamsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//OperationCall:
		//	name=Identifier '(' (params+=Expression (',' params+=Expression)*)? ')';
		@Override public ParserRule getRule() { return rule; }

		//name=Identifier '(' (params+=Expression (',' params+=Expression)*)? ')'
		public Group getGroup() { return cGroup; }

		//name=Identifier
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//Identifier
		public RuleCall getNameIdentifierParserRuleCall_0_0() { return cNameIdentifierParserRuleCall_0_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//(params+=Expression (',' params+=Expression)*)?
		public Group getGroup_2() { return cGroup_2; }

		//params+=Expression
		public Assignment getParamsAssignment_2_0() { return cParamsAssignment_2_0; }

		//Expression
		public RuleCall getParamsExpressionParserRuleCall_2_0_0() { return cParamsExpressionParserRuleCall_2_0_0; }

		//(',' params+=Expression)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//params+=Expression
		public Assignment getParamsAssignment_2_1_1() { return cParamsAssignment_2_1_1; }

		//Expression
		public RuleCall getParamsExpressionParserRuleCall_2_1_1_0() { return cParamsExpressionParserRuleCall_2_1_1_0; }

		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class ListLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.avaloq.tools.ddk.xtext.expression.Expression.ListLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cListLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cElementsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cElementsExpressionParserRuleCall_2_0_0 = (RuleCall)cElementsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cElementsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cElementsExpressionParserRuleCall_2_1_1_0 = (RuleCall)cElementsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		////listLiteral  returns [Expression e] :
		// //	'{' (l=parameterList)? '}' {$e=factory.createListLiteral(l);};
		// ListLiteral:
		//	{ListLiteral} '{' (elements+=Expression (',' elements+=Expression)*)? '}';
		@Override public ParserRule getRule() { return rule; }

		//{ListLiteral} '{' (elements+=Expression (',' elements+=Expression)*)? '}'
		public Group getGroup() { return cGroup; }

		//{ListLiteral}
		public Action getListLiteralAction_0() { return cListLiteralAction_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//(elements+=Expression (',' elements+=Expression)*)?
		public Group getGroup_2() { return cGroup_2; }

		//elements+=Expression
		public Assignment getElementsAssignment_2_0() { return cElementsAssignment_2_0; }

		//Expression
		public RuleCall getElementsExpressionParserRuleCall_2_0_0() { return cElementsExpressionParserRuleCall_2_0_0; }

		//(',' elements+=Expression)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//elements+=Expression
		public Assignment getElementsAssignment_2_1_1() { return cElementsAssignment_2_1_1; }

		//Expression
		public RuleCall getElementsExpressionParserRuleCall_2_1_1_0() { return cElementsExpressionParserRuleCall_2_1_1_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class ConstructorCallExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.avaloq.tools.ddk.xtext.expression.Expression.ConstructorCallExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNewKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeSimpleTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		
		////constructorCall  returns [Expression e] :
		// //	'new' t=simpleType
		//
		////	{$e= factory.createConstructorCallExpression(t);};
		// ConstructorCallExpression:
		//	'new' type=SimpleType;
		@Override public ParserRule getRule() { return rule; }

		//'new' type=SimpleType
		public Group getGroup() { return cGroup; }

		//'new'
		public Keyword getNewKeyword_0() { return cNewKeyword_0; }

		//type=SimpleType
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//SimpleType
		public RuleCall getTypeSimpleTypeParserRuleCall_1_0() { return cTypeSimpleTypeParserRuleCall_1_0; }
	}

	public class TypeSelectExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.avaloq.tools.ddk.xtext.expression.Expression.TypeSelectExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameTypeSelectKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		////collectionExpression  returns [FeatureCall e] :
		// //  name='typeSelect'
		//
		////  '(' t=type ')' { $e = factory.createTypeSelectExpression(id(name),t);}
		// //   |name=('collect'
		// //  | 'select'
		//
		////  | 'selectFirst'
		// //  | 'reject'
		// //  | 'exists'
		// //  | 'notExists'
		// //  | 'sortBy'
		//
		////  | 'forAll') '(' (var=identifier '|')? x=expression ')'
		//
		//// { $e = factory.createCollectionExpression(id(name),var,x);};
		// TypeSelectExpression:
		//	name='typeSelect' '(' type=Type ')';
		@Override public ParserRule getRule() { return rule; }

		//name='typeSelect' '(' type=Type ')'
		public Group getGroup() { return cGroup; }

		//name='typeSelect'
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//'typeSelect'
		public Keyword getNameTypeSelectKeyword_0_0() { return cNameTypeSelectKeyword_0_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//type=Type
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_2_0() { return cTypeTypeParserRuleCall_2_0; }

		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class CollectionExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.avaloq.tools.ddk.xtext.expression.Expression.CollectionExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cNameAlternatives_0_0 = (Alternatives)cNameAssignment_0.eContents().get(0);
		private final Keyword cNameCollectKeyword_0_0_0 = (Keyword)cNameAlternatives_0_0.eContents().get(0);
		private final Keyword cNameSelectKeyword_0_0_1 = (Keyword)cNameAlternatives_0_0.eContents().get(1);
		private final Keyword cNameSelectFirstKeyword_0_0_2 = (Keyword)cNameAlternatives_0_0.eContents().get(2);
		private final Keyword cNameRejectKeyword_0_0_3 = (Keyword)cNameAlternatives_0_0.eContents().get(3);
		private final Keyword cNameExistsKeyword_0_0_4 = (Keyword)cNameAlternatives_0_0.eContents().get(4);
		private final Keyword cNameNotExistsKeyword_0_0_5 = (Keyword)cNameAlternatives_0_0.eContents().get(5);
		private final Keyword cNameSortByKeyword_0_0_6 = (Keyword)cNameAlternatives_0_0.eContents().get(6);
		private final Keyword cNameForAllKeyword_0_0_7 = (Keyword)cNameAlternatives_0_0.eContents().get(7);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cVarAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cVarIdentifierParserRuleCall_2_0_0 = (RuleCall)cVarAssignment_2_0.eContents().get(0);
		private final Keyword cVerticalLineKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cExpAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpExpressionParserRuleCall_3_0 = (RuleCall)cExpAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//CollectionExpression:
		//	name=('collect' | 'select' | 'selectFirst' | 'reject' | 'exists' | 'notExists' | 'sortBy' | 'forAll') '('
		//	(var=Identifier '|')? exp=Expression ')';
		@Override public ParserRule getRule() { return rule; }

		//name=('collect' | 'select' | 'selectFirst' | 'reject' | 'exists' | 'notExists' | 'sortBy' | 'forAll') '('
		//(var=Identifier '|')? exp=Expression ')'
		public Group getGroup() { return cGroup; }

		//name=('collect' | 'select' | 'selectFirst' | 'reject' | 'exists' | 'notExists' | 'sortBy' | 'forAll')
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//('collect' | 'select' | 'selectFirst' | 'reject' | 'exists' | 'notExists' | 'sortBy' | 'forAll')
		public Alternatives getNameAlternatives_0_0() { return cNameAlternatives_0_0; }

		//'collect'
		public Keyword getNameCollectKeyword_0_0_0() { return cNameCollectKeyword_0_0_0; }

		//'select'
		public Keyword getNameSelectKeyword_0_0_1() { return cNameSelectKeyword_0_0_1; }

		//'selectFirst'
		public Keyword getNameSelectFirstKeyword_0_0_2() { return cNameSelectFirstKeyword_0_0_2; }

		//'reject'
		public Keyword getNameRejectKeyword_0_0_3() { return cNameRejectKeyword_0_0_3; }

		//'exists'
		public Keyword getNameExistsKeyword_0_0_4() { return cNameExistsKeyword_0_0_4; }

		//'notExists'
		public Keyword getNameNotExistsKeyword_0_0_5() { return cNameNotExistsKeyword_0_0_5; }

		//'sortBy'
		public Keyword getNameSortByKeyword_0_0_6() { return cNameSortByKeyword_0_0_6; }

		//'forAll'
		public Keyword getNameForAllKeyword_0_0_7() { return cNameForAllKeyword_0_0_7; }

		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//(var=Identifier '|')?
		public Group getGroup_2() { return cGroup_2; }

		//var=Identifier
		public Assignment getVarAssignment_2_0() { return cVarAssignment_2_0; }

		//Identifier
		public RuleCall getVarIdentifierParserRuleCall_2_0_0() { return cVarIdentifierParserRuleCall_2_0_0; }

		//'|'
		public Keyword getVerticalLineKeyword_2_1() { return cVerticalLineKeyword_2_1; }

		//exp=Expression
		public Assignment getExpAssignment_3() { return cExpAssignment_3; }

		//Expression
		public RuleCall getExpExpressionParserRuleCall_3_0() { return cExpExpressionParserRuleCall_3_0; }

		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.avaloq.tools.ddk.xtext.expression.Expression.Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCollectionTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSimpleTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		////type returns [Identifier id] :
		// //	a = collectionType {$id=a;}|
		// //	b = simpleType {$id=b;};
		// Type Identifier:
		//	CollectionType | SimpleType;
		@Override public ParserRule getRule() { return rule; }

		//CollectionType | SimpleType
		public Alternatives getAlternatives() { return cAlternatives; }

		//CollectionType
		public RuleCall getCollectionTypeParserRuleCall_0() { return cCollectionTypeParserRuleCall_0; }

		//SimpleType
		public RuleCall getSimpleTypeParserRuleCall_1() { return cSimpleTypeParserRuleCall_1; }
	}

	public class CollectionTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.avaloq.tools.ddk.xtext.expression.Expression.CollectionType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cClAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cClAlternatives_0_0 = (Alternatives)cClAssignment_0.eContents().get(0);
		private final Keyword cClCollectionKeyword_0_0_0 = (Keyword)cClAlternatives_0_0.eContents().get(0);
		private final Keyword cClListKeyword_0_0_1 = (Keyword)cClAlternatives_0_0.eContents().get(1);
		private final Keyword cClSetKeyword_0_0_2 = (Keyword)cClAlternatives_0_0.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cId1Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cId1SimpleTypeParserRuleCall_2_0 = (RuleCall)cId1Assignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		////collectionType  returns [Identifier id ] :
		// //  cl=( 'Collection' | 'List' | 'Set' ) {$id = id(cl);}
		//
		////  (b='[' id1=simpleType c=']' { $id.append(id(b));$id.append(id1);$id.append(id(c));})?;
		// CollectionType Identifier:
		//	cl=('Collection' | 'List' | 'Set') '[' id1=SimpleType ']';
		@Override public ParserRule getRule() { return rule; }

		//cl=('Collection' | 'List' | 'Set') '[' id1=SimpleType ']'
		public Group getGroup() { return cGroup; }

		//cl=('Collection' | 'List' | 'Set')
		public Assignment getClAssignment_0() { return cClAssignment_0; }

		//('Collection' | 'List' | 'Set')
		public Alternatives getClAlternatives_0_0() { return cClAlternatives_0_0; }

		//'Collection'
		public Keyword getClCollectionKeyword_0_0_0() { return cClCollectionKeyword_0_0_0; }

		//'List'
		public Keyword getClListKeyword_0_0_1() { return cClListKeyword_0_0_1; }

		//'Set'
		public Keyword getClSetKeyword_0_0_2() { return cClSetKeyword_0_0_2; }

		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }

		//id1=SimpleType
		public Assignment getId1Assignment_2() { return cId1Assignment_2; }

		//SimpleType
		public RuleCall getId1SimpleTypeParserRuleCall_2_0() { return cId1SimpleTypeParserRuleCall_2_0; }

		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}

	public class SimpleTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.avaloq.tools.ddk.xtext.expression.Expression.SimpleType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdIdentifierParserRuleCall_0_0 = (RuleCall)cIdAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cColonColonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cIdAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cIdIdentifierParserRuleCall_1_1_0 = (RuleCall)cIdAssignment_1_1.eContents().get(0);
		
		////simpleType returns [Identifier id] :
		// //	x=identifier {$id=x;}
		//
		////	(d='::' end=identifier  {$id.append(id(d)); $id.append(end);})*;
		// SimpleType Identifier:
		//	id+=Identifier ('::' id+=Identifier)*;
		@Override public ParserRule getRule() { return rule; }

		//id+=Identifier ('::' id+=Identifier)*
		public Group getGroup() { return cGroup; }

		//id+=Identifier
		public Assignment getIdAssignment_0() { return cIdAssignment_0; }

		//Identifier
		public RuleCall getIdIdentifierParserRuleCall_0_0() { return cIdIdentifierParserRuleCall_0_0; }

		//('::' id+=Identifier)*
		public Group getGroup_1() { return cGroup_1; }

		//'::'
		public Keyword getColonColonKeyword_1_0() { return cColonColonKeyword_1_0; }

		//id+=Identifier
		public Assignment getIdAssignment_1_1() { return cIdAssignment_1_1; }

		//Identifier
		public RuleCall getIdIdentifierParserRuleCall_1_1_0() { return cIdIdentifierParserRuleCall_1_1_0; }
	}

	public class IdentifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.avaloq.tools.ddk.xtext.expression.Expression.Identifier");
		private final RuleCall cIDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Identifier:
		//	ID;
		@Override public ParserRule getRule() { return rule; }

		//ID
		public RuleCall getIDTerminalRuleCall() { return cIDTerminalRuleCall; }
	}
	
	
	private final ExpressionElements pExpression;
	private final SyntaxElementElements pSyntaxElement;
	private final LetExpressionElements pLetExpression;
	private final CastedExpressionElements pCastedExpression;
	private final ChainExpressionElements pChainExpression;
	private final ChainedExpressionElements pChainedExpression;
	private final IfExpressionTriElements pIfExpressionTri;
	private final IfExpressionKwElements pIfExpressionKw;
	private final SwitchExpressionElements pSwitchExpression;
	private final CaseElements pCase;
	private final OrExpressionElements pOrExpression;
	private final AndExpressionElements pAndExpression;
	private final ImpliesExpressionElements pImpliesExpression;
	private final RelationalExpressionElements pRelationalExpression;
	private final AdditiveExpressionElements pAdditiveExpression;
	private final MultiplicativeExpressionElements pMultiplicativeExpression;
	private final UnaryOrInfixExpressionElements pUnaryOrInfixExpression;
	private final UnaryExpressionElements pUnaryExpression;
	private final InfixExpressionElements pInfixExpression;
	private final PrimaryExpressionElements pPrimaryExpression;
	private final LiteralElements pLiteral;
	private final BooleanLiteralElements pBooleanLiteral;
	private final IntegerLiteralElements pIntegerLiteral;
	private final NullLiteralElements pNullLiteral;
	private final RealLiteralElements pRealLiteral;
	private final StringLiteralElements pStringLiteral;
	private final TerminalRule tREAL;
	private final ParanthesizedExpressionElements pParanthesizedExpression;
	private final GlobalVarExpressionElements pGlobalVarExpression;
	private final FeatureCallElements pFeatureCall;
	private final OperationCallElements pOperationCall;
	private final ListLiteralElements pListLiteral;
	private final ConstructorCallExpressionElements pConstructorCallExpression;
	private final TypeSelectExpressionElements pTypeSelectExpression;
	private final CollectionExpressionElements pCollectionExpression;
	private final TypeElements pType;
	private final CollectionTypeElements pCollectionType;
	private final SimpleTypeElements pSimpleType;
	private final IdentifierElements pIdentifier;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public ExpressionGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pExpression = new ExpressionElements();
		this.pSyntaxElement = new SyntaxElementElements();
		this.pLetExpression = new LetExpressionElements();
		this.pCastedExpression = new CastedExpressionElements();
		this.pChainExpression = new ChainExpressionElements();
		this.pChainedExpression = new ChainedExpressionElements();
		this.pIfExpressionTri = new IfExpressionTriElements();
		this.pIfExpressionKw = new IfExpressionKwElements();
		this.pSwitchExpression = new SwitchExpressionElements();
		this.pCase = new CaseElements();
		this.pOrExpression = new OrExpressionElements();
		this.pAndExpression = new AndExpressionElements();
		this.pImpliesExpression = new ImpliesExpressionElements();
		this.pRelationalExpression = new RelationalExpressionElements();
		this.pAdditiveExpression = new AdditiveExpressionElements();
		this.pMultiplicativeExpression = new MultiplicativeExpressionElements();
		this.pUnaryOrInfixExpression = new UnaryOrInfixExpressionElements();
		this.pUnaryExpression = new UnaryExpressionElements();
		this.pInfixExpression = new InfixExpressionElements();
		this.pPrimaryExpression = new PrimaryExpressionElements();
		this.pLiteral = new LiteralElements();
		this.pBooleanLiteral = new BooleanLiteralElements();
		this.pIntegerLiteral = new IntegerLiteralElements();
		this.pNullLiteral = new NullLiteralElements();
		this.pRealLiteral = new RealLiteralElements();
		this.pStringLiteral = new StringLiteralElements();
		this.tREAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.avaloq.tools.ddk.xtext.expression.Expression.REAL");
		this.pParanthesizedExpression = new ParanthesizedExpressionElements();
		this.pGlobalVarExpression = new GlobalVarExpressionElements();
		this.pFeatureCall = new FeatureCallElements();
		this.pOperationCall = new OperationCallElements();
		this.pListLiteral = new ListLiteralElements();
		this.pConstructorCallExpression = new ConstructorCallExpressionElements();
		this.pTypeSelectExpression = new TypeSelectExpressionElements();
		this.pCollectionExpression = new CollectionExpressionElements();
		this.pType = new TypeElements();
		this.pCollectionType = new CollectionTypeElements();
		this.pSimpleType = new SimpleTypeElements();
		this.pIdentifier = new IdentifierElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.avaloq.tools.ddk.xtext.expression.Expression".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//// this is a translation of the expression part of
	//
	//// /org.eclipse.xtend/src/org/eclipse/internal/xtend/xtend/parser/Xtend.g
	// // to Xtext
	//
	////expression returns [Expression e]:
	// //	x=letExpression {$e=x;};
	// Expression:
	//	LetExpression | => CastedExpression | ChainExpression;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//SyntaxElement:
	//	Expression | Case | Type;
	public SyntaxElementElements getSyntaxElementAccess() {
		return pSyntaxElement;
	}
	
	public ParserRule getSyntaxElementRule() {
		return getSyntaxElementAccess().getRule();
	}

	////letExpression  returns [Expression e] :
	// //   'let' v=identifier '=' varExpr=castedExpression ':' target=expression
	//
	////   {$e=factory.createLetExpression(v,varExpr,target);}
	// //|  x=castedExpression {$e=x;};
	// LetExpression:
	//	'let' identifier=Identifier '=' varExpr=Expression ':' target=Expression;
	public LetExpressionElements getLetExpressionAccess() {
		return pLetExpression;
	}
	
	public ParserRule getLetExpressionRule() {
		return getLetExpressionAccess().getRule();
	}

	////castedExpression returns [Expression e] :
	// //   ('(' type ')' castedExpression)=>
	//
	////	'(' t=type ')' x=chainExpression {$e = factory.createCast(t,x);}
	// //	| x=chainExpression {$e=x;};
	//
	//CastedExpression:
	//	'(' type=Type ')' target=Expression;
	public CastedExpressionElements getCastedExpressionAccess() {
		return pCastedExpression;
	}
	
	public ParserRule getCastedExpressionRule() {
		return getCastedExpressionAccess().getRule();
	}

	////chainExpression  returns [Expression e] :
	//
	////	x=ifExpression {$e=x;} ( '->' right=ifExpression {$e=factory.createChainExpression($e,right);})*;
	// ChainExpression
	//Expression:
	//	ChainedExpression ({ChainExpression.first=current} '->' next=ChainedExpression)*;
	public ChainExpressionElements getChainExpressionAccess() {
		return pChainExpression;
	}
	
	public ParserRule getChainExpressionRule() {
		return getChainExpressionAccess().getRule();
	}

	//ChainedExpression Expression:
	//	IfExpressionKw | IfExpressionTri | SwitchExpression;
	public ChainedExpressionElements getChainedExpressionAccess() {
		return pChainedExpression;
	}
	
	public ParserRule getChainedExpressionRule() {
		return getChainedExpressionAccess().getRule();
	}

	////ifExpression  returns [Expression e] :
	//
	////	x=switchExpression {$e=x;}('?' thenPart=switchExpression ':' elsePart=switchExpression {$e=factory.createIf($e,thenPart,elsePart);})?
	//
	////|	'if' condition=switchExpression 'then' thenPart=switchExpression ('else' elsePart=expression)? {$e=factory.createIf(condition,thenPart,elsePart);};
	//
	//IfExpressionTri Expression:
	//	OrExpression ({IfExpression.condition=current} '?' thenPart=ChainedExpression ':' elsePart=ChainedExpression)?;
	public IfExpressionTriElements getIfExpressionTriAccess() {
		return pIfExpressionTri;
	}
	
	public ParserRule getIfExpressionTriRule() {
		return getIfExpressionTriAccess().getRule();
	}

	//IfExpressionKw IfExpression:
	//	'if' condition=ChainedExpression 'then' thenPart=ChainedExpression -> ('else' elsePart=ChainedExpression)?;
	public IfExpressionKwElements getIfExpressionKwAccess() {
		return pIfExpressionKw;
	}
	
	public ParserRule getIfExpressionKwRule() {
		return getIfExpressionKwAccess().getRule();
	}

	////switchExpression  returns [Expression e=null] @init {List cases = new ArrayList();} :
	//
	////   'switch' ('(' pred = orExpression ')')?
	// //   '{'
	// //   (
	// //     'case' c=orExpression  ':'  v=orExpression
	//
	////     {cases.add(factory.createCase(c, v));}
	// //   )*
	// //   'default' ':' def = orExpression
	// //   '}'
	//
	////   {$e = factory.createSwitchExpression(pred,cases,def);}
	// //|  x=orExpression {$e=x;};
	// SwitchExpression:
	//	'switch' ('(' switchExpr=OrExpression ')')? '{' case+=Case* 'default' ':' defaultExpr=OrExpression '}';
	public SwitchExpressionElements getSwitchExpressionAccess() {
		return pSwitchExpression;
	}
	
	public ParserRule getSwitchExpressionRule() {
		return getSwitchExpressionAccess().getRule();
	}

	//Case:
	//	'case' condition=OrExpression ':' thenPar=OrExpression;
	public CaseElements getCaseAccess() {
		return pCase;
	}
	
	public ParserRule getCaseRule() {
		return getCaseAccess().getRule();
	}

	////orExpression returns [Expression e] :
	//
	////  	x=andExpression {$e=x;} (name='||' r=andExpression 	{$e = factory.createBooleanOperation(id(name),$e,r);})*;
	//
	//OrExpression Expression:
	//	AndExpression ({BooleanOperation.left=current} operator='||' right=AndExpression)*;
	public OrExpressionElements getOrExpressionAccess() {
		return pOrExpression;
	}
	
	public ParserRule getOrExpressionRule() {
		return getOrExpressionAccess().getRule();
	}

	////andExpression 	returns [Expression e] :
	//
	////	x=impliesExpression {$e=x;} (name='&&' r=impliesExpression 	{$e = factory.createBooleanOperation(id(name),$e,r);})*;
	//
	//AndExpression Expression:
	//	ImpliesExpression ({BooleanOperation.left=current} operator='&&' right=ImpliesExpression)*;
	public AndExpressionElements getAndExpressionAccess() {
		return pAndExpression;
	}
	
	public ParserRule getAndExpressionRule() {
		return getAndExpressionAccess().getRule();
	}

	////impliesExpression returns [Expression e] :
	//
	////	x=relationalExpression {$e=x;} (name='implies' r=relationalExpression 	{$e = factory.createBooleanOperation(id(name),$e,r);})*;
	//
	//ImpliesExpression Expression:
	//	RelationalExpression ({BooleanOperation.left=current} operator='implies' right=RelationalExpression)*;
	public ImpliesExpressionElements getImpliesExpressionAccess() {
		return pImpliesExpression;
	}
	
	public ParserRule getImpliesExpressionRule() {
		return getImpliesExpressionAccess().getRule();
	}

	////relationalExpression returns [Expression e] :
	// //	x=additiveExpression {$e=x;}
	//
	////	(name=('==' | '!=' | '>=' | '<=' | '>' | '<') r=additiveExpression {$e = factory.createBinaryOperation(id(name),$e,r);})*;
	//
	//RelationalExpression Expression:
	//	AdditiveExpression ({BooleanOperation.left=current} operator=('==' | '!=' | '>=' | '<=' | '>' | '<')
	//	right=AdditiveExpression)*;
	public RelationalExpressionElements getRelationalExpressionAccess() {
		return pRelationalExpression;
	}
	
	public ParserRule getRelationalExpressionRule() {
		return getRelationalExpressionAccess().getRule();
	}

	////additiveExpression returns [Expression e] :
	// //	x=multiplicativeExpression {$e=x;}
	//
	////   (name=('+'| '-') r=multiplicativeExpression {$e = factory.createBinaryOperation(id(name),$e,r);})*;
	//
	//AdditiveExpression Expression:
	//	MultiplicativeExpression ({OperationCall.params+=current} name=('+' | '-') params+=MultiplicativeExpression)*;
	public AdditiveExpressionElements getAdditiveExpressionAccess() {
		return pAdditiveExpression;
	}
	
	public ParserRule getAdditiveExpressionRule() {
		return getAdditiveExpressionAccess().getRule();
	}

	////multiplicativeExpression returns [Expression e]:
	// //	x=unaryExpression {$e=x;}
	//
	////	(name=('*' | '/') r=unaryExpression {$e = factory.createBinaryOperation(id(name),$e,r);})*;
	//
	//MultiplicativeExpression Expression:
	//	UnaryOrInfixExpression ({OperationCall.params+=current} name=('*' | '/') params+=UnaryOrInfixExpression)*;
	public MultiplicativeExpressionElements getMultiplicativeExpressionAccess() {
		return pMultiplicativeExpression;
	}
	
	public ParserRule getMultiplicativeExpressionRule() {
		return getMultiplicativeExpressionAccess().getRule();
	}

	////unaryExpression returns [Expression e] :
	// //	x=infixExpression {$e=x;}
	//
	////|	name='!' x=infixExpression	{$e = factory.createOperationCall(id(name),x);}
	//
	////|	name='-' x=infixExpression	{$e = factory.createOperationCall(id(name),x);};
	// UnaryOrInfixExpression Expression:
	//	UnaryExpression | InfixExpression;
	public UnaryOrInfixExpressionElements getUnaryOrInfixExpressionAccess() {
		return pUnaryOrInfixExpression;
	}
	
	public ParserRule getUnaryOrInfixExpressionRule() {
		return getUnaryOrInfixExpressionAccess().getRule();
	}

	//UnaryExpression OperationCall:
	//	name=('!' | '-') params+=InfixExpression;
	public UnaryExpressionElements getUnaryExpressionAccess() {
		return pUnaryExpression;
	}
	
	public ParserRule getUnaryExpressionRule() {
		return getUnaryExpressionAccess().getRule();
	}

	////infixExpression returns [Expression e] :
	//
	////	x=primaryExpression {$e=x;} ( '.' op=featureCall { if (op!=null) { op.setTarget($e);$e=op;}} )*;
	//
	//// having support for fragments could avoid the redundancy at this point
	// InfixExpression Expression:
	//	PrimaryExpression ({OperationCall.target=current} '.' name=Identifier '(' (params+=Expression (','
	//	params+=Expression)*)? ')' | {FeatureCall.target=current} '.' type=Type | {TypeSelectExpression.target=current} '.'
	//	name='typeSelect' '(' type=Type ')' | {CollectionExpression.target=current} '.' name=('collect' | 'select' |
	//	'selectFirst' | 'reject' | 'exists' | 'notExists' | 'sortBy' | 'forAll') '(' (var=Identifier '|')? exp=Expression
	//	')')*;
	public InfixExpressionElements getInfixExpressionAccess() {
		return pInfixExpression;
	}
	
	public ParserRule getInfixExpressionRule() {
		return getInfixExpressionAccess().getRule();
	}

	////primaryExpression 	 returns [Expression e] :
	// //   c=StringLiteral { $e = factory.createStringLiteral(id(c));}
	//
	////|   x=featureCall {$e=x;}
	// //|   x=booleanLiteral {$e=x;}
	// //|   x=numberLiteral {$e=x;}
	//
	////|   x=nullLiteral {$e=x;}
	// //|   x=listLiteral {$e=x;}
	// //|   x=constructorCall {$e=x;}
	//
	////|   x=globalVarExpression {$e=x;}
	// //|   x=paranthesizedExpression {$e=x;};
	// PrimaryExpression Expression:
	//	Literal | FeatureCall | ListLiteral | ConstructorCallExpression | GlobalVarExpression | ParanthesizedExpression;
	public PrimaryExpressionElements getPrimaryExpressionAccess() {
		return pPrimaryExpression;
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}

	//Literal:
	//	BooleanLiteral | IntegerLiteral | NullLiteral | RealLiteral | StringLiteral;
	public LiteralElements getLiteralAccess() {
		return pLiteral;
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}

	//BooleanLiteral:
	//	val=('true' | 'false');
	public BooleanLiteralElements getBooleanLiteralAccess() {
		return pBooleanLiteral;
	}
	
	public ParserRule getBooleanLiteralRule() {
		return getBooleanLiteralAccess().getRule();
	}

	//IntegerLiteral:
	//	val=INT;
	public IntegerLiteralElements getIntegerLiteralAccess() {
		return pIntegerLiteral;
	}
	
	public ParserRule getIntegerLiteralRule() {
		return getIntegerLiteralAccess().getRule();
	}

	//NullLiteral:
	//	val='null';
	public NullLiteralElements getNullLiteralAccess() {
		return pNullLiteral;
	}
	
	public ParserRule getNullLiteralRule() {
		return getNullLiteralAccess().getRule();
	}

	//RealLiteral:
	//	val=REAL;
	public RealLiteralElements getRealLiteralAccess() {
		return pRealLiteral;
	}
	
	public ParserRule getRealLiteralRule() {
		return getRealLiteralAccess().getRule();
	}

	//StringLiteral:
	//	val=STRING;
	public StringLiteralElements getStringLiteralAccess() {
		return pStringLiteral;
	}
	
	public ParserRule getStringLiteralRule() {
		return getStringLiteralAccess().getRule();
	}

	//terminal REAL:
	//	'0'..'9'* '.' '0'..'9'*;
	public TerminalRule getREALRule() {
		return tREAL;
	} 

	////paranthesizedExpression returns [Expression e] :
	//
	////    '(' x=expression ')' {$e=factory.createParanthesizedExpression(x);};
	// ParanthesizedExpression Expression:
	//	'(' Expression ')';
	public ParanthesizedExpressionElements getParanthesizedExpressionAccess() {
		return pParanthesizedExpression;
	}
	
	public ParserRule getParanthesizedExpressionRule() {
		return getParanthesizedExpressionAccess().getRule();
	}

	////paranthesizedExpression returns [Expression e] :
	//
	////    '(' x=expression ')' {$e=factory.createParanthesizedExpression(x);};
	// GlobalVarExpression:
	//	'GLOBALVAR' name=Identifier;
	public GlobalVarExpressionElements getGlobalVarExpressionAccess() {
		return pGlobalVarExpression;
	}
	
	public ParserRule getGlobalVarExpressionRule() {
		return getGlobalVarExpressionAccess().getRule();
	}

	////featureCall  returns [FeatureCall e] :
	//
	////	id1=identifier '(' (l=parameterList)? ')' {$e = factory.createOperationCall(id1,l);}
	//
	////|   t=type {$e=factory.createFeatureCall(t,null);}
	// //|   x=collectionExpression {$e=x;};
	// FeatureCall:
	//	OperationCall | type=Type | CollectionExpression | TypeSelectExpression;
	public FeatureCallElements getFeatureCallAccess() {
		return pFeatureCall;
	}
	
	public ParserRule getFeatureCallRule() {
		return getFeatureCallAccess().getRule();
	}

	//OperationCall:
	//	name=Identifier '(' (params+=Expression (',' params+=Expression)*)? ')';
	public OperationCallElements getOperationCallAccess() {
		return pOperationCall;
	}
	
	public ParserRule getOperationCallRule() {
		return getOperationCallAccess().getRule();
	}

	////listLiteral  returns [Expression e] :
	// //	'{' (l=parameterList)? '}' {$e=factory.createListLiteral(l);};
	// ListLiteral:
	//	{ListLiteral} '{' (elements+=Expression (',' elements+=Expression)*)? '}';
	public ListLiteralElements getListLiteralAccess() {
		return pListLiteral;
	}
	
	public ParserRule getListLiteralRule() {
		return getListLiteralAccess().getRule();
	}

	////constructorCall  returns [Expression e] :
	// //	'new' t=simpleType
	//
	////	{$e= factory.createConstructorCallExpression(t);};
	// ConstructorCallExpression:
	//	'new' type=SimpleType;
	public ConstructorCallExpressionElements getConstructorCallExpressionAccess() {
		return pConstructorCallExpression;
	}
	
	public ParserRule getConstructorCallExpressionRule() {
		return getConstructorCallExpressionAccess().getRule();
	}

	////collectionExpression  returns [FeatureCall e] :
	// //  name='typeSelect'
	//
	////  '(' t=type ')' { $e = factory.createTypeSelectExpression(id(name),t);}
	// //   |name=('collect'
	// //  | 'select'
	//
	////  | 'selectFirst'
	// //  | 'reject'
	// //  | 'exists'
	// //  | 'notExists'
	// //  | 'sortBy'
	//
	////  | 'forAll') '(' (var=identifier '|')? x=expression ')'
	//
	//// { $e = factory.createCollectionExpression(id(name),var,x);};
	// TypeSelectExpression:
	//	name='typeSelect' '(' type=Type ')';
	public TypeSelectExpressionElements getTypeSelectExpressionAccess() {
		return pTypeSelectExpression;
	}
	
	public ParserRule getTypeSelectExpressionRule() {
		return getTypeSelectExpressionAccess().getRule();
	}

	//CollectionExpression:
	//	name=('collect' | 'select' | 'selectFirst' | 'reject' | 'exists' | 'notExists' | 'sortBy' | 'forAll') '('
	//	(var=Identifier '|')? exp=Expression ')';
	public CollectionExpressionElements getCollectionExpressionAccess() {
		return pCollectionExpression;
	}
	
	public ParserRule getCollectionExpressionRule() {
		return getCollectionExpressionAccess().getRule();
	}

	////type returns [Identifier id] :
	// //	a = collectionType {$id=a;}|
	// //	b = simpleType {$id=b;};
	// Type Identifier:
	//	CollectionType | SimpleType;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	////collectionType  returns [Identifier id ] :
	// //  cl=( 'Collection' | 'List' | 'Set' ) {$id = id(cl);}
	//
	////  (b='[' id1=simpleType c=']' { $id.append(id(b));$id.append(id1);$id.append(id(c));})?;
	// CollectionType Identifier:
	//	cl=('Collection' | 'List' | 'Set') '[' id1=SimpleType ']';
	public CollectionTypeElements getCollectionTypeAccess() {
		return pCollectionType;
	}
	
	public ParserRule getCollectionTypeRule() {
		return getCollectionTypeAccess().getRule();
	}

	////simpleType returns [Identifier id] :
	// //	x=identifier {$id=x;}
	//
	////	(d='::' end=identifier  {$id.append(id(d)); $id.append(end);})*;
	// SimpleType Identifier:
	//	id+=Identifier ('::' id+=Identifier)*;
	public SimpleTypeElements getSimpleTypeAccess() {
		return pSimpleType;
	}
	
	public ParserRule getSimpleTypeRule() {
		return getSimpleTypeAccess().getRule();
	}

	//Identifier:
	//	ID;
	public IdentifierElements getIdentifierAccess() {
		return pIdentifier;
	}
	
	public ParserRule getIdentifierRule() {
		return getIdentifierAccess().getRule();
	}

	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
